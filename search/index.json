[{"content":" 使用qq浏览器等软件的扫描文档功能。 word中，右键依次选择设置图片格式—图片—图片校正—调高对比度和清晰度。 WPS中，依次点击图片工具—调高对比度。  ","date":"2022-01-20T17:01:18+08:00","permalink":"/archives/remove-the-gray-background-of-the-test-paper-picture/","title":"去掉试卷图片灰色背景的方法"},{"content":"北师大三年级数学下册优质课，来源于一师一优课，基本上都是部级优课，点击前往bilibili可选集观看。\n\r\r","date":"2022-01-16T14:25:10+08:00","permalink":"/archives/three-grade-math-xia-you-ke/","title":"北师大三年级数学下册优质课"},{"content":"1.确保PPT扩展名为.pptx\n2.将PPT扩展名改为.rar\n3.用压缩软件打开，音乐文件在/ppt/media文件夹下。\n","date":"2021-11-17T19:08:52+08:00","permalink":"/archives/ppt-to-mps/","title":"怎样提取PPT里的背景音乐"},{"content":"用pr做了一个电子相册，参考： 使用 Premiere 把照片变成唯美动画效果。\n\r\r","date":"2021-11-12T22:27:25+08:00","permalink":"/archives/pr-2021-autumn-games/","title":"2021年秋季运动会"},{"content":"这是三年级的第一次公开课，国庆来了第一天第一节课就开始上。本次公开课的课题是《小树有多少棵》，主要内容是探究并整十、整百数乘一位数的口算方法。在上课开始我通过“对口令”的小游戏使学生来快速进入学习状态，让他们对今天所学知识有一个初步的了解。接着就是探究整十、整百数乘一位数的口算方法，主要有以下四步：（1）先独立列出算式（2）尝试用自己喜欢的方法获得计算结果（3）交流计算方法：连加、列举法、表内乘法等（4）总结算法。纵观本次公开课主要存在以下问题：\n  缺少板书，虽然多媒体课件什么都有，但是黑板上一定要有板书，其实在上课结束时我就意识到这一点。\n  重要的知识点总结、概念都要让学生读几遍。\n  数学语言不够精确，在最后总结规律时，应该说“一个乘数，另一个乘数”而不是“一个数，另一个数”\n  缺乏对后进生的关注。对于学困生课堂要多加关注。\n  ","date":"2021-10-10T20:38:29+08:00","permalink":"/archives/xiao-shu-you-duo-shao-ke-fs/","title":"三年级数学上册册第四单元《小树有多少棵》教学反思"},{"content":"一、 教学目标：\n1、探索并掌握整十、整百数乘一位数的口算方法，并能正确地进行口算。\n2、结合具体情境，在讨论解决实际问题的过程中，培养学生提出问题和解决问题的意识和能力。\n二、教学重点：探索并掌握整十、整百数乘一位数的口算方法，并能正确地进行计算。\n三、教学难点：结合具体情境，体验算法的多样性，并优化出整十、整百数乘一位数的口算方法。\n四、教学课时：1课时\n五、教学手段：\n六、教学过程：\n（一）复习旧知，新知铺垫\n1.“对口令”小游戏：在上课前，我们来玩一个“对口令”小游戏，由我来说乘法口诀前半部分，你们来说后半部分。\n2.可能有的同学已经猜到了，今天我们要学的就与乘法口诀有关。\n（二）创设情境，提出问题\n1.出示书上情境图，提问：说一说你能从中得到那些数学信息。\n2.提问：从这些数学信息中，你能提出哪些数学问题。\n根据这些数学信息可以提出很多数学问题，今天我们就主要研究这两个数学问题：\n（1）3捆一共多少棵？\n（2）园林工人运走了三车树苗，一共运走了多少棵？\n（三）探究整十数乘一位数算法\n1．3捆一共多少棵？\n（1）先独立列出算式；（20×3）\n（2）尝试用自己喜欢的方法获得计算结果；（20×3=60（棵））\n（3）交流计算方法；（连加、列举法、表内乘法等）\n（4）总结算法：整十数乘一位数，先用整十数0前面的数与一位数相乘，再在积的末尾添上一个0。\n（四）探究整百数乘一位数算法\n 园林工人运走了三车树苗，一共运走了多少棵？  （1）先独立列出算式；（500×3）\n（2）尝试用自己喜欢的方法获得计算结果；（500×3=1500（棵）\n（3）交流计算方法；（连加、表内乘法等）\n（4）总结算法：整百数乘一位数，先用整百数0前面的数与一位数相乘，再在积的末尾添上两个0。\n2.算一算，你发现了什么？\n（两个数相乘，一个乘数不变，另一个乘数扩大10倍，积也跟着扩大10倍；另一个乘数扩大100倍，积也跟着扩大100倍。）\n（三）扩展应用\n1.整千数乘一位数：2000×4=\n2.整十数乘整十数：30×60=\n（四）巩固应用\n“练一练”的第1-5题。\n（五）回顾整理\n通过这节课的学习，你学到了什么？\n整十、整百数乘一位数，先用整十、整百数0前面的数与一位数相乘，再在积的末尾添上相应个数的0。\n七、板书设计\n20×3=60（棵）\n500×3=1500（棵）\n","date":"2021-10-02T20:42:45+08:00","permalink":"/archives/xiao-shu-you-duo-shao-ke/","title":"三年级数学上册册第四单元《小树有多少棵》教学设计"},{"content":"今天才知道怎样才能把A3文档打印到A4纸上，真的是孤陋寡闻。 有必要记录一下。这里可以用Word提供的“复印机”缩放功能来打印，就是说可以通过“缩放”命令，让Word为文档设置格式，使其符合打印机的纸张尺寸。操作步骤如下： 点击“文件→打印”，系统弹出“打印”对话框，“缩放”，在“按纸型缩放”下拉列表框中，选择要使用的纸型，比如选择A4纸型。单击“确定”按钮。 这时，Word将调整文档的页面使其适合所选纸型，在此Word将原本需要打印在A3纸张上的文档，通过自动缩小字号和图形打印在A4幅面的纸上。这类似于复印机的“缩小／放大”功能。\n参考链接：怎样设置才能把A3文档打印到A4纸上\n","date":"2021-08-26T19:34:14+08:00","permalink":"/archives/a3-to-a4/","title":"怎样才能把A3文档打印到A4纸上"},{"content":"一、解决port 443问题：\n1.切换到全：\ngit config --global http.proxy http://127.0.0.1:10809 git config --global https.proxy http://127.0.0.1:10808 2.取消全：\ngit config --global --unset http.proxy git config --global --unset https.proxy 3.再次切换到全：\ngit config --global http.proxy http://127.0.0.1:10809 git config --global https.proxy http://127.0.0.1:10808 这时会出现 port 22: Connection refused问题。\n二、解决port 22问题\n1.进入.ssh的目录，使用命令touch config创建一个配置文件，并写入你github的配置信息。（xxxxx@xx.com是你github的注册邮箱）\nHost github.com User xxxxx@xx.com Hostname ssh.github.com PreferredAuthentications publickey IdentityFile ~/.ssh/id_rsa Port 443 2.更改配置文件config的权限。\nchmod 600 config 3.再尝试查看连接状态\nssh git@github.com 参考链接：\n1.解决 Failed to connect to github.com port 443\n2.解决ssh: connect to host github.com port 22\n","date":"2021-08-18T11:56:29+08:00","permalink":"/archives/github-port-443-and-22/","title":"解决Github Port 443以及Port 22问题"},{"content":"服务部署 1.首先保证成功激活腾讯云开发.\n2.点击一键部署至云开发\n 推荐创建上海环境。如选择广州环境，需要在 twikoo.init() 时额外指定环境 region: “ap-guangzhou”\n 3.进入环境-登录授权，启用“匿名登录”\n4.进入环境-安全配置，将博客网址添加到“WEB安全域名”\n5.进入环境-HTTP访问服务，复制链接备用。\n进入云函数，修改自定义serverkey bber 并保存备用。\n6.进入云函数，修改自定义serverkey bber 并保存备用。\n7.扫码进入公众号，输入命名绑定。\n bibi-0 \n/bber 你刚刚设置的key,https://你的云函数HTTP访问地址/bber 比如: /bber mykey,https://balabala.ap-shanghai.app.tcloudbase.com/bber 8. 手动添加一条哔哔 必须要有\n进入腾讯云数据库-\u0026gt;talks-\u0026gt;文档列表-\u0026gt;添加文档\n字段: content 类型: string 值: 随便 点击确定\n验证微信发送\n9.微信发送一条文字，返回哔哔成功，talks文档列表里多出来一条，即为服务部署成功。\n前端部署 1.打开Hugo的unsafe\nmarkup:tableOfContents:endLevel:4ordered:truestartLevel:2highlight:noClasses:falsegoldmark:renderer:unsafe:true2.新建一个markdown文件\n\u0026lt;div id=\u0026#39;speak\u0026#39;\u0026gt;\u0026lt;/speak\u0026gt; \u0026lt;!-- 使用markdown渲染 --\u0026gt; \u0026lt;!-- 使用markdown渲染 --\u0026gt; \u0026lt;!-- \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;https://cdn.jsdelivr.net/npm/ispeak-bber/ispeak-bber-md.min.js\u0026#34; charset=\u0026#34;utf-8\u0026#34; \u0026gt;\u0026lt;/script\u0026gt; --\u0026gt; \u0026lt;!-- 不使用markdown渲染 --\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;https://cdn.jsdelivr.net/npm/ispeak-bber/ispeak-bber.min.js\u0026#34; charset=\u0026#34;utf-8\u0026#34; \u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- 解析微信表情（参考：https://github.com/buddys/qq-wechat-emotion-parser） --\u0026gt; \u0026lt;!-- \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/gh/buddys/qq-wechat-emotion-parser@master/dist/qq-wechat-emotion-parser.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; --\u0026gt; \u0026lt;script\u0026gt; ispeakBber .init({ el: \u0026#39;#speak\u0026#39;, // 容器选择器  name: \u0026#39;bore\u0026#39;, // 显示的昵称  envId: \u0026#39;腾讯云开发环境id\u0026#39;, // 环境id  region: \u0026#39;ap-shanghai\u0026#39;, // 腾讯云地址，默认为上海  limit: 10, // 每次加载的条数，默认为5  avatar: \u0026#39;https://cdn.jsdelivr.net/gh/iwyang/pic/avatar.jpg\u0026#39;, fromColor:\u0026#39;rgb(245, 150, 170)\u0026#39;, // 下方标签背景颜色 默认 rgb(245, 150, 170)  loadingImg: \u0026#39;https://7.dusays.com/2021/03/04/d2d5e983e2961.gif\u0026#39;, // 自定义loading的图片，示例值为默认值  dbName:\u0026#39;talks\u0026#39; // 数据的名称，默认talks，避免有人的命名不是这个，所以加入此配置字段。  }) .then(function() { // 哔哔加载完成后的回调函数，你可以写你自己的功能  console.log(\u0026#39;哔哔 加载完成\u0026#39;) }) \u0026lt;/script\u0026gt; 部署BBer-weixin公众号 点击部署到云开发将 BBer-weixin 微信公众号后端，一键部署到云开发。\n对接的微信公众号简要流程：\n1.点击 bber-weixin 云函数，右上角**【编辑】，开启【固定IP】，留存公网固定IP**。\n 我将from 微信公众号改成了💎 WeChat\n 2.进入环境-HTTP访问服务，获取触发路径链接并留存，如以下格式：\nhttps://bb-f5c0f-222222.ap-shanghai.app.tcloudbase.com/bber-weixin 3.打开 微信公众平台，进入开发-基本配置，获取AppID和AppSecret留存，修改IP白名单为上一步的公网固定IP。继续服务器配置：\n 消息加密方式选择兼容模式\n 一个URL，即第2步留存的触发链接；\n一个Token，预设为 weixin\n!!!先不点，不点，不点，不点提交！！！\n4.回 bber-weixin 云函数，填入微信公众号appid、微信公众号appsecret 保存。\nconst token = \u0026#39;weixin\u0026#39; // 微信公众号的服务器验证用的令牌 token //填入自己的微信公众号appid和appsecret var wxappid = \u0026#39;微信公众号appid\u0026#39;, wxappsecret = \u0026#39;微信公众号appsecret\u0026#39;, 5.回 微信公众平台，提交，验证成功！\n6.回 bber-weixin 云函数，注释第44行代码，保存。\nif(tmpStr == signature){ //请求来源鉴权 //成功后注释下行代码 //return event.queryStringParameters.echostr //成功后注释本行代码 //成功后注释上行代码 7.手动配置或更新代码： https://github.com/lmm214/bber-weixin/tree/main/bber-weixin\n公众号发布说说 接上面，部署好自己的公众号就可以用公众号发布了。这里注意利用公众号发图片。\n1.先在公众号发一张图片\n2.接着输入/a \u0026lt;br\u0026gt;文字说明\n(输入\u0026lt;br\u0026gt;是为了使图片和文字不处于同一行)\n注意：用公众号发图片会一连发几张，不知道是什么原因，以后就用浏览器插件发图片，注意比例 16:9，长度568px\nChrome + Edge 发布说说 安装本地插件 点此下载我提取并修改的浏览器插件包\nChrome 安装本地插件：\n访问 Chrome——更多工具——扩展程序——左上角“加载已解压的扩展程序”，选择我提供的附件，解压缩后的文件夹 1.0.0_0_Chrome，然后回到 Chrome，点开右上角扩展程序来固定插件。\n注意：插件文件移动或丢失后，浏览器扩展失效，因为不是云端的，所以要保存在可靠路径。\n应用商店安装插件 下载地址：iSpeak-bber时光机\n本地插件from默认为🌈 Chrome\nAndroid 捷径发布说说 从 Github 下载安装这款 “HTTP 快捷方式” apk，安装后继续下文操作。\n下载地址：HTTP-Shortcuts\n打开 HTTP 快捷方式 App，选择新建快捷方式，自定义名称、描述，在 “基本设置” 中，设置方法为 “POST” 或 “GET”，URL 为\nhttps://你后台显示的.ap-shanghai.app.tcloudbase.com/bber?key= 至于 key、from，我们设置为常量，text 则设置为变量 content，每次发布的时候填写说说内容。\n点击 URL 右侧的 {}，选择添加变量。常量 key 为你云函数里的 key，如果没有特别设置就是 bber。from 我们设置一个好玩的如📱 Android 11。添加一个变量 content。（个人觉得from直接设置为Android就行，不然免得以后安卓升级版本，还要跟着修改。）\n接着回到 URL 页面，补充完刚才添加的常量和变量，如以下格式：\nhttps://你后台显示的.ap-shanghai.app.tcloudbase.com/bber?key={key}\u0026amp;from={from}\u0026amp;text={content} 右上角，保存这个快捷方式，然后长按发送到桌面，搞定！\n修改ispeak-bber样式 隐藏页面标题 将以下代码放在文章正文最上方。\n\u0026lt;style\u0026gt; .article-header { display: none; } \u0026lt;/style\u0026gt; 修改顶部文字 自己胡乱改的，居然起了作用。不管了先用再说。\n1.首先下载：ispeak-bber-md.min.js\n2.用Notepad++打开，搜索My BiBi改成我的说说。\n3.按F12，打开浏览器控制台，定位标题。可以发现color: #49b1f5前面就是标题字体大小，搜索color: #49b1f5，将前面的字体改成22px：font-size: 22px\n4.接着改图标大小，一样方法定位图标，可以发现color: black后面就是图标大小，搜索color: black，将后面图标大小改成22px：font-size: 22px\n修复说说出现图片时，顶部空白过大问题 搜索white-space作如下修改\n- {\\n padding: 10px 0;\\n white-space: pre-wrap;\\n} + {\\n padding: 0.8rem 0;\\n} 注意：利用微信公众号发图片后追加文字说明，前面要加个换行符，要不然图片和文字处在同一行。\n注意：用公众号发图片会一连发几张，不知道是什么原因，以后就用浏览器插件发图片，注意比例 16:9，长度568px\n解决公众号连续发多张图片 云函数代码问题，改成下面这样即可（还未测试）：\n104行 let res = await cloudRequest(cloudHttpUrl,cloudKey,createTime,content) 124行 let res = await cloudRequest(cloudHttpUrl,cloudKey,createTime,content) 160行 function cloudRequest(cloudHttpUrl,cloudKey,createTime,content){ 中，删掉 “createTime,”，接着\n162行 var param1 = {\u0026#39;key\u0026#39;: cloudKey,\u0026#39;time\u0026#39;: createTime,\u0026#39;text\u0026#39;: content,\u0026#39;from\u0026#39;:\u0026#39;微信公众号\u0026#39;} 删掉 “’time’: createTime,” 就解决了。\n参考链接 「哔哔点啥」微信公众号 2.0\n熟悉的味道，不一样配方\n手把手教你配置哔哔点啥\nAndroid “捷径”・木木 bber 踩坑记录 + 电脑 or 手机 4 种方式直发说说\n给 bber 换个皮肤\nHexo-Butterfly说说朋友圈适配（哔哔 for 腾讯云）自用\n继续折腾Hugo—看评论\nispeak-bber\n","date":"2021-08-17T13:45:30+08:00","permalink":"/archives/hugo-bber/","title":"hugo配置哔哔点啥"},{"content":"首先确保gitee账户已绑定邮箱，并且要关注gitee公众号，并绑定了自己的账号。\n安装GIt 本地需要安装 Git ，安装过程略。安装完git后还要配置环境变量： 右键我的电脑 –\u0026gt; 属性，然后点击高级系统设置 –\u0026gt; 环境变量 –\u0026gt; 选择用户变量或系统变量中的Path,点击编辑；找到Git安装目录,添加以下地址:\nD:\\Program Files\\Git\\bin D:\\Program Files\\Git\\mingw64\\libexec\\git-core D:\\Program Files\\Git\\mingw64\\bin 生成SSH 公钥 Windows 上安装 Git for Windows 之后在开始菜单里打开 Git Bash 输入：\ngit config --global user.name \u0026#34;你的用户名\u0026#34; git config --global user.email \u0026#34;你的电子邮箱\u0026#34; cd ~ mkdir .ssh cd .ssh ssh-keygen -t rsa 这样就在系统当前用户文件夹下生成了私钥 id_rsa 和公钥 id_rsa.pub。\n配置SSH 公钥  在 GitHub 项目的「Settings -\u0026gt; Secrets」路径下配置好命名为 GITEE_RSA_PRIVATE_KEY 和 GITEE_PASSWORD 的两个密钥。其中：GITEE_RSA_PRIVATE_KEY 存放 id_rsa 私钥；GITEE_PASSWORD 存放 Gitee 帐号的密码 在 GitHub 的个人设置页面「Settings -\u0026gt; SSH and GPG keys」 配置 SSH 公钥（即：id_rsa.pub），命名随意 在 Gitee 的个人设置页面「安全设置 -\u0026gt; SSH 公钥」 配置 SSH 公钥（即：id_rsa.pub），命名随意  配置GitHub Actions 新建文件.github/workflows/Sync to Gitee.yml\nname:Sync to Giteeon:push:branches:developjobs:build:runs-on:ubuntu-lateststeps:- name:Sync to Giteeuses:wearerequired/git-mirror-action@masterenv:# 注意在 Settings-\u0026gt;Secrets 配置 GITEE_RSA_PRIVATE_KEYSSH_PRIVATE_KEY:${{ secrets.GITEE_RSA_PRIVATE_KEY }}with:# 注意替换为你的 GitHub 源仓库地址source-repo:git@github.com:iwyang/iwyang.github.io.git# 注意替换为你的 Gitee 目标仓库地址destination-repo:git@gitee.com:iwyang/iwyang.git- name:Build Gitee Pagesuses:yanglbme/gitee-pages-action@mainwith:# 注意替换为你的 Gitee 用户名gitee-username:iwyang# 注意在 Settings-\u0026gt;Secrets 配置 GITEE_PASSWORDgitee-password:${{ secrets.GITEE_PASSWORD }}# 注意替换为你的 Gitee 仓库，仓库名严格区分大小写，请准确填写，否则会出错gitee-repo:iwyang/iwyang# 要部署的分支，默认是 master，若是其他分支，则需要指定（指定的分支必须存在）branch:master参考链接 使用 github actions 将 github 项目自动同步到 gitee 并自动部署 Gitee Pages\n","date":"2021-08-17T12:06:13+08:00","permalink":"/archives/github-actions-sync-to-gitee/","title":"利用github Actions自动同步项目到gitee并自动部署Gitee Pages"},{"content":"部署hugo到服务器，网上一般方法是利用git hook。这里记录一种新的方法：利用FTP Deploy GitHub Actions自动部署hugo到Centos8服务器。今后只要提交源码到github仓库，剩下的事就交给GitHub Actions了。\n本地操作 参考：hugo部署到coding\u0026amp;gitee\u0026amp;备份源码-本地操作\n服务器操作 安装 Nginx 准备工作：如果服务器端口不是22，先要更改SSH端口：\nvi /etc/ssh/sshd_config port 22 然后重启生效。\n首先，在服务器上安装nginx。\nyum update -y yum install nginx -y 如果是centos 7，先要安装安装epel：yum install epel-release，才能安装nginx。\n启动 Nginx Nginx 安装完成后需要手动启动，启动Nginx并设置开机自启：\nsystemctl start nginx systemctl enable nginx 关闭防火墙：\nsystemctl stop firewalld.service systemctl disable firewalld.service 配置完成后，访问使用浏览器服务器 ip ，如果能看到以下界面，表示运行成功。\n创建新的网站目录 为了图方便，可以直接将网站目录改为FTP家目录。\nNginx 默认把网页文件存在 /var/www/html 目录。为了方便期间，我们在 /var/www/ 目录下为每个站点创建一个文件夹。\nsudo mkdir -p /var/www/blog sudo chown -R $USER:$USER /var/www/blog sudo chmod -R 755 /var/www 配置 nginx vi /etc/nginx/conf.d/blog.conf server { listen 80 ; listen [::]:80; root /var/www/blog; server_name bore.vip www.bore.vip; access_log /var/log/nginx/hexo_access.log; error_log /var/log/nginx/hexo_error.log; error_page 404 = /404.html; location ~* ^.+\\.(ico|gif|jpg|jpeg|png)$ { root /var/www/blog; access_log off; expires 1d; } location ~* ^.+\\.(css|js|txt|xml|swf|wav)$ { root /var/www/blog; access_log off; expires 10m; } location / { root /var/www/blog; if (-f $request_filename) { rewrite ^/(.*)$ /$1 break; } } location /nginx_status { stub_status on; access_log off; } } 重启 Nginx 服务器，使服务器设定生效：\nsudo systemctl restart nginx 配置ssl证书 这里记下怎样添加 Let’s Encrypt 免费证书。（貌似只有上传了文件到网站目录，才能申请证书成功。）如果想启用阿里证书，可查看：启用阿里免费证书\n安装Certbot yum install epel-release -y yum install certbot -y 然后执行：\ncertbot certonly --webroot -w /var/www/blog -d bore.vip -m 455343442@qq.com --agree-tos 配置Nginx vi /etc/nginx/conf.d/blog.conf server { listen 80; server_name bore.vip www.bore.vip; rewrite ^(.*)$ https://$server_name$1 permanent; } server { listen 443; root /var/www/blog; server_name bore.vip www.bore.vip; ssl on; ssl_certificate /etc/letsencrypt/live/bore.vip/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/bore.vip/privkey.pem; ssl_session_timeout 5m; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP; ssl_prefer_server_ciphers on; access_log /var/log/nginx/hexo_access.log; error_log /var/log/nginx/hexo_error.log; error_page 404 = /404.html; location ~* ^.+\\.(ico|gif|jpg|jpeg|png)$ { root /var/www/blog; access_log off; expires 1d; } location ~* ^.+\\.(css|js|txt|xml|swf|wav)$ { root /var/www/blog; access_log off; expires 10m; } location / { root /var/www/blog; if (-f $request_filename) { rewrite ^/(.*)$ /$1 break; } } location /nginx_status { stub_status on; access_log off; } } 重启Nginx生效：\nsystemctl restart nginx 证书自动更新 由于这个证书的时效只有 90 天，我们需要设置自动更新的功能，帮我们自动更新证书的时效。首先先在命令行模拟证书更新：\ncertbot renew --dry-run 模拟更新成功的效果如下(略)\n在无法确认你的 nginx 配置是否正确时，一定要运行模拟更新命令，确保certbot和服务器通讯正常。使用 crontab -e 的命令来启用自动任务，命令行：\ncrontab -e 添加配置：（每隔两个月凌晨2:30自动执行证书更新操作）后保存退出。\n30 2 * */2 * /usr/bin/certbot renew --quiet \u0026amp;\u0026amp; /bin/systemctl restart nginx 查看证书有效期的命令：\nopenssl x509 -noout -dates -in /etc/letsencrypt/live/bore.vip/cert.pem 安装vsftpd sudo yum install vsftpd -y 安装软件包后，启动vsftpd，并使其能够在引导时自动启动：\nsudo systemctl start vsftpd sudo systemctl enable vsftpd 配置vsftpd vi /etc/vsftpd/vsftpd.conf 在userlist_enable=YES下面，加上：\nuserlist_file=/etc/vsftpd/user_list userlist_deny=NO 创建FTP用户 创建一个新用户，名为admin:\nsudo adduser admin sudo passwd admin 将用户添加到允许的FTP用户列表中：\necho \u0026#34;admin\u0026#34; | sudo tee -a /etc/vsftpd/user_list 设置正确的权限（使ftp用户可以上传网站文件到相应目录）：\nsudo chmod 755 /var/www/blog sudo chown -R admin: /var/www/blog 关闭防火墙 systemctl stop firewalld.service systemctl disable firewalld.service 重启vsftpd服务 保存文件并重新启动vsftpd服务，以使更改生效：\nsudo systemctl restart vsftpd 更多有关ftp部分可查看：centos8搭建ftp服务器\nGithub操作 配置FTP_MIRROR_PASSWORD 点击博客仓库的Settings-\u0026gt;Secrets-\u0026gt;Add a new secret，Name填写FTP_MIRROR_PASSWORD，Value填写用户密码。\n配置 Github actions 在博客根目录新建.github/workflows/gh_pages.yml文件。代码如下：\nname: GitHub Page Deploy on: push: branches: - develop jobs: build-deploy: runs-on: ubuntu-latest steps: - name: Checkout master uses: actions/checkout@v2.3.4 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2.5.0 with: hugo-version: \u0026#39;latest\u0026#39; extended: true - name: Build Hugo run: hugo --minify - name: Deploy Hugo to gh-pages uses: peaceiris/actions-gh-pages@v3.8.0 with: github_token: ${{ secrets.GITHUB_TOKEN }} PUBLISH_BRANCH: master PUBLISH_DIR: ./public # cname: - name: Deploy Hugo to Server uses: SamKirkland/FTP-Deploy-Action@4.2.0 with: server: 104.224.191.88 username: admin password: ${{ secrets.FTP_MIRROR_PASSWORD }} local-dir: ./public/ server-dir: /var/www/blog/ 提交源码 初始化git，新建并切换到develop分支，将源码提交到develop分支。稍等片刻，github action会自动部署blog到master分支和服务器。\ngit init git checkout -b develop git remote add origin git@github.com:iwyang/iwyang.github.io.git git add . git commit -m \u0026#34;备份源码\u0026#34; git push --force origin develop 最终部署脚本：\n#!/bin/bash  echo -e \u0026#34;\\033[0;32mDeploying updates to gitee...\\033[0m\u0026#34; # backup git config --global core.autocrlf false git add . git commit -m \u0026#34;site backup\u0026#34; git push origin develop --force 克隆源码到本地 git clone -b develop git@github.com:iwyang/iwyang.github.io.git blog --recursive 因为使用Submodule管理主题，所以最后要加上 --recursive，因为使用 git clone 命令默认不会拉取项目中的子模块，你会发现主题文件是空的。（另外一种方法：git submodule init \u0026amp;\u0026amp; git submodule update）\n同步更新源文件 git pull 同步主题文件 git submodule update --remote 运行此命令后， Git 将会自动进入子模块然后抓取并更新，更新后重新提交一遍，子模块新的跟踪信息便也会记录到仓库中。这样就保证仓库主题是最新的。\ngithub、gitee、服务器三线部署hexo 将hexo三线部署（由于部署hexo较慢，如果单独为gitee建立一个workflows，gitee会先部署完成，这样无法同步；hugo可以单独为gitee建立一个workflows，因为hugo部署到服务器会先于部署到gitee）：\nname:Hexo Deploy# 只监听 source 分支的改动on:push:branches:- develop# 自定义环境变量env:POST_ASSET_IMAGE_CDN:truejobs:build-and-deploy:runs-on:ubuntu-lateststeps:# 获取博客源码和主题- name:Checkoutuses:actions/checkout@v2.3.4- name:Checkout theme repouses:actions/checkout@v2.3.4with:repository:jerryc127/hexo-theme-butterflyref:masterpath:themes/butterfly# 这里用的是 Node.js 14.x- name:Set up Node.jsuses:actions/setup-node@v2with:node-version:\u0026#39;14\u0026#39;# 设置 yarn 缓存，npm 的话可以看 actions/cache@v2 的文档示例- name:Get yarn cache directory pathid:yarn-cache-dir-pathrun:echo \u0026#34;::set-output name=dir::$(yarn cache dir)\u0026#34;- name:Use yarn cacheuses:actions/cache@v2.1.6id:yarn-cachewith:path:${{ steps.yarn-cache-dir-path.outputs.dir }}key:${{ runner.os }}-yarn-${{ hashFiles(\u0026#39;**/yarn.lock\u0026#39;) }}restore-keys:|${{ runner.os }}-yarn-# 安装依赖- name:Install dependenciesrun:|yarn install --prefer-offline --frozen-lockfile# 从之前设置的 secret 获取部署私钥- name:Set up environmentenv:DEPLOY_KEY:${{ secrets.DEPLOY_KEY }}run:|sudo timedatectl set-timezone \u0026#34;Asia/Shanghai\u0026#34; mkdir -p ~/.ssh echo \u0026#34;$DEPLOY_KEY\u0026#34; \u0026gt; ~/.ssh/id_rsa chmod 600 ~/.ssh/id_rsa ssh-keyscan github.com \u0026gt;\u0026gt; ~/.ssh/known_hosts# 生成并部署- name:Deployrun:|npx hexo deploy --generate - name:Deploy Hexo to Serveruses:SamKirkland/FTP-Deploy-Action@4.1.0with:server:104.224.191.88username:adminpassword:${{ secrets.FTP_MIRROR_PASSWORD }}local-dir:./public/server-dir:/var/www/blog/- name:Sync to Giteeuses:wearerequired/git-mirror-action@masterenv:# 注意在 Settings-\u0026gt;Secrets 配置 GITEE_RSA_PRIVATE_KEYSSH_PRIVATE_KEY:${{ secrets.GITEE_RSA_PRIVATE_KEY }}with:# 注意替换为你的 GitHub 源仓库地址source-repo:git@github.com:iwyang/iwyang.github.io.git# 注意替换为你的 Gitee 目标仓库地址destination-repo:git@gitee.com:iwyang/iwyang.git- name:Build Gitee Pagesuses:yanglbme/gitee-pages-action@mainwith:# 注意替换为你的 Gitee 用户名gitee-username:iwyang# 注意在 Settings-\u0026gt;Secrets 配置 GITEE_PASSWORDgitee-password:${{ secrets.GITEE_PASSWORD }}# 注意替换为你的 Gitee 仓库，仓库名严格区分大小写，请准确填写，否则会出错gitee-repo:iwyang/iwyang# 要部署的分支，默认是 master，若是其他分支，则需要指定（指定的分支必须存在）branch:mastergithub、gitee、服务器三线部署hugo 由于部署到github和服务器先于gitee，所有可以建立两个workflows。\n 根目录新建.github/workflows/deploy.yml（用于部署到github和服务器）  name: GitHub Page Deploy on: push: branches: - develop jobs: build-deploy: runs-on: ubuntu-latest steps: - name: Checkout master uses: actions/checkout@v2.3.4 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2.5.0 with: hugo-version: \u0026#39;latest\u0026#39; extended: true - name: Build Hugo run: hugo --minify - name: Deploy Hugo to gh-pages uses: peaceiris/actions-gh-pages@v3.8.0 with: github_token: ${{ secrets.GITHUB_TOKEN }} PUBLISH_BRANCH: master PUBLISH_DIR: ./public # cname: - name: Deploy Hugo to Server uses: SamKirkland/FTP-Deploy-Action@4.1.0 with: server: 104.224.191.88 username: admin password: ${{ secrets.FTP_MIRROR_PASSWORD }} local-dir: ./public/ server-dir: /var/www/blog/ 根目录新建.github/workflows/Sync to Gitee.yml（用于部署到gitee）  name:Sync to Giteeon:push:branches:developjobs:build:runs-on:ubuntu-lateststeps:- name:Sync to Giteeuses:wearerequired/git-mirror-action@masterenv:# 注意在 Settings-\u0026gt;Secrets 配置 GITEE_RSA_PRIVATE_KEYSSH_PRIVATE_KEY:${{ secrets.GITEE_RSA_PRIVATE_KEY }}with:# 注意替换为你的 GitHub 源仓库地址source-repo:git@github.com:iwyang/iwyang.github.io.git# 注意替换为你的 Gitee 目标仓库地址destination-repo:git@gitee.com:iwyang/iwyang.git- name:Build Gitee Pagesuses:yanglbme/gitee-pages-action@mainwith:# 注意替换为你的 Gitee 用户名gitee-username:iwyang# 注意在 Settings-\u0026gt;Secrets 配置 GITEE_PASSWORDgitee-password:${{ secrets.GITEE_PASSWORD }}# 注意替换为你的 Gitee 仓库，仓库名严格区分大小写，请准确填写，否则会出错gitee-repo:iwyang/iwyang# 要部署的分支，默认是 master，若是其他分支，则需要指定（指定的分支必须存在）branch:master解决问题 1.Error: FTPError: 550 Remove directory operation failed\nrm -rf /var/www/blogsudo mkdir -p /var/www/blogsudo chown -R $USER:$USER /var/www/blogsudo chmod -R 755 /var/wwwsudo chmod 755 /var/www/blogsudo chown -R admin:/var/www/blogsudo systemctl restart vsftpd参考链接 1.从 0 开始搭建 hexo 博客\n2.为博客添加 Let’s Encrypt 免费证书\n3.SamKirkland/FTP-Deploy-Action\n","date":"2021-08-15T16:39:34+08:00","permalink":"/archives/ftp-deploy-github-actions-hugo/","title":"GitHub Actions利用FTP自动部署hugo-hexo到Centos 8"},{"content":"最近一两天又在折腾主题，这回是Hugo-PaperMod主题，虽然还没打算换，但还是记录一下吧。\n基本操作 查看文档：PaperMod - Features\nconfig.yml配置 注意：如果把baseURL设置成\u0026quot;/\u0026quot;，页面顶部导航失效，如果要用顶部导航，就设置为baseURL: \u0026quot;https://bore.vip\u0026quot;\nbaseURL:\u0026#34;/\u0026#34;title:Bore\u0026#39;s Notespaginate:10theme:PaperModdefaultContentLanguage:zhpermalinks:posts:/archives/:slug/enableInlineShortcodes:trueenableRobotsTXT:truebuildDrafts:falsebuildFuture:falsebuildExpired:falseenableEmoji:true# googleAnalytics: UA-123-45minify:disableXML:trueminifyOutput:falsemenu:main:- identifier:homename:首页url:/weight:10- identifier:archivesname:归档url:/archives/weight:20- identifier:categoriesname:分类url:/categories/weight:30- identifier:tagsname:标签url:/tags/weight:40- identifier:aboutname:关于url:/about/weight:50- identifier:searchname:搜索url:/search/weight:60outputs:home:- HTML- RSS- JSONparams:env:production# to enable google analytics, opengraph, twitter-cards and schema.description:\u0026#34;本站主要用来收集整理资料、记录笔记，方便自己查询使用。\u0026#34;author:# author: [\u0026#34;Me\u0026#34;, \u0026#34;You\u0026#34;] # multiple authorsdefaultTheme:autodisableThemeToggle:falseDateFormat:\u0026#34;2006-01-02\u0026#34;ShowShareButtons:falseShowReadingTime:falsedisableSpecial1stPost:truedisplayFullLangName:trueShowPostNavLinks:trueShowBreadCrumbs:trueShowCodeCopyButtons:trueShowToc:truecomments:trueimages:[\u0026#34;papermod-cover.png\u0026#34;]mainSections:- postsprofileMode:enabled:falsetitle:PaperModimageUrl:\u0026#34;#\u0026#34;imageTitle:my image# imageWidth: 120# imageHeight: 120buttons:- name:Archivesurl:archives- name:Tagsurl:tags# homeInfoParams:# Title: \u0026#34;PaperMod\u0026#34;# Content: \u0026gt;# Welcome to demo of hugo\u0026#39;s theme PaperMod.# - **PaperMod** is a simple but fast and responsive theme with useful feature-set that enhances UX.# - Do give a 🌟 on Github !# - PaperMod is based on theme [Paper](https://github.com/nanxiaobei/hugo-paper).socialIcons:- name:githuburl:\u0026#34;https://github.com/adityatelange/hugo-PaperMod\u0026#34;- name:KoFiurl:\u0026#34;https://ko-fi.com/adityatelange\u0026#34;- name:RsSurl:\u0026#34;index.xml\u0026#34;editPost:URL:\u0026#34;https://github.com/iwyang/iwyang.github.io/tree/develop/content\u0026#34;Text:\u0026#34;Suggest Changes\u0026#34;# edit textappendFilePath:true# to append file path to Edit link# label:# text: \u0026#34;Home\u0026#34;# icon: icon.png# iconHeight: 35# analytics:# google:# SiteVerificationTag: \u0026#34;XYZabc\u0026#34;assets:favicon:\u0026#34;/images/favicon.png\u0026#34;favicon16x16:\u0026#34;/images/favicon.png\u0026#34;favicon32x32:\u0026#34;/images/favicon.png\u0026#34;apple_touch_icon:\u0026#34;/images/favicon.png\u0026#34;safari_pinned_tab:\u0026#34;/images/favicon.png\u0026#34;cover:hidden:true# hide everywhere but not in structured datahiddenInList:true# hide on list pages and homehiddenInSingle:true# hide on single pagefuseOpts:isCaseSensitive:falseshouldSort:truelocation:0distance:1000threshold:0.4minMatchCharLength:0keys:[\u0026#34;title\u0026#34;,\u0026#34;permalink\u0026#34;,\u0026#34;summary\u0026#34;,\u0026#34;content\u0026#34;]taxonomies:category:categoriestag:tagsseries:seriesmarkup:goldmark:renderer:unsafe:true# highlight:# # anchorLineNos: true# codeFences: true# guessSyntax: true# lineNos: true# # noClasses: false# style: monokaiprivacy:vimeo:disabled:falsesimple:truetwitter:disabled:falseenableDNT:truesimple:trueinstagram:disabled:falsesimple:trueyoutube:disabled:falseprivacyEnhanced:trueservices:instagram:disableInlineCSS:truetwitter:disableInlineCSS:truearchetypes默认模板 ---title:\u0026#34;My 1st post\u0026#34;date:2020-09-15T11:30:03+00:00# weight: 1# aliases: [\u0026#34;/first\u0026#34;]tags:[\u0026#34;first\u0026#34;]author:\u0026#34;Me\u0026#34;# author: [\u0026#34;Me\u0026#34;, \u0026#34;You\u0026#34;] # multiple authorsshowToc:trueTocOpen:falsedraft:falsehidemeta:falsecomments:falsedescription:\u0026#34;Desc Text.\u0026#34;canonicalURL:\u0026#34;https://canonical.url/to/page\u0026#34;disableHLJS:true# to disable highlightjsdisableShare:falsedisableHLJS:falsehideSummary:falsesearchHidden:trueShowReadingTime:trueShowBreadCrumbs:trueShowPostNavLinks:truecover:image:\u0026#34;\u0026lt;image path/url\u0026gt;\u0026#34;# image path/urlalt:\u0026#34;\u0026lt;alt text\u0026gt;\u0026#34;# alt textcaption:\u0026#34;\u0026lt;text\u0026gt;\u0026#34;# display caption under coverrelative:false# when using page bundles set this to truehidden:true# only hide on current single pageeditPost:URL:\u0026#34;https://github.com/\u0026lt;path_to_repo\u0026gt;/content\u0026#34;Text:\u0026#34;Suggest Changes\u0026#34;# edit textappendFilePath:true# to append file path to Edit link---自定义：\ntitle:\u0026#34;{{ replace .TranslationBaseName \u0026#34;-\u0026#34; \u0026#34;\u0026#34; | title }}\u0026#34;slug:\u0026#34;\u0026#34;description:\u0026#34;\u0026#34;date:{{.Date }}lastmod:{{.Date }}draft:falseshowToc:trueweight:falsecategories:[\u0026#34;\u0026#34;]tags:[\u0026#34;\u0026#34;]加入Waline评论系统 根目录新建layouts\\partials\\comments.html：\n\u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/@waline/client\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;div id=\u0026#34;waline\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; new Waline({ el: \u0026#39;#waline\u0026#39;, serverURL: \u0026#39;https://your-domain.vercel.app\u0026#39;, copyright: true, login: \u0026#39;enable\u0026#39;, placeholder: \u0026#39;欢迎评论\u0026#39;, dark: \u0026#39;.dark\u0026#39;, requiredMeta: [\u0026#39;nick\u0026#39;, \u0026#39;mail\u0026#39;], }); \u0026lt;/script\u0026gt; 网上别人配置：\n\u0026lt;!-- Waline --\u0026gt; {{- if .Site.Params.waline.enable -}} \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/@waline/client@{{ .Site.Params.waline.version }}/dist/Waline.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;div class=\u0026#34;pagination__title\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;pagination__title-h\u0026#34; \u0026gt;\u0026lt;span class=\u0026#34;vcount\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;精彩评论\u0026lt;/span \u0026gt; \u0026lt;hr /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;waline\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var locale = { admin: \u0026#34;Ṽerified\u0026#34;, // 博主标识 busy: \u0026#34;操作频繁，请稍候再试...\u0026#34;, cancel: \u0026#34;取消\u0026#34;, cancelReply: \u0026#34;取消回复\u0026#34;, comments: \u0026#34;评论\u0026#34;, confirm: \u0026#34;确认\u0026#34;, continue: \u0026#34;继续\u0026#34;, days: \u0026#34;天前\u0026#34;, emoji: \u0026#34;表情\u0026#34;, expand: \u0026#34;查看更多...\u0026#34;, hours: \u0026#34;小时前\u0026#34;, link: \u0026#34;网址\u0026#34;, login: \u0026#34;登录\u0026#34;, logout: \u0026#34;退出\u0026#34;, mail: \u0026#34;邮箱\u0026#34;, mailFail: \u0026#34;请填写正确的邮件地址\u0026#34;, minutes: \u0026#34;分钟前\u0026#34;, more: \u0026#34;加载更多...\u0026#34;, nick: \u0026#34;昵称\u0026#34;, nickFail: \u0026#34;昵称不能少于 3 个字符\u0026#34;, now: \u0026#34;刚刚\u0026#34;, placeholder: \u0026#34;·支持 匿名评论\\n·支持 Markdown\\n·支持 Twimoji\\n·支持 代码块语法高亮\\n·不收集 UserAgent\u0026#34;, // 评论框提示语 preview: \u0026#34;预览\u0026#34;, reply: \u0026#34;回复\u0026#34;, seconds: \u0026#34;秒前\u0026#34;, sofa: \u0026#34;来发评论吧～\u0026#34;, submit: \u0026#34;提交\u0026#34;, uploadDone: \u0026#34;传输完成！\u0026#34;, uploading: \u0026#34;正在传输...\u0026#34;, word: \u0026#34;字\u0026#34;, wordHint: \u0026#34;评论字数应在 $0 到 $1 字之间！\\n当前字数：$2\u0026#34;, \u0026#34;code-98\u0026#34;: \u0026#34;Waline 初始化失败，请检查 av-min.js 版本\u0026#34;, \u0026#34;code-99\u0026#34;: \u0026#34;Waline 初始化失败，请检查 init 中的`el`元素.\u0026#34;, \u0026#34;code-100\u0026#34;: \u0026#34;Waline 初始化失败，请检查你的 AppId 和 AppKey.\u0026#34;, \u0026#34;code-140\u0026#34;: \u0026#34;今日 API 调用总次数已超过开发版限制.\u0026#34;, \u0026#34;code-401\u0026#34;: \u0026#34;未经授权的操作，请检查你的 AppId 和 AppKey.\u0026#34;, \u0026#34;code-403\u0026#34;: \u0026#34;访问被 API 域名白名单拒绝，请检查你的安全域名设置.\u0026#34;, }; new Waline({ el: \u0026#34;#waline\u0026#34;, // 初始化 Waline 挂载器 avatarCDN: \u0026#34;https://sdn.geekzu.org/avatar/\u0026#34;, // 设置 Gravatar 头像 CDN 地址 copyright: true, // Waline 版权信息 dark: \u0026#34;auto\u0026#34;, // 适配暗黑模式 highlight: true, // 代码高亮 locale, // 自定义语言 i18n，请在上面 locale 中修改内容 requiredMeta: [\u0026#34;nick\u0026#34;, \u0026#34;mail\u0026#34;], // 必填项 serverURL: \u0026#34;https://tcb.eallion.com/waline\u0026#34;, // Waline 的服务端地址，末尾勿加 “/” visitor: true, // 开启访问量统计 wordLimit: 0, // 评论字数限制，0 为无限制 }); \u0026lt;/script\u0026gt; {{- end }} \u0026lt;!-- Twikoo --\u0026gt; {{- if .Site.Params.twikoo.enable -}} \u0026lt;div class=\u0026#34;pagination__title\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;pagination__title-h\u0026#34;\u0026gt;精彩评论\u0026lt;/span\u0026gt; \u0026lt;hr /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;tcomment\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/twikoo@{{ .Site.Params.twikoo.version }}/dist/twikoo.all.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- \u0026lt;script\u0026gt;window.TWIKOO_MAGIC_PATH=\u0026#34;共用评论区的名称\u0026#34;\u0026lt;/script\u0026gt; --\u0026gt; \u0026lt;script\u0026gt; twikoo.init({ envId: \u0026#34;eallion-8gkunp4re49bae66\u0026#34;, el: \u0026#34;#tcomment\u0026#34;, path: \u0026#39;window.TWIKOO_MAGIC_PATH||window.location.pathname\u0026#39;, onCommentLoaded: function () { $(\u0026#34;.tk-content img:not(.tk-avatar-img)\u0026#34;).each(function () { var _b = $(\u0026#34;\u0026lt;a\u0026gt;\u0026lt;/a\u0026gt;\u0026#34;).attr(\u0026#34;href\u0026#34;, this.src); $(this).wrap(_b); }) $(\u0026#34;.tk-content a[rel!=link]:has(img)\u0026#34;).slimbox(); } }); \u0026lt;/script\u0026gt; {{- end }} \u0026lt;!-- DisqusJS --\u0026gt; {{- if .Site.Params.disqus.enable -}} \u0026lt;div id=\u0026#34;disqus_thread\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; {{- if .Site.Params.disqus.proxy -}} \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/disqusjs@{{ .Site.Params.disqus.version }}/dist/disqus.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; var dsqjs = new DisqusJS({ shortname: \u0026#34;eallion\u0026#34;, siteName: \u0026#34;{{ .Site.Params.title }}\u0026#34;, identifier: \u0026#39;{{ if .Params.identifier }}{{ trim .Params.identifier \u0026#34;/\u0026#34; }}{{ else }}{{ trim .RelPermalink \u0026#34;/\u0026#34; }}{{ end }}\u0026#39;, url: \u0026#39;{{ if .Params.identifier }}\u0026#34;{{ trim .Site.BaseURL \u0026#34;/\u0026#34; }}{{ .Params.identifier }}\u0026#34;{{ else }}{{ .Permalink }}{{ end }}\u0026#39;, title: \u0026#34;{{ .Title }}\u0026#34;, api: \u0026#34;https://disqus.skk.moe/disqus/\u0026#34;, apikey: \u0026#34;fF9m3DwDSmNQ2g5DIpuWElDaQTx1ofpMSSW8JeKaB2loVBExeInmMbaEGeLs7lOL\u0026#34;, admin: \u0026#34;eallion\u0026#34;, adminLabel: \u0026#34;\u0026#34;, nocomment: \u0026#34;\u0026#34;, }); \u0026lt;/script\u0026gt; {{- else -}} {{- $script := printf ` \u0026lt;script defer src=\u0026#34;https://%s.disqus.com/embed.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; ` .Site.Params.comment.disqus.shortname -}} {{- end -}} \u0026lt;noscript\u0026gt; Please enable JavaScript to view the \u0026lt;a href=\u0026#34;https://disqus.com/?ref_noscript\u0026#34;\u0026gt;comments powered by Disqus.\u0026lt;/a\u0026gt; \u0026lt;/noscript\u0026gt; {{- end -}} \u0026lt;!-- Utterances --\u0026gt; {{- if .Site.Params.utterances.enable -}} \u0026lt;script src=\u0026#34;https://utteranc.es/client.js\u0026#34; repo=\u0026#34;eallion/blog\u0026#34; issueterm=\u0026#34;url\u0026#34; label=\u0026#34;Comments\u0026#34; theme=\u0026#34;github-light\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; async \u0026gt;\u0026lt;/script\u0026gt; {{- end -}} 更改分类、标签显示中文  content目录下新建categories\\_index.md:  ---title:\u0026#34;分类\u0026#34;---content目录下新建tags\\_index.md:  ---title:\u0026#34;标签\u0026#34;---posts目录下新建posts\\_index.md:  ---title:\u0026#34;文章\u0026#34;---参考链接  1.hugo-PaperMod 2.ĀKURAI\u0026rsquo;s 3.akuraito/blog  ","date":"2021-08-09T08:54:56+08:00","permalink":"/archives/hugo-papermod-theme/","title":"Hugo Papermod主题配置与使用"},{"content":"PS竖屏图片转横屏方法有多种，这里记录一下：\n方法一： 1.调整图片画布大小。\n2.选中图片空白区域， 单击右键选择填充-内容识别，勾选颜色识别，确定。\n3.利用仿制图章工具作最后的调整。\n方法二： 1.套索工具选择主体，单击右键选择存储选取，取消选区。\n2.编辑-内容识别缩放，保护选择刚才存储的选区，然后点亮人形图标。\n方法三： 裁剪时勾选内容识别。\n","date":"2021-08-08T11:42:17+08:00","permalink":"/archives/ps-change-shu-to-heng/","title":"PS竖屏图片转横屏"},{"content":"更换登记照底色的方法网上有多种，这里先记录一种，以PS2020为例。\n1.左侧工具栏选择选择工具，然后顶部工具栏先点击选择主体，然后选择选择并遮住，接着右侧属性工具栏勾选净化颜色，确定。\n2.新建一图层，调整背景色，按Ctrl+Delete填充颜色，最后将图片移至最上层。\n3.要更改背景色颜色，只需选择颜色图层，选择合适的颜色填充即可。\n参考:ps2020超快速更换证件照背景颜色的\n","date":"2021-08-06T09:38:02+08:00","permalink":"/archives/ps2020-change-pic-bg/","title":"Ps2020更换照片底色"},{"content":"创建 upptime 源  进入 upptime – GitHub ，点击 Use this template。 Create a new repository from upptime，注意勾选Include all branches。 进入源设置，下拉到 GitHub Pages 选项，确认 Source 已经设置为 gh-pages 分支。  设置 PAT  新建 Personal access token。   进入 GitHub 账户 Setttings – Developer settings – Personal access token，点击 Generate new token 新建 token，权限勾选 repo 和 workflow 完成后复制 token  进入源的设置页面，选择 Secrets，新建 Secret。   将名称设置为 GH_PAT 并填入 token，保存  配置并运行 upptime  配置 upptime   打开源根目录下的 .upptimerc.yml，编辑以下内容：  # Change these firstowner:iwyang# Your GitHub organization or username, where this repository lives(更改用户名)repo:check# The name of this repository（更改仓库名）sites:- name:Bore\u0026#39;s Notesurl:https://bore.vip- name:ConstOwnurl:https://blog.juanertu.com- name:01小丁的个人博客url:https://tding.top- name:Xu\u0026#39;s Blogurl:https://hasaik.com- name:02知行志url:https://baozi.fun- name:Takagiurl:https://lixingyong.com- name:03千与千寻url:https://www.chihiro.org.cn- name:Bill Yang\u0026#39;s Blogurl:https://blog.bill.moe- name:Sanarous\u0026#39;s Blogurl:https://bestzuo.cn- name:JACK小桔子的小屋url:https://jackxjz.top- name:04若只如初见url:https://joyli.net.cn- name:05大大的小蜗牛url:https://eallion.comstatus-website:# Add your custom domain name, or remove the `cname` line if you don\u0026#39;t have a domain# Uncomment the `baseUrl` line if you don\u0026#39;t have a custom domain and add your repo name there# cname: demo.upptime.js.org （如果没有自己的域名，则注释掉cname，取消注释baseUrl）baseUrl:/checklogoUrl:https://raw.githubusercontent.com/upptime/upptime.js.org/master/static/img/icon.svgname:UpptimeintroTitle:\u0026#34;**Upptime** is the open-source uptime monitor and status page, powered entirely by GitHub.\u0026#34;introMessage:This is a sample status page which uses **real-time** data from our [GitHub repository](https://github.com/upptime/upptime). No server required — just GitHub Actions, Issues, and Pages. [**Get your own for free**](https://github.com/upptime/upptime)navbar:- title:Statushref:/check # （修改Status的url为repo的名称）- title:GitHubhref:https://github.com/$OWNER/$REPO# Upptime also supports notifications, assigning issues, and more# See https://upptime.js.org/docs/configuration \n 编辑后 GItHub Actions 会自动更新 upptime 配置信息  如果 upptime 没有成功运行，可以手动执行 GitHub Actions 中的 Setup 工作流。  效果   https://iwyang.github.io/check\n  https://github.com/iwyang/check\n  参考链接   upptime – 利用 Github Actions 查看网站运行状态\n  upptime – GitHub\n  Getting started\n  ","date":"2021-08-02T08:05:13+08:00","permalink":"/archives/upptime-github-actions/","title":"upptime-利用Github-Actions检测网站运行状态"},{"content":"第一单元 混合运算 1.什么是脱式计算？脱式计算的格式？\n像5+6×5这样既有加法又有乘法两种运算的算式就是综合算式。在综合算式中为了准确表示先算什么，再算什么，要用到脱式计算。脱式计算的格式：等号写在数字前面，不算的部分注意一定要落下来。\n第二单元 观察物体 1.观察的位置是相对，观察的画面就是相反的。\n第三单元 加与减 1.连续减出两个数等于减出这两个数的和。\n第五单元 周长 1.把一个长方形平均分成两个形状相同、大小相等的小长方形，小长方形的周长是原来长方形周长的一半．（×）\n解析：如图：长方形平均分成两个小长方形后，周长比原来增加了两条原长方形的长或者是宽，所以小长方形的周长等于原来的长方形的周长的一半与一条长（或宽）的和，原题说法错误．  \n第七单元 年月日 判断某一年是平年还是闰年\n1.看年份后两位数能不能被4整除，能被4整除就是闰年，不能就是平年。\n2.整百年份看年份前两位数能否被4整除。\n","date":"2021-07-29T18:26:19+08:00","permalink":"/archives/three-grade-math-zong-jie/","title":"三年级数学上册知识点总结"},{"content":"又换主题了，这回使用的是hugo-theme-stack，无意发现这款主题，正合我意，够简单，最重要的是支持本地搜索，再不用弄哪个Alogia了。\n下载主题\u0026amp;更新主题  下载主题  git init git submodule add https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack 更新主题  git submodule update --remote 查看主题版本号 git show 查看当前版本 ---------------------------------------------------------------- git tag　列出所有版本号 git checkout　+某版本号　(你当前文件夹下的源码会变成这个版本号的源码) config.yaml配置文件 baseurl:/languageCode:zh-CNtheme:hugo-theme-stackpaginate:10title:Bore\u0026#39;s Notes# Change it to your Disqus shortname before using# disqusShortname: # GA Tracking IDgoogleAnalytics:# Theme i18n support# Available values: en, fr, id, ja, ko, pt-br, zh-cn, zh-tw, es, de, nl, it, th, el, ukDefaultContentLanguage:zh-cn# Set hasCJKLanguage to true if DefaultContentLanguage is in [zh-cn ja ko]# This will make .Summary and .WordCount behave correctly for CJK languages.hasCJKLanguage:truepermalinks:post:/archives/:slug/page:/:slug/# whether to use emoji codeenableEmoji:trueparams:mainSections:- postfeaturedImageField:imagerssFullContent:truefavicon:/img/favicon.pngfooter:since:2020customText:dateFormat:published:2006-01-02lastUpdated:2006-01-02sidebar:emoji:🍥subtitle:博观而约取，厚积而薄发avatar:enabled:falselocal:truesrc:img/avatar.jpgarticle:math:falsetoc:truereadingTime:falselicense:enabled:falsedefault:Licensed under CC BY-NC-SA 4.0edit:enabled:truecomments:enabled:trueprovider:walinedisqusjs:shortname:apiUrl:apiKey:admin:adminLabel:utterances:repo:issueTerm:titlelabel:utterancestheme:dark-orangeremark42:host:site:locale:vssue:platform:owner:repo:clientId:clientSecret:autoCreateIssue:false# Waline client configuration see: https://waline.js.org/en/reference/client.htmlwaline:serverURL:https://your-domain.vercel.applang:zh-CNvisitor:falseavatar:mpemoji:- https://cdn.jsdelivr.net/gh/walinejs/emojis/weiborequiredMeta:- nick- mailplaceholder:欢迎评论locale:admin:博主twikoo:envId:https://twikoo-lake.vercel.appregion:path:lang:giscus:repo:repoID:category:categoryID:mapping:lightTheme:darkTheme:reactionsEnabled:1emitMetadata:0gitalk:owner:admin:repo:clientID:clientSecret:cusdis:host:id:widgets:enabled:- search- categories- tag-cloud- archivesarchives:limit:10000tagCloud:limit:10000categoriesCloud:limit:10000opengraph:twitter:# Your Twitter usernamesite:# Available values: summary, summary_large_imagecard:summary_large_imagedefaultImage:opengraph:enabled:falselocal:falsesrc:colorScheme:# Display toggletoggle:true# Available values: auto, light, darkdefault:autoimageProcessing:cover:enabled:truecontent:enabled:true### Custom menu### See https://docs.stack.jimmycai.com/configuration/custom-menu.html### To remove about, archive and search page menu item, remove `menu` field from their FrontMattermenu:main:- identifier:homename:首页url:/weight:-100pre:homeparams:### For demonstration purpose, the home link will be open in a new tabnewTab:falseicon:home# social:# - identifier: github# name: GitHub# url: https://github.com/iwyang# params:# icon: brand-github# - identifier: twitter# name: Twitter# url: https://twitter.com# params:# icon: brand-twitterrelated:includeNewer:truethreshold:60toLower:falseindices:- name:tagsweight:100- name:categoriesweight:200markup:goldmark:renderer:## Set to true if you have HTML content inside Markdownunsafe:truetableOfContents:endLevel:4ordered:truestartLevel:2highlight:noClasses:falsearchetypes默认模板 title:\u0026#34;{{ replace .TranslationBaseName \u0026#34;-\u0026#34; \u0026#34;\u0026#34; | title }}\u0026#34;slug:\u0026#34;\u0026#34;description:\u0026#34;\u0026#34;date:{{.Date }}lastmod:{{.Date }}draft:falsetoc:trueweight:falseimage:\u0026#34;\u0026#34;categories:[\u0026#34;\u0026#34;]tags:[\u0026#34;\u0026#34;]显示右侧工具栏分类目录 参考 https://github.com/CaiJimmy/hugo-theme-stack/issues/169\n Create categories.html in layouts/partials/widget  \u0026lt;section class=\u0026#34;widget tagCloud\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;widget-icon\u0026#34;\u0026gt; {{ partial \u0026#34;helper/icon\u0026#34; \u0026#34;categories\u0026#34; }} \u0026lt;/div\u0026gt; \u0026lt;h2 class=\u0026#34;widget-title section-title\u0026#34;\u0026gt;{{ T \u0026#34;widget.categoriesCloud.title\u0026#34; }}\u0026lt;/h2\u0026gt; \u0026lt;div class=\u0026#34;tagCloud-tags\u0026#34;\u0026gt; {{ range first .Site.Params.widgets.categoriesCloud.limit .Site.Taxonomies.categories.ByCount }} \u0026lt;a href=\u0026#34;{{ .Page.RelPermalink }}\u0026#34; class=\u0026#34;font_size_{{ .Count }}\u0026#34;\u0026gt; {{ .Page.Title }} \u0026lt;/a\u0026gt; {{ end }} \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt; 修改 config.yaml  widgets:enabled:- categoriescategoriesCloud:limit:20网站根目录新建\\i18n\\zh-CN.yaml  widget:categoriesCloud:title:other:分类Download categories.svg paste to assets/icons, from here   注意：可以按需删除图标。\n 文章底部添加在 GitHub 上编辑此页  拷贝主题目录/layouts/partials/article/components/footer.html到网站根目录，修改为：  \u0026lt;footer class=\u0026#34;article-footer\u0026#34;\u0026gt; {{ partial \u0026#34;article/components/tags\u0026#34; . }} {{ if and (.Site.Params.article.license.enabled) (not (eq .Params.license false)) }} \u0026lt;section class=\u0026#34;article-copyright\u0026#34;\u0026gt; {{ partial \u0026#34;helper/icon\u0026#34; \u0026#34;copyright\u0026#34; }} \u0026lt;span\u0026gt;{{ default .Site.Params.article.license.default .Params.license | markdownify }}\u0026lt;/span\u0026gt; \u0026lt;/section\u0026gt; {{ end }} {{ if and (.Site.Params.article.edit.enabled) (not (eq .Params.edit false)) }} \u0026lt;section class=\u0026#34;article-edit\u0026#34;\u0026gt; {{ partial \u0026#34;helper/icon\u0026#34; \u0026#34;external-link\u0026#34; }} \u0026lt;span\u0026gt;\u0026lt;a style=\u0026#34;color: inherit;\u0026#34; href=\u0026#34;https://github.com/iwyang/iwyang.github.io/edit/develop/content/{{ replace .File.Path \u0026#34;\\\\\u0026#34; \u0026#34;/\u0026#34; }}\u0026#34; target=\u0026#34;_blank\u0026#34; rel=\u0026#34;noopener noreferrer\u0026#34;\u0026gt;在 GitHub 上编辑此页\u0026lt;/a\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/section\u0026gt; {{ end }} {{- if ne .Lastmod .Date -}} \u0026lt;section class=\u0026#34;article-lastmod\u0026#34;\u0026gt; {{ partial \u0026#34;helper/icon\u0026#34; \u0026#34;clock\u0026#34; }} \u0026lt;span\u0026gt; {{ T \u0026#34;article.lastUpdatedOn\u0026#34; }} {{ .Lastmod.Format ( or .Site.Params.dateFormat.lastUpdated \u0026#34;Jan 02, 2006 15:04 MST\u0026#34; ) }} \u0026lt;/span\u0026gt; \u0026lt;/section\u0026gt; {{- end -}} \u0026lt;/footer\u0026gt; 编辑config.yaml：  article:math:falsetoc:truereadingTime:truelicense:enabled:falsedefault:Licensed under CC BY-NC-SA 4.0edit:enabled:true以后只要在Frontmatter添加edit: false来关闭。\n拷贝external-link.svg图标到网站根目录/assets/icons下。图标地址：点击直达  添加友情链接 shortcodes   网站根目录新建文件layouts\\page\\links.html：\n{{ define \u0026#34;body-class\u0026#34; }}article-page keep-sidebar{{ end }} {{ define \u0026#34;main\u0026#34; }} {{ partial \u0026#34;article/article.html\u0026#34; . }} \u0026lt;div class=\u0026#34;article-list--compact links\u0026#34;\u0026gt; {{ $siteResources := resources }} {{ range $i, $link := $.Site.Data.links }} \u0026lt;article\u0026gt; \u0026lt;a href=\u0026#34;{{ $link.website }}\u0026#34; target=\u0026#34;_blank\u0026#34; rel=\u0026#34;noopener\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;article-details\u0026#34;\u0026gt; \u0026lt;h2 class=\u0026#34;article-title\u0026#34;\u0026gt; {{- $link.title -}} \u0026lt;/h2\u0026gt; \u0026lt;footer class=\u0026#34;article-time\u0026#34;\u0026gt; {{ with $link.description }} {{ . }} {{ else }} {{ $link.website }} {{ end }} \u0026lt;/footer\u0026gt; \u0026lt;/div\u0026gt; {{ if $link.image }} {{ $image := $siteResources.Get (delimit (slice \u0026#34;link-img/\u0026#34; $link.image) \u0026#34;\u0026#34;) | resources.Fingerprint \u0026#34;md5\u0026#34; }} {{ $imageResized := $image.Resize \u0026#34;120x120\u0026#34; }} \u0026lt;div class=\u0026#34;article-image\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;{{ $imageResized.RelPermalink }}\u0026#34; width=\u0026#34;{{ $imageResized.Width }}\u0026#34; height=\u0026#34;{{ $imageResized.Height }}\u0026#34; loading=\u0026#34;lazy\u0026#34; data-key=\u0026#34;links-{{ $link.website }}\u0026#34; data-hash=\u0026#34;{{ $image.Data.Integrity }}\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; {{ end }} \u0026lt;/a\u0026gt; \u0026lt;/article\u0026gt; {{ end }} \u0026lt;/div\u0026gt; {{ if or (not (isset .Params \u0026#34;comments\u0026#34;)) (eq .Params.comments \u0026#34;true\u0026#34;)}} {{ partial \u0026#34;comments/include\u0026#34; . }} {{ end }} {{ partialCached \u0026#34;footer/footer\u0026#34; . }} {{ partialCached \u0026#34;article/components/photoswipe\u0026#34; . }} {{ end }}   网站根目录新建文件\\layouts\\shortcodes\\link.html：\n{{$URL := .Get 0}} {{ with .Site.GetPage $URL }} \u0026lt;div class=\u0026#34;post-preview\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;post-preview--meta\u0026#34; style=\u0026#34;width:100%;\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;post-preview--middle\u0026#34;\u0026gt; \u0026lt;h4 class=\u0026#34;post-preview--title\u0026#34;\u0026gt; \u0026lt;a target=\u0026#34;_blank\u0026#34; href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt; \u0026lt;/h4\u0026gt; \u0026lt;time class=\u0026#34;post-preview--date\u0026#34;\u0026gt;{{ .Date.Format ( default \u0026#34;2006-01-02\u0026#34;) }}\u0026lt;/time\u0026gt; {{ if .Params.tags }} \u0026lt;small\u0026gt;{{ range .Params.tags }}#{{ . }}\u0026amp;nbsp;{{ end }}\u0026lt;/small\u0026gt; {{ end }} \u0026lt;section style=\u0026#34;max-height:105px;overflow:hidden;\u0026#34; class=\u0026#34;post-preview--excerpt\u0026#34;\u0026gt; {{ .Summary | plainify}} \u0026lt;/section\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {{ end }} 网站图像放在网站根目录\\assets\\link-img\\文件夹下。 网站根目录新建文件\\data\\links.json：  [ { \u0026#34;title\u0026#34;: \u0026#34;Upptime\u0026#34;, \u0026#34;website\u0026#34;: \u0026#34;https://iwyang.github.io/check\u0026#34;, \u0026#34;image\u0026#34;: \u0026#34;upptime.jpg\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;利用Github Actions查看网站运行状态。\u0026#34; }, { \u0026#34;title\u0026#34;: \u0026#34;ConstOwn\u0026#34;, \u0026#34;website\u0026#34;: \u0026#34;https://blog.juanertu.com\u0026#34;, \u0026#34;image\u0026#34;: \u0026#34;constown.jpg\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;能与你一起成长，我荣幸之至。\u0026#34; }, { \u0026#34;title\u0026#34;: \u0026#34;小丁的个人博客\u0026#34;, \u0026#34;website\u0026#34;: \u0026#34;https://tding.top\u0026#34;, \u0026#34;image\u0026#34;: \u0026#34;ding.jpg\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;世间所有的相遇，都是久别重逢。\u0026#34; }, { \u0026#34;title\u0026#34;: \u0026#34;Xu\u0026#39;s Blog\u0026#34;, \u0026#34;website\u0026#34;: \u0026#34;https://hasaik.com\u0026#34;, \u0026#34;image\u0026#34;: \u0026#34;xu.jpg\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;简单不先于复杂，而是在复杂之后。\u0026#34; }, { \u0026#34;title\u0026#34;: \u0026#34;知行志\u0026#34;, \u0026#34;website\u0026#34;: \u0026#34;https://baozi.fun\u0026#34;, \u0026#34;image\u0026#34;: \u0026#34;zhi.jpg\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Halo Theme Xue作者。\u0026#34; }, { \u0026#34;title\u0026#34;: \u0026#34;Takagi\u0026#34;, \u0026#34;website\u0026#34;: \u0026#34;https://lixingyong.com\u0026#34;, \u0026#34;image\u0026#34;: \u0026#34;takagi.jpg\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Takagi是啥呀？？当然是最喜欢的Takagi了吖ヾ(≧∇≦*)ゝ\u0026#34; }, { \u0026#34;title\u0026#34;: \u0026#34;千与千寻\u0026#34;, \u0026#34;website\u0026#34;: \u0026#34;https://www.chihiro.org.cn\u0026#34;, \u0026#34;image\u0026#34;: \u0026#34;qian.jpg\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;所以，看不到光，算是不幸吗？需要光才是真正的不幸吧。\u0026#34; }, { \u0026#34;title\u0026#34;: \u0026#34;Bill Yang\u0026#39;s Blog\u0026#34;, \u0026#34;website\u0026#34;: \u0026#34;https://blog.bill.moe\u0026#34;, \u0026#34;image\u0026#34;: \u0026#34;bill.jpg\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;这辈子都不可能更新的 。\u0026#34; }, { \u0026#34;title\u0026#34;: \u0026#34;Sanarous\u0026#39;s Blog\u0026#34;, \u0026#34;website\u0026#34;: \u0026#34;https://bestzuo.cn\u0026#34;, \u0026#34;image\u0026#34;: \u0026#34;sanarous.jpg\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Dream it possible, make it possible\u0026#34; }, { \u0026#34;title\u0026#34;: \u0026#34;JACK小桔子的小屋\u0026#34;, \u0026#34;website\u0026#34;: \u0026#34;https://jackxjz.top/\u0026#34;, \u0026#34;image\u0026#34;: \u0026#34;jack.jpg\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;一个分享科技/日常的网站。\u0026#34; }, { \u0026#34;title\u0026#34;: \u0026#34;若只如初见\u0026#34;, \u0026#34;website\u0026#34;: \u0026#34;https://joyli.net.cn/\u0026#34;, \u0026#34;image\u0026#34;: \u0026#34;ruo.jpg\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;世间所有的相遇，都是久别重逢。\u0026#34; }, { \u0026#34;title\u0026#34;: \u0026#34;大大的小蜗牛\u0026#34;, \u0026#34;website\u0026#34;: \u0026#34;https://eallion.com/\u0026#34;, \u0026#34;image\u0026#34;: \u0026#34;eallion.jpg\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;机会总是垂青于有准备的人。\u0026#34; } ]   添加音乐短代码 1.网站根目录新建文件layouts\\shortcodes\\music.html\n{{- $scratch := .Page.Scratch.Get \u0026#34;scratch\u0026#34; -}} \u0026lt;!-- require APlayer --\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\u0026#34;\u0026gt; \u0026lt;style type=\u0026#34;text/css\u0026#34;\u0026gt;.dark-theme .aplayer{background:#212121}.dark-theme .aplayer.aplayer-withlist .aplayer-info{border-bottom-color:#5c5c5c}.dark-theme .aplayer.aplayer-fixed .aplayer-list{border-color:#5c5c5c}.dark-theme .aplayer .aplayer-body{background-color:#212121}.dark-theme .aplayer .aplayer-info{border-top-color:#212121}.dark-theme .aplayer .aplayer-info .aplayer-music .aplayer-title{color:#fff}.dark-theme .aplayer .aplayer-info .aplayer-music .aplayer-author{color:#fff}.dark-theme .aplayer .aplayer-info .aplayer-controller .aplayer-time{color:#eee}.dark-theme .aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon path{fill:#eee}.dark-theme .aplayer .aplayer-list{background-color:#212121}.dark-theme .aplayer .aplayer-list::-webkit-scrollbar-thumb{background-color:#999}.dark-theme .aplayer .aplayer-list::-webkit-scrollbar-thumb:hover{background-color:#bbb}.dark-theme .aplayer .aplayer-list li{color:#fff;border-top-color:#666}.dark-theme .aplayer .aplayer-list li:hover{background:#4e4e4e}.dark-theme .aplayer .aplayer-list li.aplayer-list-light{background:#6c6c6c}.dark-theme .aplayer .aplayer-list li .aplayer-list-index{color:#ddd}.dark-theme .aplayer .aplayer-list li .aplayer-list-author{color:#ddd}.dark-theme .aplayer .aplayer-lrc{text-shadow:-1px -1px 0 #666}.dark-theme .aplayer .aplayer-lrc:before{background:-moz-linear-gradient(top, #212121 0%, rgba(33,33,33,0) 100%);background:-webkit-linear-gradient(top, #212121 0%, rgba(33,33,33,0) 100%);background:linear-gradient(to bottom, #212121 0%, rgba(33,33,33,0) 100%);filter:progid:DXImageTransform.Microsoft.gradient( startColorstr=\u0026#39;#212121\u0026#39;, endColorstr=\u0026#39;#00212121\u0026#39;,GradientType=0 )}.dark-theme .aplayer .aplayer-lrc:after{background:-moz-linear-gradient(top, rgba(33,33,33,0) 0%, rgba(33,33,33,0.8) 100%);background:-webkit-linear-gradient(top, rgba(33,33,33,0) 0%, rgba(33,33,33,0.8) 100%);background:linear-gradient(to bottom, rgba(33,33,33,0) 0%, rgba(33,33,33,0.8) 100%);filter:progid:DXImageTransform.Microsoft.gradient( startColorstr=\u0026#39;#00212121\u0026#39;, endColorstr=\u0026#39;#cc212121\u0026#39;,GradientType=0 )}.dark-theme .aplayer .aplayer-lrc p{color:#fff}.dark-theme .aplayer .aplayer-miniswitcher{background:#484848}.dark-theme .aplayer .aplayer-miniswitcher .aplayer-icon path{fill:#eee}\u0026lt;/style\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- require MetingJS --\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {{- if .IsNamedParams -}} {{- if .Get \u0026#34;url\u0026#34; -}} \u0026lt;meting-js url=\u0026#34;{{ .Get `url` }}\u0026#34; name=\u0026#34;{{ .Get `name` }}\u0026#34; artist=\u0026#34;{{ .Get `artist` }}\u0026#34; cover=\u0026#34;{{ .Get `cover` }}\u0026#34; theme=\u0026#34;{{ .Get `theme` | default `#2980b9` }}\u0026#34; {{- with .Get \u0026#34;fixed\u0026#34; }} fixed=\u0026#34;{{ . }}\u0026#34;{{ end -}} {{- with .Get \u0026#34;mini\u0026#34; }} mini=\u0026#34;{{ . }}\u0026#34;{{ end -}} {{- with .Get \u0026#34;autoplay\u0026#34; }} autoplay=\u0026#34;{{ . }}\u0026#34;{{ end -}} {{- with .Get \u0026#34;volume\u0026#34; }} volume=\u0026#34;{{ . }}\u0026#34;{{ end -}} {{- with .Get \u0026#34;mutex\u0026#34; }} mutex=\u0026#34;{{ . }}\u0026#34;{{ end -}} \u0026gt;\u0026lt;/meting-js\u0026gt; {{- else if .Get \u0026#34;auto\u0026#34; -}} \u0026lt;meting-js auto=\u0026#34;{{ .Get `auto` }}\u0026#34; theme=\u0026#34;{{ .Get `theme` | default `#2980b9` }}\u0026#34; {{- with .Get \u0026#34;fixed\u0026#34; }} fixed=\u0026#34;{{ . }}\u0026#34;{{ end -}} {{- with .Get \u0026#34;mini\u0026#34; }} mini=\u0026#34;{{ . }}\u0026#34;{{ end -}} {{- with .Get \u0026#34;autoplay\u0026#34; }} autoplay=\u0026#34;{{ . }}\u0026#34;{{ end -}} {{- with .Get \u0026#34;loop\u0026#34; }} loop=\u0026#34;{{ . }}\u0026#34;{{ end -}} {{- with .Get \u0026#34;order\u0026#34; }} order=\u0026#34;{{ . }}\u0026#34;{{ end -}} {{- with .Get \u0026#34;volume\u0026#34; }} volume=\u0026#34;{{ . }}\u0026#34;{{ end -}} {{- with .Get \u0026#34;mutex\u0026#34; }} mutex=\u0026#34;{{ . }}\u0026#34;{{ end -}} {{- with .Get \u0026#34;list-folded\u0026#34; }} list-folded=\u0026#34;{{ . }}\u0026#34;{{ end -}} {{- with .Get \u0026#34;list-max-height\u0026#34; }} list-max-height=\u0026#34;{{ . }}\u0026#34;{{ end -}} \u0026gt;\u0026lt;/meting-js\u0026gt; {{- else -}} \u0026lt;meting-js server=\u0026#34;{{ .Get `server` }}\u0026#34; type=\u0026#34;{{ .Get `type` }}\u0026#34; id=\u0026#34;{{ .Get `id` }}\u0026#34; theme=\u0026#34;{{ .Get `theme` | default `#2980b9` }}\u0026#34; {{- with .Get \u0026#34;fixed\u0026#34; }} fixed=\u0026#34;{{ . }}\u0026#34;{{ end -}} {{- with .Get \u0026#34;mini\u0026#34; }} mini=\u0026#34;{{ . }}\u0026#34;{{ end -}} {{- with .Get \u0026#34;autoplay\u0026#34; }} autoplay=\u0026#34;{{ . }}\u0026#34;{{ end -}} {{- with .Get \u0026#34;loop\u0026#34; }} loop=\u0026#34;{{ . }}\u0026#34;{{ end -}} {{- with .Get \u0026#34;order\u0026#34; }} order=\u0026#34;{{ . }}\u0026#34;{{ end -}} {{- with .Get \u0026#34;volume\u0026#34; }} volume=\u0026#34;{{ . }}\u0026#34;{{ end -}} {{- with .Get \u0026#34;mutex\u0026#34; }} mutex=\u0026#34;{{ . }}\u0026#34;{{ end -}} {{- with .Get \u0026#34;list-folded\u0026#34; }} list-folded=\u0026#34;{{ . }}\u0026#34;{{ end -}} {{- with .Get \u0026#34;list-max-height\u0026#34; }} list-max-height=\u0026#34;{{ . }}\u0026#34;{{ end -}} \u0026gt;\u0026lt;/meting-js\u0026gt; {{- end -}} {{- else if strings.HasSuffix (.Get 0) \u0026#34;http\u0026#34; -}} \u0026lt;meting-js auto=\u0026#34;{{ .Get 0 }}\u0026#34; theme=\u0026#34;#2980b9\u0026#34;\u0026gt;\u0026lt;/meting-js\u0026gt; {{- else -}} \u0026lt;meting-js server=\u0026#34;{{ .Get 0 }}\u0026#34; type=\u0026#34;{{ .Get 1 }}\u0026#34; id=\u0026#34;{{ .Get 2 }}\u0026#34; theme=\u0026#34;#2980b9\u0026#34;\u0026gt;\u0026lt;/meting-js\u0026gt; {{- end -}} {{- $scratch.Set \u0026#34;music\u0026#34; true -}} 2.添加歌曲列表（注意：去掉注释/* */）\n{{/* \u0026lt; music auto=\u0026#34;https://music.163.com/#/playlist?id=60198\u0026#34;\u0026gt; */}} 3.添加单曲（注意：去掉注释/* */）\n{{/* \u0026lt; music server=\u0026quot;netease\u0026quot; type=\u0026quot;song\u0026quot; id=\u0026quot;1868553\u0026quot; \u0026gt; */}}\r或者\r{{/* \u0026lt; music netease song 1868553 \u0026gt; */}}\r4.其它参数\nmusic shortcode 有一些可以应用于以上三种方式的其它命名参数:\n  autoplay [可选]\n是否自动播放音乐, 默认值是 false.\n  更改分类、标签、页面显示中文  content目录下新建categories\\_index.md:  ---title:\u0026#34;分类\u0026#34;---content目录下新建tags\\_index.md:  ---title:\u0026#34;标签\u0026#34;---根目录\\i18n\\zh-CN.yaml输入：  list:page:one:\u0026#34;{{ .Count }} 页面\u0026#34;other:\u0026#34;{{ .Count }} 页面\u0026#34;最终根目录\\i18n\\zh-CN.yaml\nlist:page:one:\u0026#34;{{ .Count }} 页面\u0026#34;other:\u0026#34;{{ .Count }} 页面\u0026#34;widget:categoriesCloud:title:other:分类附：使用Git Submodule管理Hugo主题  如果克隆库的时候要初始化子模块，请加上 --recursive 参数，如：  git clone -b develop git@github.com:iwyang/iwyang.github.io.git blog --recursive  如果已经克隆了主库但没初始化子模块，则用：  git submodule update --init --recursive  如果已经克隆并初始化子模块，而需要从子模块的源更新这个子模块，则：  git submodule update --recursive --remote 更新之后主库的 git 差异中会显示新的 SHA 码，把这个差异选中提交即可。\n  其他命令：在主仓库更新所有子模块：git submodule foreach git pull origin master  附：hugo注释 {{/* comment */}}参考链接  Hugo 主题 Stack文档 hugo主题stack - 银河小筑 树洞 Adding the widget tag-cloud for \u0026ldquo;categories\u0026rdquo;, on the right content region on Homepage vinceying/Vince-blog-https://i.vince.pub/ hugo音乐短代码 主题文档 - 扩展 Shortcodes-music Hugo模板的基本语法-注释  ","date":"2021-07-24T09:15:26+08:00","permalink":"/archives/hugo-theme-stack/","title":"Hugo Stack主题配置与使用"},{"content":"北师大三年级数学上册优质课，来源于一师一优课，基本上都是部级优课，点击前往bilibili可选集观看。\n\r\r","date":"2021-07-09T20:57:25+08:00","permalink":"/archives/three-grade-math-shang-you-ke/","title":"北师大三年级数学上册优质课"},{"content":"1.按住Alt键不放， 单击快捷工具栏里的工具， 可快速切换同一个菜单栏上的子工具。（如把横排文字切换成竖排）\n2.图层属性快捷键：中心点（A）、位移（P）、缩放（S）、旋转（R）、不透明度（T）、查看所有关键帧（U）、查看上一关键帧、下一关键帧（J/K）、\n3.快捷键（B、N）控制预览长度（控制出点入点）\n4.切割素材：Ctrl+Shift+D，裁剪素材：Alt+[/]，逐帧调节时间线：PgUp/PgDn\n5.按住Shift+大键盘数字键，标记帧。此后可以按数字键来切换帧。\n","date":"2021-06-06T10:02:25+08:00","permalink":"/archives/ae-tips/","title":"AE学习笔记"},{"content":"用pr做了一个电子相册，参考： 使用 Premiere 把照片变成唯美动画效果。\n\r\r","date":"2021-06-02T22:27:25+08:00","permalink":"/archives/pr-2021-spring-games/","title":"用pr制作《2021年春季运动会》电子相册"},{"content":"一、 教学目标：\n1．借助数线和计数器进一步探索并掌握三位数连续退位减法的计算方法，经历与他人交流计算方法的过程，理解多位数减法的计算道理，并能正确计算。\n2．让学生在解决问题的过程中，能独立地进行简单的、有条理的思考，体验数学与日常生活的密切联系，增强应用数学的意识。\n二、教学重点：掌握三位数减三位数连续退位减法的计算方法，初步形成一定的计算能力。\n三、教学难点：经历探索三位数减三位数退位减法计算方法的过程，提高学生在自主探究过程中，解决实际问题的能力。\n四、教学课时：1课时\n五、教学手段：\n六、教学过程：\n（一）创设情境，导入新课\n1.猜谜：大脑袋，长尾巴，儿时无腿水中游。\n后腿伸，前腿到，游来游去找妈妈。 （答案：小蝌蚪）\n2.你们听过“小蝌蚪找妈妈”的故事吗？那么你们猜一猜是不是所有的小蝌蚪都会变成青蛙？事实上在100只小蝌蚪中，只有20只能变成青蛙。所以希望大家今后遇到小蝌蚪，要爱护它。那么今天我们这节课就一起来学习有关小蝌蚪的成长中的数学知识。\n（二）自主探究，学习新知\n1.出示书上表格，提问：说一说你能从中得到那些数学信息。\n2.提问：从这些数学信息中，你能提出哪些数学问题。\n根据这些数学信息可以提出很多数学问题，今天我们就主要研究这两个数学问题：\n（1）东池塘有多少只蝌蚪没有变成青蛙？\n（2）西池塘有多少只蝌蚪没有变成青蛙？\n3．东池塘有多少只蝌蚪没有变成青蛙？\n（1）先独立列出算式；（412-89）\n（2）尝试用自己喜欢的方法获得计算结果；（412-89=323（只））\n（3）交流计算方法；（数线、拨计数器、竖式等）\n4.西池塘有多少只蝌蚪没有变成青蛙？\n（1）先独立列出算式；（514-126）\n（2）尝试用自己喜欢的方法获得计算结果；（514-126=388（只）\n（3）交流计算方法；（数线、拨计数器、竖式等）\n5.他们做得对吗？和同伴说一说。（左边的题是数位没有对齐，右边题是忘了退位）\n6..小结：竖式计算三位数连续退位减法时，要注意什么？（要注意相同数位对齐，从个位算起，哪一位不够减，要向前一位借1当10，计算前一位时不要忘记先减去被借走的1。）\n（三）巩固应用\n独立完成“练一练”的第1、2题。\n（四）回顾整理\n通过这节课的学习，你学到了什么？\n七、板书设计\n412-89=323（只） 514-126=298（只）\n \n","date":"2021-04-23T22:49:25+08:00","permalink":"/archives/ke-dou-cheng-zhang/","title":"二年级数学下册第五单元《小蝌蚪的成长》教学设计"},{"content":"这是本学期我第二次上公开课，本次公开课的课题是《小蝌蚪的成长》，这是一节计算教学课。首先我用猜谜语的方式来导入新课，吸引了学生的注意力，进而引导学生以后遇到小蝌蚪要保护它，树立了学生的环保意识。在探究三位数减三位数连续退位减法的计算方法时，我充分鼓励学生大胆表达自己的计算方法。在拨计数器这一块，为了解决传统计数器不能“借一当十”问题，我利用希沃白板的“克隆与拖拽”功能来形象地给学生演示了“借一当十”的过程及原理，帮助学生更好地理解算法。纵观本节公开课，我觉得存在以下问题：\n  在总结算法的过程中，应该多鼓励学生自己说，而不是自己一味去说。\n  课堂活动组织不好，其实我一直想给他们分几个小组，从而在课堂上多开展分小组活动，但这个一直没有实施起来。\n  时间没有把握好，在前面有些地方所花的时间过多，导致后面缺乏练习，这个以后要改进。\n  ","date":"2021-04-23T20:40:43+08:00","permalink":"/archives/ke-dou-cheng-zhang-fs/","title":"二年级数学下册第五单元《小蝌蚪的成长》教学反思"},{"content":"本次公开课课题是《铅笔有多长》，上课开始我带领学生复习了我们已经学习过的长度单位，以及如何用尺子测量物体的长度，使学生能够快速地进入学习状态。之后我设计了三个活动：认识分米；认识毫米；米、分米、厘米、毫米之间的关系来展开今天的新课学习。在课上我充分利用希沃电子白板，通过希沃视频展台让学生上来亲自演示测量铅笔的过程，增强了学生的动手操作能力。此外由于缺乏米尺等教具，我充分利用多媒体视频，向学生形象直观展示了米尺有关的知识以及如何用尺子测量硬币和银行卡的过程。纵观本次公开课主要存在以下问题：\n  练一练第2题，有学生测量结果是1厘米1毫米，而有学生测量结果是1厘米2毫米。我没有具体说明产生误差的原因。\n  课堂组织能力有些欠缺，有个别学生测量测量就玩起尺子了，我没有及时进行干预加以引导。\n  缺乏对后进生的关注，个别学生测量出现问题，没有能够及时加以指导。\n  ","date":"2021-03-31T19:07:16+08:00","permalink":"/archives/how-long-the-pen-is-fs/","title":"二年级数学下册第四单元《铅笔有多长》教学反思"},{"content":"一、 教学目标：\n1、通过测量铅笔的长度的活动知道1分米、1毫米有多长，发展学生空间观念和动手操作能力。\n2、通过“估一估”、“量一量”等活动，发展学生的估测能力。\n3、掌握米、分米、厘米和毫米之间的关系，能进行简单的单位换算。\n二、教学重点：认识1分米和1毫米有多长，掌握米、分米、厘米和毫米之间的关系，能进行简单的单位换算。\n三、教学难点：会用分米、毫米表示物体的长度\n四、教学课时：1课时\n五、教学手段：\n六、教学过程：\n（一）复习旧知\n1.我们已经学习了哪两个长度单位？\n2.怎样用尺子测量物体的长度吗？\n3.在括号里填上合适的单位\n（二）探究新知\n活动一：认识分米\n1、认识分米\n师：请同学们先估计一下，这支铅笔有多长？\n生：4cm、9cm、12cm \u0026hellip;\u0026hellip;\n师：那么这支笔到底有多长呢？我们怎样才能知道呢？\n生：用尺子量\n师：测量时，需要注意什么呢？\n生：不能把尺子斜着量；\n铅笔的一端和0刻度对齐，看另一端和刻度几对齐，就读作几厘米。\n师：真聪明，你手中绿色纸条的长度就是这支铅笔的长度，那同学们就赶快拿出尺量一量吧！\n生：10cm\n师：刚才我们量这支铅笔是10厘米，10厘米也可以用一个新的长度单位来表示，那就是1分米（板书），也就要说1分米=10厘米，分米用字母dm表示，也就是1dm=10cm（齐读）\n2、找出生活中1分米的物品\n一拃长约1分米；插座宽度约1分米；字典宽度约1分米\n活动二：认识毫米\n1、认识毫米\n师：估计这支铅笔的长度？（4cm、5cm、6cm）你手中红色纸条的长度正好是这支铅笔的长度，请同学们量一量它有多长？\n（生动手量）汇报：比6cm多2个小格。\n师：用厘米做单位量物体的长度有时不是整厘米数，因而得不到准确的结果，就需要一个比厘米还要小的单位“毫米”那么1毫米有多长，它与厘米之间有什么关系？\n2、厘米与毫米之间的关系\n（1）尺子上1厘米有10个小格\n（2）尺子上1个小格就是1毫米，毫米用字母mm表示。\n（3）1厘米=10毫米 1cm=10mm\n3、生活中哪些物体的厚度大约是1毫米？\n硬币、银行卡\n活动三：米、分米、厘米、毫米之间的关系\n1、在尺子上找出1mm、1cm、1dm，填一填，想一想。\n师：在尺子上找一找多少毫米是1厘米？多少厘米是1分米？多少分米是1米？\n2、想一想、填一填。\n师：让学生独立完成，再说是怎样想的？\n（三）练习巩固\n（四）课堂小结\n今天我们学习了两个新的长度单位，分别是—分米和毫米，希望在日常生活中能灵活应用它们。\n七、板书设计\n铅笔有多长\n1分米=10厘米\n1dm=10cm\n1厘米=10毫米\n1cm=1mm\n","date":"2021-03-30T11:03:25+08:00","permalink":"/archives/how-long-the-pen-is/","title":"二年级数学下册第四单元《铅笔有多长》教学设计"},{"content":"第一单元除法 除法竖式四步：一商、二乘、三减、四比。\n第二单元方向与位置 1.早晨上学，迎着太阳走，你的前面是东，后面是西，左边是北，右边是南。\n2.我们看到的红旗是迎风飘扬的，如果刮北风，红旗会向（南）面飘扬。\n解析：北风是从背面吹来的风，国旗应该是向风的反方向飘扬。\n3.旗杆的影子在西面，那么太阳在（东）面。\n解析：影子的方向总是和太阳的方向相反。\n4.树叶茂密的一面是南面,稀疏的一面是北面\n第三单元 生活中的大数 1.一箱苹果不到40个，5个5个地数还多3个，6个6个地数还多3个，这箱苹果有第三个？\n解析：\n方法1，5个5个数：8，13，18，23，28，33，38\n6个6个数：9，15，21，27，33，39\n方法2，先不考虑多的3个，刚好数完。即是5的倍数又是6的倍数 6×5=30，多3个：30+3=33（个）\n方法3，最小公倍数\n第六单元 认识图形 借助三角板画直角\n（1）先画一个点作为顶点。\n（2）再从顶点出发画一条直直的线。\n（3）使三角板上的直角顶点与这个点重合，一条直角边与这条直直的线重合，再从这个点出发沿三角板上的另一条直角边画一条直直的线。\n（4）最后标出直角符号。\n第七单元 时、分、秒 1.求经过多长时间\n方法一：借助钟面数格子\n方法二：画线段图分段计算\n方法三：结束时刻—开始时刻（竖式：如果“分钟”不够减，就要向“时”借，借1小时变成60分钟再减。）\n参考链接 易错题，5个为一组还余3个，6个为一组也余3个，共有几个苹果\n","date":"2021-03-27T21:12:25+08:00","permalink":"/archives/second-grade-xia-math-zong-jie/","title":"二年级数学下册知识点总结"},{"content":"希沃白板5  播放PPT时，如果PPT大小与屏幕不兼容，长按“设置”键可快速调整使其适应屏幕大小。 翻页按钮位于左右下角，点击数字预览。 桌面两侧悬浮按钮（快速调出白板、笔、半屏等） 手背、手心快速调出板擦。 选择几何图形后，双击屏幕可快速画出图形。出现红点是正方形（正方体）。 蒙层的使用（刮刮乐）   \n要实现以上效果，切记首先要画两个矩形，然后双击输入文字，将需要设置蒙层这一形状置于顶层。千万不要先输入两个文本框，这样无法形成遮挡效果。\n 二维码分享课件。\n  导入PPT按钮在“云课件”最低端，如果扩展名是.ppt仅以背景形式导入，所以.ppt格式要转化为.pptx再导入。\n  超链接可以快速调出授课工具、网盘存储常用的文件，超链接网页地址可以设为本地目录，超链接切换到公众号文章。\n  如果背景图片使文字显示不清，可添加一个白色圆角矩形的形状，将其置于底层，然后调整其透明度。\n  圆柱高矮的变化： 先画一个圆柱，再画一个能与圆柱底重合的椭圆，填充为白色，边框为黑色。再画一个填充和边框都是白色的长方形，接着将椭圆调整到合适位置后置顶层，最后将椭圆和长方形组合。\n  课堂活动（超级分类）隐藏文字：（1）文字透明度设置为100%（2）字号调为1\n  色差的应用：将文字颜色设置成背景相同的颜色，可起到“隐藏文字”的效果；拉到另外一色块即可呈现。（注意图层之间的顺序，色块应该置于底层）\n  希沃白板5的圆规可以自动生成半径，授课时只要拖拽出圆规，就可以给学生演示圆有无数条半径。\n  硬件相关  视频展台对比讲评。（要先拍照） 希沃智能笔：现将笔头USB接头插入白板USB接口，然后依次点击“希沃管家—智能笔—智能笔配对” 重装系统：  方法一（利用出厂备份的系统还原）：切换到安装系统—设备信息—连续点击Android版本，直到出现N图片—出现N图片后点击侧边的返回按钮—然后连续点击内核版本—然后在左上角可以看到一个电视复位，点击电视复位确认就可以了。（问“希沃”公众号）\n方法二（PE）：开机连续按F7（遥控器上），出现菜单后选择U盘就可以了。\n希沃授课助手  使用授课助手时，必须使平板和手机连接同一个局域网，如果教室没有wifi，则利用白板创建一个热点，手机再连接此wifi热点。  (希沃白板5 APP已经可以完全取代授课助手了。)\n数学画板  怎样标记角：选择绘图|标注工具，将绘图|标注工具移至角的顶点，鼠标后面会出现一个角的符号，按住鼠标左键可拖动角。右侧可改变标记的样式。（除了标记角，绘图|标注工具还可以标注线） 怎样测量角：接上一步先要标记角，然后选择角的符号，鼠标右键选择测量—标注角。 文本|命名工具可以插入文本，选择此工具直接点击点或者线段即可给点或者线段命名。 智能画笔工具：根据已知图形对象，智能绘制与已知图形相关图形功能（如交点，相等线段，平行，垂直等， 圆的切点、切线）  ","date":"2021-03-22T23:54:25+08:00","permalink":"/archives/seewo-tips/","title":"希沃电子白板学习笔记"},{"content":" 1.下载抖音视频  方法：前往 dy114短视频解析下载在线小工具，输入你的小视频分享链接地址，下载视频\nps：该小工具支持解析下载目前主流的抖音、快手、微博、微视、皮皮虾、皮皮搞笑、火山小视频、最右、西瓜视频、今日头条、秒拍小视频，而且是无水印下载原版高清视频哦。值得大家收藏。\n 2.下载视频音频提取工具  方法：电脑上下载按照QQ音影软件，软件地址：https://player.qq.com/\n 3.提取视频中的背景音乐与歌曲  方法：用安装好的软件打开你下载好的抖音等短视频，点击右下角的“音影工具箱”，选择“转码压缩”，格式选择为“音频”，设置好提取的音频保存地址，即可提取获取视频的歌曲、背景音和独白。\n操作截图提示如下：\n（1）点击右下角的“音影工具箱”\n（2）选择“转码压缩”\n（3）设置格式，提取视频中的歌曲、背景音影、对白等音频。\n 参考链接：快手抖音视频中的背景音乐怎么提取下载\n","date":"2021-01-16T22:28:25+08:00","permalink":"/archives/dou-yin-ying-yue/","title":"快手抖音视频中的背景音乐怎么提取下载"},{"content":"人民币计算 10元-2元6角=7元4角\n解析：将10元里拿出1元当作10角，也就是将10元看成9元10角。然后就元减元，角减角。\n5元6角+3元7角=9元3角\n解析：满10角要进1元，直接写成竖式比较简单。\n6元2角-2元6角=3元6角\n解析：写成竖式比较简单。\n画线段 问题：画线段，端点是用小圆点还是小竖线？\n答：其实，画线段用小圆点和小竖线都可以。\n难题 （1）一根铁丝绕瓶子一圈多12厘米，绕瓶子两圈多4厘米，这根铁丝有多长？\n解析：绕一圈多12cm，绕两圈多4cm。 则一圈长度为12-4=8cm 铁丝长度为8+12=20cm 或8x2+4=20cm\n（2）有一堆积木，比60多，比70少，如果这堆积木分给一些小朋友，每人分得的块数和小朋友的人数一样多。想一想，小朋友有多少人？积木有多少块？\n解析：这道数学题先给出了一个数字范围，积木的数量在60与70之间，具体的数字呢，不知道，不 过，要注意后面一句话:如果把这堆积木分给一些小朋友，每人分得的块数和小朋友的人数一 样多。\n由这句条件，可以分析得出，有几个人，每个人就有相同的几块，假设现在要求积木的总数， 就可以把这个相同的数进行相加，而求几个相同的加数是几，可以运用乘法来计算，那么，有 哪个数和自己相乘，得出的积在60与70之间呢?\n聪明的小学生马上就会在脑海当中进行回顾和搜索，开始联想，七七四十九，八八六十四，九 九八十一，在这其中，只有八八六十四符合条件，得数在60与70之间!\n","date":"2020-11-06T23:04:25+08:00","permalink":"/archives/second-grade-math-zong-jie/","title":"二年级数学上册知识点总结"},{"content":"北师大二年级数学下册优质课，来源于一师一优课，基本上都是部级优课，点击前往bilibili可选集观看。\n\r\r","date":"2020-09-06T15:25:25+08:00","permalink":"/archives/second-grade-math-xia-you-ke/","title":"北师大二年级数学下册优质课"},{"content":"创建重命名动作 首先打开任意一张图片，然后创建一个新的动作，接着就是记录动作：可以先调整图片的尺寸（如把1080P图片改成720P），然后依次点击文件—存储为将图片保存在文件夹里。完成后点击停止记录动作。\n批量重命名图片 依次点击文件—自动—批处理，打开批处理窗口。接着按以下操作：\n 选择刚才的动作。 选择源文件夹。（图片文件夹） 选择批处理后图片存放位置。（选择上面图片存放文件夹即可） 勾选覆盖动作中的\u0026quot;存储为\u0026quot;命令。 选择重命名格式。 点击确定，开始执行批处理动作。   \n批量压缩图片 在上一步保存图片时其实可以适当调整图片大小，如果对图片大小还是不满意的话。可接上一步批量压缩图片。先打开一张图片，然后记录动作：依次点击文件—导出—存储为Web所有格式（旧版），然后调整大小后保存，完成后点击停止记录动作。接着批量压缩图片可以参考上面的操作。\n总结 之所以不把两个动作合在一起，直接在导出图片时选择—存储为Web所有格式（旧版），是因为如果这样的话，最后图片不能重命名了，不知问题出在哪里，所以干脆就分两步进行了，如果不是对图片大小有过于苛刻的要求的话，只进行第一步就行了。\n\r​\n","date":"2020-08-11T09:59:25+08:00","permalink":"/archives/ps-compress-pics/","title":"PS批量压缩\u0026重命名图片"},{"content":"查看定时任务 crontab -l 编辑定时任务 crontab -e 使用实例 每天，每月，每年 定时启动:\n每五分钟执行 */5 * * * * 每小时执行 0 * * * * 每天执行 0 0 * * * 每周执行 0 0 * * 0 每月执行 0 0 1 * * 每年执行 0 0 1 1 * crontab时间举例：\n# 每天早上6点 0 6 * * * echo \u0026#34;Good morning.\u0026#34; \u0026gt;\u0026gt; /tmp/test.txt //注意单纯echo，从屏幕上看不到任何输出，因为cron把任何输出都email到root的信箱了。 # 每两个小时 0 */2 * * * echo \u0026#34;Have a break now.\u0026#34; \u0026gt;\u0026gt; /tmp/test.txt  # 晚上11点到早上8点之间每两个小时和早上八点 0 23-7/2，8 * * * echo \u0026#34;Have a good dream\u0026#34; \u0026gt;\u0026gt; /tmp/test.txt # 每个月的4号和每个礼拜的礼拜一到礼拜三的早上11点 0 11 4 * 1-3 command line # 1月1日早上4点 0 4 1 1 * command line SHELL=/bin/bash PATH=/sbin:/bin:/usr/sbin:/usr/bin MAILTO=root //如果出现错误，或者有数据输出，数据作为邮件发给这个帐号 HOME=/  # 每小时（第一分钟）执行/etc/cron.hourly内的脚本 01 * * * * root run-parts /etc/cron.hourly # 每天（凌晨4：02）执行/etc/cron.daily内的脚本 02 4 * * * root run-parts /etc/cron.daily # 每星期（周日凌晨4：22）执行/etc/cron.weekly内的脚本 22 4 * * 0 root run-parts /etc/cron.weekly # 每月（1号凌晨4：42）去执行/etc/cron.monthly内的脚本 42 4 1 * * root run-parts /etc/cron.monthly # 注意: \u0026#34;run-parts\u0026#34;这个参数了，如果去掉这个参数的话，后面就可以写要运行的某个脚本名，而不是文件夹名。 # 每天的下午4点、5点、6点的5 min、15 min、25 min、35 min、45 min、55 min时执行命令。 5，15，25，35，45，55 16，17，18 * * * command # 每周一，三，五的下午3：00系统进入维护状态，重新启动系统。 00 15 * *1，3，5 shutdown -r +5 # 每小时的10分，40分执行用户目录下的innd/bbslin这个指令： 10，40 * * * * innd/bbslink # 每小时的1分执行用户目录下的bin/account这个指令： 1 * * * * bin/account # 每天早晨三点二十分执行用户目录下如下所示的两个指令（每个指令以;分隔）： 203 * * * （/bin/rm -f expire.ls logins.bad;bin/expire$#@62;expire.1st） # 每1分钟执行一次myCommand * * * * * myCommand # 每小时的第3和第15分钟执行 3,15 * * * * myCommand # 在上午8点到11点的第3和第15分钟执行 3,15 8-11 * * * myCommand # 每隔两天的上午8点到11点的第3和第15分钟执行 3,15 8-11 */2 * * myCommand # 每周一上午8点到11点的第3和第15分钟执行 3,15 8-11 * * 1 myCommand # 每晚的21:30重启smb 30 21 * * * /etc/init.d/smb restart # 每月1、10、22日的4 : 45重启smb 45 4 1,10,22 * * /etc/init.d/smb restart # 每周六、周日的1 : 10重启smb 10 1 * * 6,0 /etc/init.d/smb restart # 每天18 : 00至23 : 00之间每隔30分钟重启smb 0,30 18-23 * * * /etc/init.d/smb restart # 每星期六的晚上11 : 00 pm重启smb 0 23 * * 6 /etc/init.d/smb restart # 每一小时重启smb * */1 * * * /etc/init.d/smb restart # 晚上11点到早上7点之间，每隔一小时重启smb 0 23-7 * * * /etc/init.d/smb restart 参考链接  1.Linux之crontab定时任务 2.crontab 定时任务 3.crontab 每天，每月，每年 定时启动  ","date":"2020-08-10T18:52:25+08:00","permalink":"/archives/linux-crontab/","title":"linux利用crontab设置定时任务"},{"content":"在网上查询了一下halo定时备份有三种方案：邮箱和Dropbox，以及github。\n备份到QQ邮箱 安装邮件发送依赖组件 Centos 7 yum install sendmail mailx -y Centos 8 yum -y install postfix sendmail-cf mailx service postfix start sudo systemctl enable postfix 修改附件发送大小限制 看下现在邮件的大小限制：\nsudo postconf message_size_limit message_size_limit = 10240000\r差不多是10M，放大10倍，应该差不多了。\nsudo postconf -e \u0026#34;message_size_limit = 102400000\u0026#34; 获得\u0026amp;编辑备份脚本 wget https://raw.githubusercontent.com/iwyang/scripts/master/halo_email_backup.sh 创建备份文件夹 如果选择将文件备份到临时目录的话，这步可跳过，直接修改脚本即可。我直接跳过了这一步。\rmkdir -p /home/back 修改脚本 脚本原来模样：\n#!/bin/bash # 进入到备份文件夹 cd /home/back #压缩网站数据 tar zcvf web_$(date +\u0026#34;%Y%m%d\u0026#34;).tar.gz 网站目录 # 导出数据库到备份文件夹内 mysqldump -uroot -p数据库密码 数据库名称 \u0026gt; web_data_$(date +\u0026#34;%Y%m%d\u0026#34;).sql # 以附件形式发送数据库到指定邮箱 echo \u0026#34;Blog date\u0026#34;|mail -s \u0026#34;Backup$(date +%Y-%m-%d)\u0026#34; -a web_data_$(date +\u0026#34;%Y%m%d\u0026#34;).sql 收件人邮箱 # 删除本地3天前的数据 rm -rf web_$(date -d -3day +\u0026#34;%Y%m%d\u0026#34;).tar.gz web_data_$(date -d -3day +\u0026#34;%Y%m%d\u0026#34;).sql # 登录FTP lftp ftp地址 -u ftp用户名,ftp密码 \u0026lt;\u0026lt; EOF # 进入FTP根目录 cd ftp根目录文件夹 # 删除3天前备份文件 mrm web_$(date -d -3day +\u0026#34;%Y%m%d\u0026#34;).tar.gz mrm web_data_$(date -d -3day +\u0026#34;%Y%m%d\u0026#34;).sql # 上传当天备份文件 mput web_$(date +\u0026#34;%Y%m%d\u0026#34;).tar.gz mput web_data_$(date -d -3day +\u0026#34;%Y%m%d\u0026#34;).sql bye EOF 根据实际需求，改成下面模样：\nvi halo_email_backup.sh\r#!/bin/bash cd /tmp tar zcvf web_$(date +\u0026#34;%Y%m%d\u0026#34;).tar.gz /root/.halo echo \u0026#34;Blog date\u0026#34;|mail -s \u0026#34;Backup$(date +%Y-%m-%d)\u0026#34; -a web_$(date +\u0026#34;%Y%m%d\u0026#34;).tar.gz 455343442@qq.com rm -f web_$(date +\u0026#34;%Y%m%d\u0026#34;).tar.gz 上面代码中最后的rm -f web_$(date +\u0026quot;%Y%m%d\u0026quot;).tar.gz，表示删除本地的临时文件。\n设置定时任务 赋予文件执行权限 chmod +x /root/halo_email_backup.sh 运行的时候就输入下面的代码即可：./halo_email_backup.sh\n设定自动任务 crontab -e 01 00 * * * /root/halo_email_backup.sh 意思是每天凌晨0:01运行这个脚本。\n备份到Dropbox 创建Dropbox应用 首先，需要创建一个Dropbox应用，可以从该网址进行创建：https://www.dropbox.com/developers/apps/create\n在这里，应用类型选择Dropbox API，数据存储类型选择App folder，然后命名创建。然后记录下App key，App secret，token，下面要用。\n下载dropbox_uploader.sh dropbox_uploader 是一个第三方Dropbox备份脚本，首先下载脚本：\ncurl \u0026#34;https://raw.githubusercontent.com/andreafabrizi/Dropbox-Uploader/master/dropbox_uploader.sh\u0026#34; -o dropbox_uploader.sh 然后，为该脚本添加执行权限：\nchmod +x dropbox_uploader.sh 执行该脚本，绑定APP：\n./dropbox_uploader.sh 根据提示输入Dropbox应用中的token，然后输入y确认。\n之后可以执行下面的命令测试上传，提示Done就是绑定成功了：\n./dropbox_uploader.sh upload /etc/passwd /backup/passwd.old 编写备份脚本 编写定时备份脚本，取名为backup.sh。代码原来模样如下：\nvi backup.sh #!/bin/bash SCRIPT_DIR=\u0026#34;/root\u0026#34; #这个改成你存放刚刚下载下来的dropbox_uploader.sh的文件夹位置 DROPBOX_DIR=\u0026#34;/backup\u0026#34; #这个改成你的备份文件想要放在Dropbox下面的文件夹名称，如果不存在，脚本会自动创建 BACKUP_SRC=\u0026#34;/home/wwwroot /usr/local/nginx/conf\u0026#34; #这个是你想要备份的本地服务器上的文件，不同的目录用空格分开 BACKUP_DST=\u0026#34;/tmp\u0026#34; #这个是你暂时存放备份压缩文件的地方，一般用/tmp即可 MYSQL_SERVER=\u0026#34;localhost\u0026#34; #这个是你mysql服务器的地址，一般填这个本地地址即可 MYSQL_USER=\u0026#34;mysqluser\u0026#34; #这个是你mysql的用户名名称，比如root或admin之类的 MYSQL_PASS=\u0026#34;password\u0026#34; #这个是你mysql用户的密码 # 下面的一般不用改了 NOW=$(date +\u0026#34;%Y.%m.%d\u0026#34;) DESTFILE=\u0026#34;$BACKUP_DST/$NOW.tar.gz\u0026#34; # 备份mysql数据库并和其它备份文件一起压缩成一个文件 mysqldump -u $MYSQL_USER -h $MYSQL_SERVER -p$MYSQL_PASS --all-databases \u0026gt; \u0026#34;$NOW-Databases.sql\u0026#34; echo \u0026#34;数据库备份完成，打包网站数据中...\u0026#34; tar cfzP \u0026#34;$DESTFILE\u0026#34; $BACKUP_SRC \u0026#34;$NOW-Databases.sql\u0026#34; echo \u0026#34;所有数据打包完成，准备上传...\u0026#34; # 用脚本上传到dropbox $SCRIPT_DIR/dropbox_uploader.sh upload \u0026#34;$DESTFILE\u0026#34; \u0026#34;$DROPBOX_DIR/$NOW.tar.gz\u0026#34; if [ $? -eq 0 ];then echo \u0026#34;上传完成\u0026#34; else echo \u0026#34;上传失败，重新尝试\u0026#34; fi # 删除本地的临时文件 rm -f \u0026#34;$NOW-Databases.sql\u0026#34; \u0026#34;$DESTFILE\u0026#34; 根据实际情况改成下面模样：\n#!/bin/bash SCRIPT_DIR=\u0026#34;/root\u0026#34; DROPBOX_DIR=\u0026#34;/backup\u0026#34; BACKUP_SRC=\u0026#34;/root/.halo\u0026#34; BACKUP_DST=\u0026#34;/tmp\u0026#34; NOW=$(date +\u0026#34;%Y.%m.%d\u0026#34;) DESTFILE=\u0026#34;$BACKUP_DST/$NOW.tar.gz\u0026#34; echo \u0026#34;打包网站数据中...\u0026#34; tar cfzP \u0026#34;$DESTFILE\u0026#34; $BACKUP_SRC echo \u0026#34;所有数据打包完成，准备上传...\u0026#34; $SCRIPT_DIR/dropbox_uploader.sh delete \u0026#34;$DROPBOX_DIR\u0026#34; $SCRIPT_DIR/dropbox_uploader.sh upload \u0026#34;$DESTFILE\u0026#34; \u0026#34;$DROPBOX_DIR/$NOW.tar.gz\u0026#34; if [ $? -eq 0 ];then echo \u0026#34;上传完成\u0026#34; else echo \u0026#34;上传失败，重新尝试\u0026#34; fi rm -f \u0026#34;$DESTFILE\u0026#34; 先用$SCRIPT_DIR/dropbox_uploader.sh delete \u0026quot;$DROPBOX_DIR\u0026quot;删除Dropbox备份文件夹，再上传文件。这样就保证Dropbox永远只有一个最新的备份文件，不用手动删除多余的备份文件了。\n 当然也可以通过脚本设置保留旧数据的时长。如下面一个脚本就是让旧数据在Dropbox保留7天，本地保留10天。（不过觉得没有必要，还是上面的方法简单，下面方法尝试过，老是出现问题，旧数据删除不了，不想折腾了）\n#!/bin/bash  # 定义需要备份的目录 WEB_DIR=/home/www # 网站数据存放目录 # 定义备份存放目录 DROPBOX_DIR=/$(date +%Y-%m-%d) # Dropbox上的备份目录 LOCAL_BAK_DIR=/home/backup # 本地备份文件存放目录 # 定义备份文件名称 DBBakName=DB_$(date +%Y%m%d).tar.gz WebBakName=Web_$(date +%Y%m%d).tar.gz # 定义旧数据名称 Old_DROPBOX_DIR=/$(date -d -7day +%Y-%m-%d) OldDBBakName=DB_$(date -d -10day +%Y%m%d).tar.gz OldWebBakName=Web_$(date -d -10day +%Y%m%d).tar.gz cd $LOCAL_BAK_DIR #使用命令导出数据库 mongodump --out $LOCAL_BAK_DIR/mongodb/ --db bastogne #压缩数据库文件合并为一个压缩文件 tar zcf $LOCAL_BAK_DIR/$DBBakName $LOCAL_BAK_DIR/mongodb rm -rf $LOCAL_BAK_DIR/mongodb #压缩网站数据 cd $WEB_DIR tar zcf $LOCAL_BAK_DIR/$WebBakName ./* cd ~ #开始上传 ./dropbox_uploader.sh upload $LOCAL_BAK_DIR/$DBBakName $DROPBOX_DIR/$DBBakName ./dropbox_uploader.sh upload $LOCAL_BAK_DIR/$WebBakName $DROPBOX_DIR/$WebBakName #删除旧数据 rm -rf $LOCAL_BAK_DIR/$OldDBBakName $LOCAL_BAK_DIR/$OldWebBakName ./dropbox_uploader.sh delete $Old_DROPBOX_DIR/ echo -e \u0026#34;Backup Done!\u0026#34;  赋予文件执行权限 chmod +x backup.sh 运行的时候就输入下面的代码即可：./backup.sh\n设置定时任务 crontab -e 02 00 * * * /root/backup.sh 这样，就可以每天凌晨00:02自动备份到Dropbox了。\n修改时区 如果你不知道服务器当前时间，可以使用下面的命令，查看当前时间：\ndate -R 修改当前时区为上海（这步未进行）：\ncp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime 备份到github 准备工作 首先当然是在服务器上安装GIt，配置ssh公钥，并且在github上添加服务器ssh公钥。具体过程略。\n初始化仓库 cd /root/.halo git init git remote add origin git@github.com:iwyang/halo.git git add . git commit -m \u0026#34;site backup\u0026#34; git push --force origin master  注意要删除主题文件夹下的.git文件夹，不然的话就无法备份主题了。当然也可以不备份主题，因为主题所有配置选项都在数据库里。如果这样的话，命令要作如下调整：\ngit add application.yaml upload/ db/  设置定时任务 编写备份脚本 cd /root vi github.sh 脚本原来模样：\n#!/bin/bash #进入到网站根目录，记得修改为自己的站点 cd /home/xxx.com #将数据库导入到该目录，这里以mysql为例，passwd为数据库密码，typecho为数据库名称，typecho.sql为备份的数据库文件 mysqldump -uroot -ppasswd typecho \u0026gt; typecho.sql git add -A git commit -m \u0026#34;backsite\u0026#34; git push -u origin master 根据实际情况修改如下：\n#!/bin/bash echo -e \u0026#34;\\033[0;32mDeploying updates to github...\\033[0m\u0026#34; cd /root/.halo git add .\tgit commit -m \u0026#34;site backup\u0026#34; git push --force origin master 为了防止服务器里.git文件夹过大，脚本可以作如下调整：\n#!/bin/bash echo -e \u0026#34;\\033[0;32mDeploying updates to github...\\033[0m\u0026#34; cd /root/.halo rm -rf .git git init git remote add origin git@github.com:iwyang/halo.git git add . git commit -m \u0026#34;site backup\u0026#34; git push --force origin master rm -rf .git 赋予文件执行权限 chmod +x /root/github.sh 设定自动任务 crontab -e 03 00 * * * /root/github.sh 意思是每天凌晨0:03运行这个脚本。\n还原博客 git clone git@github.com:iwyang/halo.git .halo 接下来就是配置个 Java 环境，下载个 Halo 运行包，配置域名访问。具体可参考官方文档。\n总结 halo博客迁移后，最好删除logs文件夹下的日志文件。\n SCP命令 下载文件 从服务器下载文件到本地，在Git Bash执行：\nscp root@104.224.191.88:/root/.ssh/mysite ssh 意思是将服务器/root/.ssh目录下的mysite文件复制到当前路径下ssh文件夹下。\n上传文件 从本地上传文件到服务器，在Git Bash执行：\nscp .halo.zip root@137.220.43.191:/root/ 意思是将当前目录下.halo.ip文件上传到服务器/root/目录下。\nwordpress常用命令 附录：wordpress常用mysql命令\r# 1.删除数据库mysqladmin -u root -p drop wordpress# 2.新建一个空数据库mysqladmin -u root -p create wordpress# 3.导入数据mysql -uroot -p”你的密码” wordpress \u0026lt; 你的数据sql文件# 4.更新Url# 4.1.连接数据库mysql -u root -p# 4.2. 选择数据库use wordpress# 4.3.更新URLSELECT * FROM wp_options WHERE option_name = \u0026#39;home\u0026#39;;UPDATE wp_options SET option_value=\u0026#34;https://new_url/\u0026#34; WHERE option_name = \u0026#34;home\u0026#34;;SELECT * FROM wp_options WHERE option_name = \u0026#39;siteurl\u0026#39;;UPDATE wp_options SET option_value=\u0026#34;https://new_url/\u0026#34; WHERE option_name = \u0026#34;siteurl\u0026#34;; nginx: command not found 解决方案 只需要输入source /etc/profile ，让配置文件重新生效一下即可。\n参考链接  1.Linux 每日自动备份到FTP及数据库通过邮箱发送方法 2.fetchmail: SMTP error: 552 5.3.4 Message size exceeds fixed limit 3.如何将服务器上的网站数据定时自动备份到Dropbox 4.Linux 定时备份服务器/网站数据到Github私人仓库 5.MySQL 教程 6.Changing the WordPress site URL using the MySQL command line 7.CentOs8系统安装mailx发邮件  ","date":"2020-07-26T21:49:25+08:00","permalink":"/archives/halo-backup/","title":"halo定时备份的方法"},{"content":"本教程以 CentOS 7.x 为例，配置并运行 Halo，其他 Linux 发行版大同小异。\n写在前面  具备一定的 Linux 基础。 如需域名绑定，请先保证已经正确解析 IP，以及确认服务器是否需要备案。 如需使用 IP 访问，请先确保 Halo 的运行端口已经打开，除非你使用 80 端口运行 Halo。 如 3 所述，如果你使用了类似 宝塔面板 之类的 Linux 管理面板，可能还需要在面板里设置端口。 不要想当然，请严格按照文档的流程操作。  环境要求 为了在使用过程中不出现意外的事故，给出下列推荐的配置\n CentOS 7.x 512 MB 以上内存  服务器配置 更新软件包 请确保服务器的软件包已经是最新的。\nsudo yum update -y 装 Java 运行环境  若已经存在 Java 运行环境的可略过这一步。\n # 安装 OpenJRE sudo yum install java-1.8.0-openjdk -y # 检测是否安装成功 java -version 当然，这只是其中一种比较简单的安装方式，你也可以用其他方式，并不是强制要求使用这种方式安装。\n创建 Halo 用户 我们推荐创建一个低权限的用户运行 halo：（这一步我没有进行，直接用root）\n# 创建 halo 用户 sudo useradd -m halo # 直接登录该用户 sudo su halo 安装 Halo 下载配置文件 考虑到部分用户的需要，可能需要自定义比如端口等设置项，我们提供了公共的配置文件，并且该配置文件是完全独立于安装包的。当然，你也可以使用安装包内的默认配置文件，但是安装包内的配置文件是不可修改的。请注意：配置文件的路径为 ~/.halo/application.yaml。\n# 下载配置文件到 ~/.halo 目录 curl -o ~/.halo/application.yaml --create-dirs https://dl.halo.run/config/application-template.yaml 修改配置文件 完成上一步操作，我们就可以自己配置 Halo 的运行端口，以及数据库相关的配置了。\n# 使用 Vim 工具修改配置文件 vim ~/.halo/application.yaml 打开之后我们可以看到\nserver:port:8090# Response data gzip.compression:enabled:falsespring:datasource:# H2 database configuration.driver-class-name:org.h2.Driverurl:jdbc:h2:file:~/.halo/db/halousername:adminpassword:123456# MySQL database configuration.# driver-class-name: com.mysql.cj.jdbc.Driver# url: jdbc:mysql://127.0.0.1:3306/halodb?characterEncoding=utf8\u0026amp;useSSL=false\u0026amp;serverTimezone=Asia/Shanghai\u0026amp;allowPublicKeyRetrieval=true# username: root# password: 123456# H2 database console configuration.h2:console:settings:web-allow-others:falsepath:/h2-consoleenabled:falsehalo:# Your admin client path is https://your-domain/{admin-path}admin-path:admin# memory or levelcache:memory 如果需要自定义端口，修改 server 节点下的 port 即可。 默认使用的是 H2 Database 数据库，这是一种嵌入式的数据库，使用起来非常方便。需要注意的是，默认的用户名和密码为 admin 和 123456，这个是自定义的，最好将其修改，并妥善保存。 如果需要使用 MySQL 数据库，需要将 H2 Database 的所有相关配置都注释掉，并取消 MySQL 的相关配置。另外，MySQL 的默认数据库名为 halodb，请自行配置 MySQL 并创建数据库，以及修改配置文件中的用户名和密码。 h2 节点为 H2 Database 的控制台配置，默认是关闭的，如需使用请将 h2.console.settings.web-allow-others 和 h2.console.enabled 设置为 true。控制台地址即为 域名/h2-console。注意：非紧急情况，不建议开启该配置。 server.compression.enabled 为 Gzip 功能配置，如有需要请设置为 true，需要注意的是，如果你使用 Nginx 或者 Caddy 进行反向代理的话，默认是有开启 Gzip 的，所以这里可以保持默认。 halo.admin-path 为后台管理的根路径，默认为 admin，如果你害怕别人猜出来默认的 admin（就算猜出来，对方什么都做不了），请自行设置。仅支持一级，且前后不带 /。 halo.cache 为系统缓存形式的配置，可选 memory 和 level，默认为 memory，将数据缓存到内存，使用该方式的话，重启应用会导致缓存清空。如果选择 level，则会将数据缓存到磁盘，重启不会清空缓存。如不知道如何选择，建议默认。  注意：使用 MySQL 之前，必须要先新建一个 halodb 数据库，MySQL 版本需 5.7 以上。\ncreatedatabasehalodbcharactersetutf8mb4collateutf8mb4_bin;运行 Halo Halo 的整个应用程序只有一个 Jar 包，且不包含用户的任何配置，它放在任何目录都是可行的。需要注意的是，Halo 的整个额外文件全部存放在 ~/.halo 目录下，包括 application.yaml（用户配置文件），template/themes（主题目录），upload（附件上传目录），halo.db.mv（数据库文件）。一定要保证 ~/.halo 的存在，你博客的所有资料可都存在里面。所以你完全不需要担心安装包的安危，它仅仅是个服务而已。\n访问GitHub release，下载最新稳定版本。\n# 下载最新的 Halo 安装包，{{version}} 为版本号，不带 v，更多下载地址请访问 https://halo.run/archives/download.html wget https://dl.halo.run/release/halo-{{version}}.jar -O halo-latest.jar # 启动测试 java -jar halo-latest.jar 如看到以下日志输出，则代表启动成功.\nrun.halo.app.listener.StartedListener : Halo started at http://127.0.0.1:8090 run.halo.app.listener.StartedListener : Halo admin started at http://127.0.0.1:8090/admin run.halo.app.listener.StartedListener : Halo has started successfully! 提示：以上的启动仅仅为测试 Halo 是否可以正常运行，如果我们关闭 ssh 连接，Halo 也将被关闭。要想一直处于运行状态，请继续看下面的教程。\n进阶配置 上面我们已经完成了 Halo 的整个配置和安装过程，接下来我们对其进行更完善的配置，比如：需要开机自启？，更简单的启动方式？\n实现以上功能我们只需要新增一个配置文件即可，也就是使用 Systemd 来完成这些工作。\n如果当前用户为 halo 用户，则需要退出 halo 用户，进入一个拥有管理员权限的用户下：\n# 查看当前登录用户 whoami # 退出 halo 登录，进入一个有管理员权限的用户 su xxx 或者直接 exit # 下载 Halo 官方的 halo.service 模板 sudo curl -o /etc/systemd/system/halo.service --create-dirs https://dl.halo.run/config/halo.service 下载完成之后，我们还需要对其进行修改。\n# 修改 halo.service sudo vim /etc/systemd/system/halo.service 打开之后我们可以看到\n[Unit]\rDescription=Halo Service\rDocumentation=https://halo.run\rAfter=network-online.target\rWants=network-online.target\r[Service]\rUser=halo\rType=simple\rExecStart=/usr/bin/java -server -Xms256m -Xmx256m -jar YOUR_JAR_PATH\rExecStop=/bin/kill -s QUIT $MAINPID\rRestart=always\rStandOutput=syslog\rStandError=inherit\r[Install]\rWantedBy=multi-user.target\r参数：\n -Xms256m：为 JVM 启动时分配的内存，请按照服务器的内存做适当调整，512 M 内存的服务器推荐设置为 128，1G 内存的服务器推荐设置为 256，默认为 256。 -Xmx256m：为 JVM 运行过程中分配的最大内存，配置同上。 YOUR_JAR_PATH：Halo 安装包的绝对路径，例如 /www/wwwroot/halo-latest.jar。  提示：\n 如果你不是按照上面的方法安装的 JDK，请确保 /usr/bin/java 是正确无误的。 systemd 中的所有路径均要写为绝对路径，另外，~ 在 systemd 中也是无法被识别的，所以你不能写成类似 ~/halo-latest.jar 这种路径。 如何检验是否修改正确：把 ExecStart 中的命令拿出来执行一遍。  # 修改 service 文件之后需要刷新 Systemd sudo systemctl daemon-reload # 使 Halo 开机自启 sudo systemctl enable halo # 启动 Halo sudo service halo start # 重启 Halo sudo service halo restart # 停止 Halo sudo service halo stop # 查看 Halo 的运行状态 sudo service halo status 完成以上操作即可通过 IP:端口 访问了。不过在此之前，最好先完成后续操作，我们还需要让域名也可以访问到 Halo，请继续看 配置域名访问。\n更新 Halo # 备份数据 cp -r ~/.halo ~/.halo.bak # 备份旧的安装包 mv halo-latest.jar halo-latest.jar.bak # 下载最新的 Halo 安装包，{{version}} 为版本号，不带 v，更多下载地址请访问 https://halo.run/archives/download.html wget https://dl.halo.run/release/halo-{{version}}.jar -O halo-latest.jar # 测试是否能够正常启动 java -jar halo-latest.jar # 重启应用 service halo restart 更新halo后可能会出现502 Bad Gateway错误，这时候首先要清空浏览器缓存，然后多刷新几次就行了。\r配置域名访问  假设你已经成功配置并运行好了 Halo，且不是使用 80 端口运行。 请确保域名已经成功解析到服务器 IP，并确认服务器是否需要备案。 请检查服务器的 80 和 443 端口是否开放。 如 3 所述，如果你使用了类似 宝塔面板 之类的 Linux 管理面板，可能还需要在面板里设置端口。 并不一定要求按照下列教程操作，这里仅仅以供参考。 如 2 所述，你需要做的仅仅是反向代理 Halo 运行端口，并配置 SSL 证书而已，所以并不要求配置方式。  使用 Nginx 进行反向代理 我使用的是这一种方法。\n安装 Nginx # 添加 Nginx 源 sudo rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm # 安装 Nginx sudo yum install -y nginx # 启动 Nginx sudo systemctl start nginx.service # 设置开机自启 Nginx sudo systemctl enable nginx.service 配置 Nginx # 下载 Halo 官方的 Nginx 配置模板 curl -o /etc/nginx/conf.d/halo.conf --create-dirs https://dl.halo.run/config/nginx.conf 下载完成之后，我们还需要对其进行修改\n# 使用 vim 编辑 halo.conf vim /etc/nginx/conf.d/halo.conf 打开之后我们可以看到\nserver { listen 80; server_name example.com www.example.com; location / { proxy_set_header HOST $host; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://127.0.0.1:8090/; } }  注意：请把 example.com 改为自己的域名。\n 修改完成之后\n# 检查配置是否有误 sudo nginx -t # 重载 Nginx 配置 sudo nginx -s reload 配置 SSL 证书 在这里我只演示如果自动申请证书，如果你自己准备了证书，请查阅相关教程。\n# 先安装epel: sudo yum install epel-release -y # 安装 certbot 以及 certbot nginx 插件 sudo yum install certbot python2-certbot-nginx -y # 执行配置，中途会询问你的邮箱，如实填写即可 sudo certbot --nginx # 自动续约 sudo certbot renew --dry-run 到这里，关于 Nginx 的配置也就完成了，现在你可以访问一下自己的域名，并进行 Halo 的初始化了。\n在设置了反向代理之后，请一定记得去 Halo 的管理端设置一下正确的博客地址，否则可能会造成资源获取不成功。\n添加 Let’s Encrypt 免费证书 可以利用前面《Nginx配置ssl证书》的方法申请证书，然后更改：\nserver { listen 80; server_name blog.bore.vip; rewrite ^(.*)$ https://$host$1 permanent; client_max_body_size 1024m; } server { listen 443 ssl; server_name blog.bore.vip; ssl_certificate /etc/letsencrypt/live/blog.bore.vip/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/blog.bore.vip/privkey.pem; ssl_session_timeout 5m; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_prefer_server_ciphers on; location / { proxy_set_header HOST $host; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://127.0.0.1:8090/; } } 不过这样的话，无法自动更新证书，得把nginx配置文件改回原来再申请证书，申请成功后再改过来。（突然发现使用certbot certonly --webroot -w /var/www/hugo -d blog.bore.vip -m 455343442@qq.com --agree-tos可以重新申请证书了，也许证书到期直接可以运行此命令来重新申请证书，不用再改nginx配置文件了。此前不能用此命令申请证书，所以将申请证书的目录克隆了一份hugo网页，证书才申请成功。）\n使用阿里云免费证书 server {listen 80;server_name iwyang.xyz;rewrite ^(.*)$ https://$host$1 permanent;client_max_body_size 1024m;}server {listen 443 ssl;server_name iwyang.xyz;ssl_certificate /etc/nginx/cert/iwyang.xyz.pem;ssl_certificate_key /etc/nginx/cert/iwyang.xyz.key;ssl_session_timeout 5m;ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;ssl_protocols TLSv1 TLSv1.1 TLSv1.2;ssl_prefer_server_ciphers on;location / {proxy_set_header HOST $host;proxy_set_header X-Forwarded-Proto $scheme;proxy_set_header X-Real-IP $remote_addr;proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;proxy_pass http://127.0.0.1:8090/;}}或者使用 Caddy 进行反向代理 Caddy 是一款使用 Go 语言开发的 Web 服务器。其配置更为简洁，并可以自动申请及配置 SSL 证书。\n安装 Caddy # 安装 Caddy 软件包 yum install epel-release -y yum install caddy -y 配置 Caddy # 下载 Halo 官方的 Caddy 配置模板 curl -o /etc/caddy/conf.d/Caddyfile.conf --create-dirs https://dl.halo.run/config/Caddyfile 下载完成之后，我们还需要对其进行修改。\n# 使用 vim 编辑 Caddyfile vim /etc/caddy/conf.d/Caddyfile.conf 打开之后我们可以看到\nhttps://www.simple.com { gzip tls xxxx@xxx.xx proxy / localhost:port { transparent } }  请把 https://www.simple.com 改为自己的域名。 tls 后面的 xxxx@xxx.xx 改为自己的邮箱地址，这是用于自动申请 SSL 证书用的。需要注意的是，不需要你自己配置 SSL 证书，而且会自动帮你续签。 localhost:port 请将 port 修改为 Halo 的运行端口，默认为 8090。  修改完成之后启动 Caddy 服务即可。\n# 开启自启 Caddy 服务 systemctl enable caddy # 启动 Caddy service caddy start # 停止运行 Caddy service caddy stop # 重启 Caddy service caddy restart # 查看 Caddy 运行状态 service caddy status 如果 Caddy 启动出现诸如 [/usr/lib/systemd/system/caddy.service:23] Unknown lvalue 'AmbientCapabilities' in section 'Service' 这样的问题，请使用 yum update -y 更新系统。然后再使用 service caddy restart 重启，已知 CentOS 7.3 会出现该问题。\n进阶设置 多网址重定向到主网址，比如访问 simple.com 跳转到 www.simple.com 应该怎么做呢？\n# 使用 vim 编辑 Caddyfile vim /etc/caddy/conf.d/Caddyfile.conf 打开之后我们在原有的基础上添加以下配置\nhttps://simple.com { redir https://www.simple.com{url} } 将 https://simple.com 和 https://www.simple.com{url} 修改为自己需要的网址就行了，比如我要求访问 ryanc.cc 跳转到 www.ryanc.cc，完整的配置如下：\nhttps://ryanc.cc { redir https://www.ryanc.cc{url} } https://www.ryanc.cc { gzip tls i@ryanc.cc proxy / localhost:8090 { transparent } } 最后我们重启 Caddy 即可。\n到这里，关于 Caddy 反向代理的配置也就完成了，现在你可以访问一下自己的域名，并进行 Halo 的初始化了。\n在设置了反向代理之后，请一定记得去 Halo 的管理端设置一下正确的博客地址，否则可能会造成资源获取不成功。\nhalo更改评论模块 首先进入后台，依次点击：系统—博客设置—评论设置，更改评论模块JS。系统默认（halo 1.3.2）评论模块JS为：\n//cdn.jsdelivr.net/npm/halo-comment@latest/dist/halo-comment.min.js 更改为halo-comment-fly评论模块JS：\nhttps://cdn.jsdelivr.net/gh/hshanx/halo-comment-fly@latest/dist/halo-comment.min.js 或者：\nhttps://cdn.jsdelivr.net/gh/hshanx/halo-comment-hshan@2.0.6/dist/halo-comment.min.js 更多评论模块JS，可以在github中搜索halo comment。\n定时删除halo日志 crontab -e 0 0 * * * rm -rf /root/.halo/logs/* 意思是每天删除日志文件。\n参考链接  1.在 Linux 服务器部署 Halo 2.配置域名访问 3.CentOS 7 Nginx配置Let\u0026rsquo;s Encrypt SSL证书  ","date":"2020-07-24T10:21:25+08:00","permalink":"/archives/centos-halo/","title":"在Centos服务器部署Halo"},{"content":"配置github 新建公共仓库 新建一个公共仓库，例如我建的仓库地址：https://github.com/iwyang/pic，注意一定要勾选使用Readme文件初始化这个仓库，否则后面会无法上传图片。\n获取私人令牌 前往设置，作用：授权仓库的操作权限，通过API实现自动化。然后填写 Token 描述，勾选 repo、write、read然后点击 Generate token 生成一个 Token。因为 Token 只会显示一次，所以先保存笔记本等。\n安装\u0026amp;配置PicGo 安装PicGo 访问PicGo Releases直接下载你的操作系统对应的安装包并完成安装。\n 注：在安装的时候安装目录千万不能选C:\\Program Files\\下的任何地方，因为PicGo无法解析这一路径，如果你不知道安装在哪里的话，选择仅为我安装，否则在设置Typora时会出现错误。\n 配置PicGo 在PicGo设置里作如下修改：\n设置日志文件：日志记录等级选择\u0026#34;错误-Error\u0026#34;和\u0026#34;提醒-Warn\u0026#34; 时间戳重命名：开 开启上传提示：开 上传后自动复制URL：开 选择显示的图床：只勾选Github图床 配置GitHub插件 安装好后开始配置GitHub图床\n 设定仓库名：按照 用户名/仓库名 的格式填写（iwyang/pic） 设定分支名：master 设定 Token：粘贴之前叫你保存的Token。 设定自定义域名：它的的作用是，在图片上传后，PicGo 会按照自定义域名+上传的图片名的方式生成访问链接，放到粘贴板上。 https://cdn.jsdelivr.net/gh/用户名/仓库名（https://cdn.jsdelivr.net/gh/iwyang/pic）   \n上传和管理图片  单击上传区，选择链接格式，使用点击上传或剪贴板图片上传，PicGo会自动上传图片并将符合链接格式的链接复制到剪贴板，你只要按下Ctrl+v即可粘贴图片的链接。 单击相册，你可以看到你上传的所有图片，你可以对所有图片进行复制链接，修改图片URL与删除操作，并可以批量复制或批量删除。  配置Typora  点击Typora左上角的文件-\u0026gt;偏好设置 在弹出的界面中点击图像，选择插入图片时选项为上传图片，并勾选对本地位置的图片应用上述规则和对网络位置的图片应用上述规则。 上传服务选项里选择PicGo(app)，PicGo路径选择PicGo.exe的绝对路径。  以后在Typora里插入本地图片时，它会利用PicGo自动帮你上传到github，并替换本地图片地址为github地址。\n参考链接  1.GitHub + jsDelivr + PicGo 打造稳定快速、高效免费图床 2.手把手教你用Typora自动上传到picgo图床  ","date":"2020-07-21T16:32:25+08:00","permalink":"/archives/github-jsdelivr-picgo-typecho/","title":"GitHub+jsDelivr+PicGo+typecho打造免费高速图床"},{"content":"主要教程查看：一加手机全系列⑮机型线刷救砖资源★附教程，这里要注意以下几点：\n  1.救砖后系统恢复为安卓7。\n  2.要升级系统好像只能逐级升级（安卓7—安卓8—安卓9—安卓10），将下载好的官方全量包—安卓8、安卓9、安卓10放在根目录依次升级，如果想直接从安卓7升级到安卓10，会失败。这里用官方recovery即可。\n  3.升级到安卓9，出现bug—WiFi开关打不开；升级到安卓10，出现bug—相机、手电筒不能用。于是乎就卡刷了第三方ROM：终结之作-5T Beta30 纯净优化包，刷这个包用到的recovery是用一加手机5T工具箱 _2.2.1刷的自选Recovery—twrp-3.3.1。\n  4.root后可以利用link2sd这个软件，冻结或者卸载系统应用，安卓10好像只能冻结，卸载不了。具体使用方法，例如：搜索更新，将自动更新冻结，以后就收不到更新了。\n  5.网上还有线刷的方法：【任意升降级】一加系统任意升级降级 7.1/8.0/8.1 新手福利，不过测试未成功，不想再折腾了。\n  6.不知为什么升级到安卓10后，相机不能用了。以后就暂且用这个包：终结之作-5T Beta30 纯净优化包。（这里好像是在升级到安卓10出现问题后，再卡刷这个包的，不知道能否直接从安卓7卡刷，以后有机会再测试吧，当然要注意recovery版本不能太低了，用twrp-3.3.1应该没问题）。\n  我的一加5T是18年2月份买的，看样子还能用几年。\n","date":"2020-07-18T14:27:25+08:00","permalink":"/archives/one-plus-5t-jiu-zhuan/","title":"一加5T救砖备忘"},{"content":"ico插件  下载插件：官网下载地址：ICO (Windows Icon) Format ，找到ICO (Windows Icon) Format，然后根据系统选择相应版本，如Windows (64 bit)，进行下载。 复制下载的ICOFormat64.8bi，粘贴到D:\\Program Files\\Adobe\\Adobe Photoshop CC 2015\\Required\\Plug-Ins\\File Formats 重新打开Photoshop点击打开会显示有.ico和.cur文件，也可以对文件进行操作，然后另存为.ico格式和.cur格式。  参考链接：使Photoshop支持ICO图片、CUR图片格式\nwebp插件 插件地址：WebP file format plug-in for Photoshop\n","date":"2020-07-14T00:43:25+08:00","permalink":"/archives/install-ico-plugin-in-photoshop-cc/","title":"让PS支持.ico\u0026webp格式"},{"content":"记得这是一次青年教师什么考试的题目，当然没能够做出来，有必要记录一下，代码如下：\ncs repeat 36+18[rt 5 fd 10 rt 5] repeat 36+18[lt 5 fd 10 lt 5] repeat 36[rt 5 fd 10 rt 5] repeat 36[rt 5 fd 10 rt 5] rt 90 repeat 36[rt 5 fd 10 rt 5] pu bk 115 pd repeat 36[rt 5 fd 10 rt 5] 参考链接：用嵌套repeat画奥运五环 是pc logo 里的\n","date":"2020-07-12T09:16:25+08:00","permalink":"/archives/pc-logo-wu-huan/","title":"用PC Logo画五环"},{"content":"首先保障手机已解锁，一加5T解锁教程：一加5T解锁、root、刷机教程\n准备以下6个文件 注意要先把2—6号文件放在手机根目录（如果放在文件夹里，文件夹名不能有中文）。\n 一加手机5T工具箱 _2.2.1 twrp-3.3.1-0-dumpling.img （第三方recovery镜像） Magisk-v20.4(20400).zip （集root管理、模块安装等功能） MM管理器(叶子修改版)v1.8.zip  可在TWRP下对Magisk模块进行管理、卸载。一定要先安装这个，再安装EdXposed的两个模块，防止安装模块后手机变砖无法开机，这时就可以通过MM管理器来删除安装的模块，使用方法：在第三方rec下，点击高级→终端，输入/data/media/mm，然后回车，就可以禁用该模块了。\r Riru_(Riru_-Core)-v21.2(35).zip和Riru-EdXposed-v0.4.6.1(4510)_(YAHFA)(4510).zip （EdXposed两个模块包）\n  EdXposedManager.apk （EdXposed管理器）\n  刷入第三方recover\u0026amp;root  打开一加手机5T工具箱，选择选项8—刷写自选Recovery，按照提示把下载好的rec拖入工具箱随后回车刷入。（如果无法拖入，直接输入rec路径即可） 刷完会自动进入第三方Recovery（TWRP），这时候可以一次性选择2—5号文件刷入，当然如果只想root则只用刷入Magisk。 root后可以利用link2sd这个软件，冻结或者卸载系统应用，安卓10好像只能冻结，卸载不了。具体使用方法，例如：搜索更新，将自动更新冻结，以后就收不到更新了。  刷入EdXposed模块 选择MM管理器以及两个模块刷入。（如果模块无法刷入，可能是命名格式问题，将模块重命名为1.zip、2.zip即可，同理上面Magisk无法刷入，也重命名一下；实在不行就在Magisk里刷入模块）\n安装EdXposed管理器 重启手机安装EdXposed管理器。之后就是安装各种使用的模块了。\n参考链接  1.OnePlus 5T Android 10 root亲测教程 2.完美支持安卓10Xposed框架★EdXposed  ","date":"2020-07-10T18:34:25+08:00","permalink":"/archives/one-plus-5t-root/","title":"一加5T(安卓10)root\u0026EdXposed框架"},{"content":"从学生的角度来讲，把一个正方形一部分成四份，应该有四种分法,如图所示：\n \n但是，如果不是学生，有人突然问你这样的一个问题，你就可以这样回答：有无数种方法。如：\n \n另外，我们还可以正方形的中心为交点画一个互相垂直的直线，然后沿此中心旋转，被分成的四个部分永远都是平均的四份。\n参考链接：把一个正方形平分成四份.有几种分法\n","date":"2020-07-09T10:15:25+08:00","permalink":"/archives/zfx-si-fen/","title":"把一个正方形平分成四份"},{"content":"生成公钥 Windows 上安装 Git for Windows 之后在开始菜单里打开 Git Bash 输入：\ngit config --global user.name \u0026#34;你的用户名\u0026#34; git config --global user.email \u0026#34;你的电子邮箱\u0026#34; cd ~ mkdir .ssh cd .ssh ssh-keygen -t rsa 在系统当前用户文件夹下生成了私钥 id_rsa 和公钥 id_rsa.pub。\n上传id_rsa.pub 在右上角个人账户依次点击Settings-\u0026gt;SSH and GPG keys添加刚刚生成的公钥，名称随意。\n上传id_rsa 然后在 Settings \u0026gt; Secrets 中新增一个 secret，命名为 DEPLOY_KEY，把私钥 id_rsa 的内容复制进去，供后续使用。\n配置 GitHub Actions 第一种 在博客根目录新建.github/workflows/gh_pages.yml文件。代码如下：\nname:Hexo Deploy# 只监听 source 分支的改动on:push:branches:- develop# 自定义环境变量env:POST_ASSET_IMAGE_CDN:truejobs:build-and-deploy:runs-on:ubuntu-lateststeps:# 获取博客源码和主题- name:Checkoutuses:actions/checkout@v2.3.4- name:Checkout theme repouses:actions/checkout@v2.3.4with:repository:jerryc127/hexo-theme-butterflyref:masterpath:themes/butterfly# 这里用的是 Node.js 14.x- name:Set up Node.jsuses:actions/setup-node@v2with:node-version:\u0026#39;14\u0026#39;# 设置 yarn 缓存，npm 的话可以看 actions/cache@v2 的文档示例- name:Get yarn cache directory pathid:yarn-cache-dir-pathrun:echo \u0026#34;::set-output name=dir::$(yarn cache dir)\u0026#34;- name:Use yarn cacheuses:actions/cache@v2.1.6id:yarn-cachewith:path:${{ steps.yarn-cache-dir-path.outputs.dir }}key:${{ runner.os }}-yarn-${{ hashFiles(\u0026#39;**/yarn.lock\u0026#39;) }}restore-keys:|${{ runner.os }}-yarn-# 安装依赖- name:Install dependenciesrun:|yarn install --prefer-offline --frozen-lockfile# 从之前设置的 secret 获取部署私钥- name:Set up environmentenv:DEPLOY_KEY:${{ secrets.DEPLOY_KEY }}run:|sudo timedatectl set-timezone \u0026#34;Asia/Shanghai\u0026#34; mkdir -p ~/.ssh echo \u0026#34;$DEPLOY_KEY\u0026#34; \u0026gt; ~/.ssh/id_rsa chmod 600 ~/.ssh/id_rsa ssh-keyscan github.com \u0026gt;\u0026gt; ~/.ssh/known_hosts# 生成并部署- name:Deployrun:|npx hexo deploy --generate - name:Deploy Hexo to Serveruses:SamKirkland/FTP-Deploy-Action@4.1.0with:server:104.224.191.88username:adminpassword:${{ secrets.FTP_MIRROR_PASSWORD }}local-dir:./public/server-dir:/var/www/blog/ 第二种 PS：第二种比第一种慢。\n首先确认 _config.yml 文件中有类似如下的 GitHub Pages 配置：\ndeploy:type:gitrepo:github:git@github.com:iwyang/hexo.gitbranch:gh-pages配置私钥  首先在 GitHub 上打开保存 Hexo 的仓库，访问 Settings -\u0026gt; Secrets，然后选择 New secret; 名字部分填写：HEXO_DEPLOY_KEY，注意大小写，这个后面的 GitHub Actions Workflow 要用到; 在 Value 的部分填入 github-deploy-key 中的内容。  添加公钥  接下来我们需要访问存放网页的仓库，也就是 Hexo 部署以后的仓库，访问 Settings -\u0026gt; Deploy keys; 按 Add deploy key 来添加一个新的公钥； 在 Title中输入：HEXO_DEPLOY_PUB 字样，当然也可以填写其它自定义的名字; 在 Key 中粘贴 github-deploy-key.pub文件的内容。  创建 Workflow 在 Hexo 的仓库中创建一个新文件：.github/workflows/auto_deploy.yml，文件的内容如下:\nname:auto deploy# workflow name# 只监听 source 分支的改动on:push:branches:- developjobs:build:# job1 idruns-on:ubuntu-latest# 运行环境为最新版 Ubuntuname:auto deploysteps:- name:Checkout# step1 获取源码uses:actions/checkout@v1# 使用 actions/checkout@v1with:# 条件submodules:true# Checkout private submodules(themes or something else). 当有子模块时切换分支？- name:Setup Node.js 12.xuses:actions/setup-node@masterwith:node-version:\u0026#34;12.x\u0026#34;- name:Generate Public Filesrun:|npm i npm install hexo-cli -g hexo clean \u0026amp;\u0026amp; hexo generate- name:Deployuses:peaceiris/actions-gh-pages@v3with:deploy_key:${{ secrets.HEXO_DEPLOY_KEY }}external_repository:iwyang/hexopublish_branch:publicpublish_dir:./publiccommit_message:${{ github.event.head_commit.message }}user_name:\u0026#39;github-actions[bot]\u0026#39;user_email:\u0026#39;github-actions[bot]@users.noreply.github.com\u0026#39;- name:Deploy Hexo to Serveruses:SamKirkland/FTP-Deploy-Action@4.1.0with:server:104.224.191.88username:hexopassword:${{ secrets.FTP_MIRROR_PASSWORD }}local-dir:./public/server-dir:/var/www/hexo/github、gitee、服务器三线部署 name:Hexo Deploy# 只监听 source 分支的改动on:push:branches:- develop# 自定义环境变量env:POST_ASSET_IMAGE_CDN:truejobs:build-and-deploy:runs-on:ubuntu-lateststeps:# 获取博客源码和主题- name:Checkoutuses:actions/checkout@v2.3.4- name:Checkout theme repouses:actions/checkout@v2.3.4with:repository:jerryc127/hexo-theme-butterflyref:masterpath:themes/butterfly# 这里用的是 Node.js 14.x- name:Set up Node.jsuses:actions/setup-node@v2with:node-version:\u0026#39;14\u0026#39;# 设置 yarn 缓存，npm 的话可以看 actions/cache@v2 的文档示例- name:Get yarn cache directory pathid:yarn-cache-dir-pathrun:echo \u0026#34;::set-output name=dir::$(yarn cache dir)\u0026#34;- name:Use yarn cacheuses:actions/cache@v2.1.6id:yarn-cachewith:path:${{ steps.yarn-cache-dir-path.outputs.dir }}key:${{ runner.os }}-yarn-${{ hashFiles(\u0026#39;**/yarn.lock\u0026#39;) }}restore-keys:|${{ runner.os }}-yarn-# 安装依赖- name:Install dependenciesrun:|yarn install --prefer-offline --frozen-lockfile# 从之前设置的 secret 获取部署私钥- name:Set up environmentenv:DEPLOY_KEY:${{ secrets.DEPLOY_KEY }}run:|sudo timedatectl set-timezone \u0026#34;Asia/Shanghai\u0026#34; mkdir -p ~/.ssh echo \u0026#34;$DEPLOY_KEY\u0026#34; \u0026gt; ~/.ssh/id_rsa chmod 600 ~/.ssh/id_rsa ssh-keyscan github.com \u0026gt;\u0026gt; ~/.ssh/known_hosts# 生成并部署- name:Deployrun:|npx hexo deploy --generate - name:Deploy Hexo to Serveruses:SamKirkland/FTP-Deploy-Action@4.1.0with:server:104.224.191.88username:adminpassword:${{ secrets.FTP_MIRROR_PASSWORD }}local-dir:./public/server-dir:/var/www/blog/- name:Sync to Giteeuses:wearerequired/git-mirror-action@masterenv:# 注意在 Settings-\u0026gt;Secrets 配置 GITEE_RSA_PRIVATE_KEYSSH_PRIVATE_KEY:${{ secrets.GITEE_RSA_PRIVATE_KEY }}with:# 注意替换为你的 GitHub 源仓库地址source-repo:git@github.com:iwyang/iwyang.github.io.git# 注意替换为你的 Gitee 目标仓库地址destination-repo:git@gitee.com:iwyang/iwyang.git- name:Build Gitee Pagesuses:yanglbme/gitee-pages-action@mainwith:# 注意替换为你的 Gitee 用户名gitee-username:iwyang# 注意在 Settings-\u0026gt;Secrets 配置 GITEE_PASSWORDgitee-password:${{ secrets.GITEE_PASSWORD }}# 注意替换为你的 Gitee 仓库，仓库名严格区分大小写，请准确填写，否则会出错gitee-repo:iwyang/iwyang# 要部署的分支，默认是 master，若是其他分支，则需要指定（指定的分支必须存在）branch:master将hexo三线部署（由于部署hexo较慢，如果单独为gitee建立一个workflows，gitee会先部署完成，这样无法同步；hugo可以单独为gitee建立一个workflows，因为hugo部署到服务器会先于部署到gitee）\n推送到远端 配置Hexo的_config.yml deploy:type:gitrepo:github:git@github.com:iwyang/iwyang.github.io.gitbranch:mastername:iwyangemail:455343442@qq.com当然，具体步骤还是得根据自己的需求进行相应的修改。\n提交源码 今后只需备份源码到develop分支，gitbub action就会自动部署博客到iwyang.github.io仓库。\ngit initgit checkout -b developgit remote add origin git@github.com:iwyang/iwyang.github.io.gitgit add .git commit -m \u0026#34;备份源码\u0026#34;git push --force origin develop最终部署脚本 deploy.sh内容：\n#!/bin/bash  echo -e \u0026#34;\\033[0;32mDeploying updates to gitee...\\033[0m\u0026#34; # backup git config --global core.autocrlf false git add . git commit -m \u0026#34;site backup\u0026#34; git push origin develop --force 参考链接  使用 GitHub Actions 自动部署 Hexo 博客 GitHub Actions 实现 Hexo 自动部署  ","date":"2020-07-07T19:11:25+08:00","permalink":"/archives/hexo-github-actions/","title":"hexo利用Github Actions自动构建博客"},{"content":"初始化 GitHub 仓库 Github上新建一个名为iwyang.github.io的仓库。\n配置ACTIONS_DEPLOY_KEY 生成公钥 Windows 上安装 Git for Windows 之后在开始菜单里打开 Git Bash 输入：\ngit config --global user.name \u0026#34;你的用户名\u0026#34; git config --global user.email \u0026#34;你的电子邮箱\u0026#34; cd ~ mkdir .ssh cd .ssh ssh-keygen -t rsa 在系统当前用户文件夹下生成了私钥 id_rsa 和公钥 id_rsa.pub。\n上传id_rsa.pub 点击博客仓库的Settings-\u0026gt;Deploy keys-\u0026gt;add deploy key，Title填写ACTIONS_DEPLOY_KEY，Key填写id_rsa.pub文件的内容。\n上传id_rsa 点击博客仓库的Settings-\u0026gt;Secrets-\u0026gt;Add a new secret，Name填写ACTIONS_DEPLOY_KEY，Value填写id_rsa文件的内容。\n利用FTP-Deploy-Action上传文件 这里在Github actions里利用FTP-Deploy-Action上传文件到服务器。项目地址：SamKirkland/FTP-Deploy-Action\n首先是搭建ftp服务器。\n安装vsftpd sudo yum install vsftpd -y 安装软件包后，启动vsftpd，并使其能够在引导时自动启动：\nsudo systemctl start vsftpd sudo systemctl enable vsftpd 配置vsftpd vi /etc/vsftpd/vsftpd.conf 在userlist_enable=YES下面，加上：\nuserlist_file=/etc/vsftpd/user_list userlist_deny=NO 创建FTP用户  创建一个新用户，名为git:  sudo adduser git sudo passwd git  将用户添加到允许的FTP用户列表中：  echo \u0026#34;git\u0026#34; | sudo tee -a /etc/vsftpd/user_list  设置正确的权限  为了使ftp用户可以上传网站文件到相应目录：\nsudo chmod 755 /var/www/hexo sudo chown -R git: /var/www/hexo  重启vsftpd服务。  保存文件并重新启动vsftpd服务，以使更改生效：\nsudo systemctl restart vsftpd 配置FTP_MIRROR_PASSWORD 点击博客仓库的Settings-\u0026gt;Secrets-\u0026gt;Add a new secret，Name填写FTP_MIRROR_PASSWORD，Value填写用户密码。\n配置 Github actions 在博客根目录新建.github/workflows/gh_pages.yml文件。代码如下：\nname:GitHub Page Deployon:push:branches:- developjobs:build-deploy:runs-on:ubuntu-lateststeps:- name:Checkout masteruses:actions/checkout@v2.3.4with:submodules:true# Fetch Hugo themes (true OR recursive)fetch-depth:0# Fetch all history for .GitInfo and .Lastmod- name:Setup Hugouses:peaceiris/actions-hugo@v2.5.0with:hugo-version:\u0026#39;latest\u0026#39;extended:true- name:Build Hugorun:hugo --minify- name:Deploy Hugo to gh-pagesuses:peaceiris/actions-gh-pages@v3.8.0with:github_token:${{ secrets.GITHUB_TOKEN }}PUBLISH_BRANCH:masterPUBLISH_DIR:./public# cname:- name:Deploy Hugo to Serveruses:SamKirkland/FTP-Deploy-Action@4.1.0with:server:104.224.191.88username:gitpassword:${{ secrets.FTP_MIRROR_PASSWORD }}local-dir:./public/server-dir:/var/www/hexo/提交源码 初始化git，新建并切换到develop分支，将源码提交到develop分支。稍等片刻，github action会自动部署blog到master分支。\ngit init git checkout -b develop git remote add origin git@github.com:iwyang/iwyang.github.io.git git add . git commit -m \u0026#34;备份源码\u0026#34; git push --force origin develop 最终部署脚本 #!/bin/bash  echo -e \u0026#34;\\033[0;32mDeploying updates to gitee...\\033[0m\u0026#34; # backup git config --global core.autocrlf false git add . git commit -m \u0026#34;site backup\u0026#34; git push origin develop --force 本地操作 git clone -b develop git@github.com:iwyang/iwyang.github.io.git blog --recursive 因为使用Submodule管理主题，所以最后要加上 --recursive，因为使用 git clone 命令默认不会拉取项目中的子模块，你会发现主题文件是空的。（另外一种方法：git submodule init \u0026amp;\u0026amp; git submodule update）\n同步更新源文件 git pull 同步主题文件 git submodule update --remote 运行此命令后， Git 将会自动进入子模块然后抓取并更新，更新后重新提交一遍，子模块新的跟踪信息便也会记录到仓库中。这样就保证仓库主题是最新的。\n服务器通过git拉取更新 2021.8.15 已经不用此方法，现在直接在Github actions利用FTP-Deploy-Action上传文件到服务器。\n克隆仓库 rm -rf /var/www/hexo git clone git@github.com:iwyang/iwyang.github.io.git /var/www/hexo 出现问题 执行上一步可能会出现问题： Permission denied (publickey). Could not read from remote repository。\n解决方法：\n服务器生成ssh key yum install rsync -y ssh-keygen -t rsa -C \u0026#34;455343442@qq.com\u0026#34; 一路回车即可，会生成你的ssh key。然后再终端下执行命令：\nssh -v git@github.com 这时会报错，最后两句是：\nNo more authentication methods to try. Permission denied (publickey). 在终端再执行以下命令：\nssh-agent -s 接着在执行:\nssh-add ~/.ssh/id_rsa 出现问题：Could not open a connection to your authentication agent.\n解决方法：使用：ssh-agent bash 命令，然后再次使用ssh-add ~/.ssh/id_rsa_name这个命令就没问题了。(注意：Identity added: \u0026hellip;这是ssh key文件路径的信息，如/.ssh/id_rsa)\n配置github 打开你刚刚生成的id_rsa.pub，将里面的内容复制，进入你的github账号，在settings下，SSH and GPG keys下new SSH key，然后将id_rsa.pub里的内容复制到Key中，完成后Add SSH Key。\n验证Key ssh -T git@github.com 设置crontab定时任务： crontab -e */5 * * * * git -C /var/www/hexo pull 这样只要提交源码给github，github action就会帮你部署博客到github page，服务器通过git pull定时拉取更新。换台电脑不用再搭建环境，直接在gtihub新建或者修改文章，剩下的工作就交给github action。注意回本地电脑先git pull拉取更新，再提交源码。\n注意：好像先要从源码仓库clone一份源码到本地，才能利用git pull拉取github已有的更新。只有先拉取github已有的更新，再在本地提交源码，github上的更新才不会被删除。\n附：使用Git Submodule管理Hugo主题  如果克隆库的时候要初始化子模块，请加上 --recursive 参数，如：  git clone -b develop git@github.com:iwyang/iwyang.github.io.git blog --recursive  如果已经克隆了主库但没初始化子模块，则用：  git submodule update --init --recursive  如果已经克隆并初始化子模块，而需要从子模块的源更新这个子模块，则：  git submodule update --recursive --remote 更新之后主库的 git 差异中会显示新的 SHA 码，把这个差异选中提交即可。\n  其他命令：在主仓库更新所有子模块：git submodule foreach git pull origin master  参考链接  1.使用Github Actions自动编译部署基于hugo的博客 2.用 Hugo 自动构建 搭建 GitHub Pages 3.使用 GitHub Action 自动部署博客到远程服务器 4.使用 GitHub Actions 实现博客自动化部署 5.解决git@github.com: Permission denied (publickey). Could not read from remote repository 6.GIT 子模块 7.子模块  ","date":"2020-07-06T17:19:19+08:00","permalink":"/archives/hugo-github-actions/","title":"hugo利用Github Actions自动构建博客"},{"content":" 数一数有几个长方形 \n 数一数有几个正方形 \n 数一数有几个三角形 \n思路： 以最后一个数三角形有几个为例：\n 数一数有几个三角形 \n 首先给小三角形编号：1号、2号、3号。 先数小三角形有几个：3个 再数中型三角形（ 把两个小三角形看作一个中型三角形）有几个：1号和2号是一个，2号和3号是一个，合起来是2个。 大三角形有1个。 所以一共有：3+2+1=6（个）  总结： 感觉还是做个flash动画直观一些。\n参考链接：   1.怎么数一数到底有几个三角形，一年级数学认识图形\n  2.一年级下数学：如何教孩子数图形的个数，才不会漏数呢？\n  3.一年级数学-巧数图形\n  ","date":"2020-06-29T14:10:25+08:00","permalink":"/archives/first-grade-math-shu-tu-xing/","title":"一年级数学下册数图形有几个"},{"content":"这里以Excel 2019为例。\n 首先选中表格相应区域。 依次选择开始—条件格式—突出显示单元格规则—重复值。  重复的单元格会突出显示，修改重复项后，突出显示自动消失。\n参考链接：excel一列中如何找出重复的数据？\n","date":"2020-06-29T13:54:25+08:00","permalink":"/archives/excel-find-repeat/","title":"Excel查找重复项"},{"content":" 以下为第一单元试卷，共三张。其他单元试卷在网盘里。\n  第一张 \n 第二张 \n 第三张 \n","date":"2020-06-17T14:50:25+08:00","permalink":"/archives/xue-lian-you-shi-juan/","title":"一年级数学下册学练优单元测评卷"},{"content":"笔记本换SSD后，原来机械硬盘没用了。这时可以将原来的硬盘改成移动硬盘。方法是买一个移动硬盘盒子。下面着重记一下在移动硬盘安装PE的方法。\n1.用DiskGenius给移动硬盘分区：新建一个5G大小的FAT32格式的分区，用来安装PE；硬盘其他空间新建一个NTFS格式的分区，用来存放文件。\n2.打开微PE工具箱，右下角选择安装PE到移动硬盘，第一主分区选择刚才建立的FAT32分区，然后点击立即安装进移动硬盘。\n3.将操作系统等相关文件复制到FAT32分区里，便于安装系统使用。\n","date":"2020-06-16T13:51:25+08:00","permalink":"/archives/usb3-ying-pan/","title":"笔记本硬盘改移动硬盘\u0026分区安装PE"},{"content":"使用方法：\n1.首先安装SpleeterGUI_v2.5.msi，安装到任意位置即可。\n2.然后进入训练模型目录，以管理员模式运行安装SpleeterGUI之后右键管理员模式运行这个.bat。最后相应文件夹会被拷贝到C:\\Users\\Admin\\AppData\\Roaming目录下，如果卸载该软件，也要手动删除此文件夹。\n总结：此软件除了消音乐伴奏外，还可以去视频（例如MTV）里的人声。\n","date":"2020-06-15T13:09:25+08:00","permalink":"/archives/ren-sheng-fen-li/","title":"人声伴奏分离分离神器：Spleeter GUI_v2.5"},{"content":" 第一张 \n 第二张 \n 1.第一题第2题。 求的是65与7的和是多少？差是多少？ 和：65+7=72 差：65-7=58 2.第一题第4题。 ①比35大12的数是多少？ 求的是“较大数”，用加法：35+12=47 ②35比12大多少？ 求的是“多多少”，用减法：35-12=23 3.第一题第6题。 已经看了19页，接下来就从第20页开始看起。 19+1=20（页） 4.第一题第7题。 括号里最大填几，分两步计算。 （1）29+（ ）＜46 ①先想比46小1的数是几，46-1=45，是45。 ②再想29加几等于45，45-29=16，答案是16。 （2）42-（ ）＞2 ①先想比2大1的数是几，2+1=3，是3。 ②再想42减几等于3，42-3=39，答案是39。 5.第二题第3题。 100减去一个两位数，差可能是两位数，也可能是一位数。例如100-20=80 100-99=1。 6.第二题第5题。 两个加数都比50小，它们最大只能同时为49，49+49=98，和最大是98，比100小。 7.第三题第5题。 由题意可知： ①小亮比小红多收集17张。 ②小东比小红多收集25张。 所以小东收集的最多。 8.第七题第4题，提数学问题要带数量词。  ","date":"2020-06-11T22:05:25+08:00","permalink":"/archives/first-grade-math-xia-unit6/","title":"一年级数学下册第六单元《加与减(三)》试卷错题集"},{"content":" 第一张 \n 第二张 \n 1.第一题第6小题。 先求出这个整十数，80-50=30； 再求正确结果，50-30=20 2.第二题第5小题。 两位数减两位数，结果可能是两位数，也可能是一位数。 3.第三题第3小题。 先求出这个数：45-20=25 再求这个数减去20的结果：25-20=5 4.第三题第4小题。 最大的两位数是99，最小的两位数是10。两者相差：99-10=89 5.第七题第2（3）题。 算式49-16解决的问题是“一辆玩具汽车比一个皮球贵多少元”。 6.第七题第4小题。 这是一道比多比少问题。本张试卷这类问题有很多。这类问题有三种情况。 （1）求多多少、少多少用减法。 （2）求较大数，用加法。 （3）求较小数，用减法。 女同学比男同学少多，反过来说男同学就比女同学少，求男同学有多少人，求的是“较小数”，要用减法。 7.最后一题见参考答案。  ","date":"2020-06-10T22:41:25+08:00","permalink":"/archives/first-grade-math-xia-unit5/","title":"一年级数学下册第五单元《加与减(二)》试卷错题集"},{"content":"排队问题在一年级数学试卷中经常遇到，现总结如下：\n题型一  一列队伍里有17人，笑笑的前面有9人，后面有几人？\n 17-9-1=7(人) 答：后面有7人。 分析：此题可以通过画图来理解题意：\n \n题型二  45人排队，从前往后数小明排第20个，从后往前数，小明排在第几个？\n 45-20=25(人) 25+1=26(个) 答：小明排在第26个。 分析：从前往后数小明排第20个，那么小明后面就有：45-20=25(人)，从后往前数小明就排第26个：25+1=26(个)\n题型三  同学们排队体检，小明的前面有17人，后面有19人，这队共有多少人？\n 17+19+1=37(人)。 答：这队共有37人 分析：注意还要加上小明他自己，也可借助画图来理解题意。\n题型四 小明排第9，小英排第16，小明和小英之间有几人？\n16-9-1=6（人） 答：小明和小英之间有6人。 分析：从问题着手，问的是他们俩中间有几人，不包含他们俩，16减9只是去掉了他们其中一人，再减一是去掉另外一人\n（求间距都要减1 例如第9和第10之间没有间距，10-9-1=0，也是这个公式 如果算两端就要加2，这样就是加一，间距不算两端，是减一）\n","date":"2020-06-10T12:07:36+08:00","permalink":"/archives/first-grade-math-pai-dui/","title":"一年级数学排队问题总结"},{"content":" 第一张 \n 第二张 \n错题集：\n  1.第一题第6小题。 七巧板是由3种图形组成，其中有1个正方形，1个平行四边形，5个三角形。\n  2.第一题第7小题。\n ①要拼成一个大正方形至少需要4个完全相同的小正方形。 ②要拼成一个大正方体至少需要8个完全相同的小正方体。    3.第一题第9小题。 两个同样大小的直角三角形可以拼成一个长方形、三角形、平行四边形。\n  4.判断题第1题。 长方形对边相等，且四个角都是直角。有四条边只能说是四边形，不一定是长方形。\n  5.判断题第2题。 只有两个同样大小的直角三角形才能拼成一个大三角形。（这种说法是错误的）\n \n  6.判断题第3题。\n  只有把一个等腰三角形对折才能得到两个完全相同的三角形。\n  7.判断题第4题。 将一张正方形纸对折两次，能折成4个正方形或者4个三角形。\n  ","date":"2020-06-09T21:52:25+08:00","permalink":"/archives/first-grade-math-xia-unit4/","title":"一年级数学下册第四单元《有趣的图形》试卷错题集"},{"content":" 第一张 \n 第二张 \n 1.第三题第6小题。 将一列数从小到大排列要用小于号连接起。 2.第三题第9小题。 从右起第二位是十位，第三位是百位。 3.第三题第10小题。 看清题目，是从三张卡片选两张，组成两位数。 4.第三题第11小题、第六题第2小题。 两数之间不包括两边的数。 5.看题要仔细，个位、十位不要看错，搞混淆了。  ","date":"2020-06-08T21:39:25+08:00","permalink":"/archives/first-grade-math-xia-unit3/","title":"一年级数学下册第三单元《生活中的数》试卷错题集"},{"content":"   练习1          64+8= 35-16= 60-48= 53+18= 34+37= 100-83=   21+59= 40-25= 46+46= 91-29= 61-43= 79+12=   练习2        41-23= 6+69= 84-69= 36+55= 80-35= 28+28=   28+24= 91-43= 59+39= 79+11= 100-48= 51-23=   练习3        44+29= 97-18= 48+42= 90-59= 100-56= 95-18=   67-8= 28+56= 74-26= 45+49= 37+16= 97-29=   练习4        64-15= 26+65= 87+8= 62-35= 66+6= 93-45=   23+19= 82-66= 31-13= 14+76= 100-68= 13+69=   练习5        55+19= 80-53= 43+37= 65-48= 100-31= 29+34=   47-18= 38+39= 92-23= 7+69= 28+15= 91-19=   练习6        54-38= 25+56= 66-18= 19+51= 55+29= 31-12=   25+18= 62-26= 53+17= 47+47= 100-39= 53-8=   练习7        49+8= 93-55= 37+13= 16+28= 100-19= 24+49=   90-22= 35+48= 82-15= 93-76= 63+29= 73-15=   练习8        59+15= 5+58= 41-14= 92-53= 58+33= 73-19=   80-11= 31-16= 38+28= 17+57= 100-61= 18+44=   练习9        43-8= 19+33= 54+18= 91-45= 46+44= 60-18=   75+15= 51-15= 74-38= 47+48= 100-34= 29+56=   练习10        78+18= 12+28= 70-39= 15+15= 100-47= 95-67=   66-19= 55-17= 19+15= 70-42= 84+7= 13+49=   练习11        8+77= 52-38= 78+16= 93-68= 14+29= 80-47=   83-28= 16+47= 42-18= 36+36= 100-29= 57+16=   练习12        39+19= 80-52= 59+33= 93-26= 33+17= 63-38=   81-28= 27+65= 97-9= 29+64= 100-59= 15+48=   练习13        49+48= 36+58= 76-19= 37-18= 39+15= 60-34=   80-18= 85-69= 39+4= 25+65= 100-44= 14+28=   练习14        87-28= 62+28= 54+16= 91-38= 42+19= 42-13=   9+62= 90-57= 31-14= 35+56= 100-15= 28+63=   练习15        37+23= 14+57= 71-13= 80-12= 47+35= 71-47=   62-38= 77+16= 17+63= 75-8= 100-32= 19+26=   练习16        76-29= 72-45= 19+78= 45+9= 100-57= 25+35=   39+13= 27+68= 70-15= 80-55= 49+17= 48-29=   练习17        38+34= 24+27= 92-57= 63-26= 100-21= 6+88=   90-47= 63-14= 34+19= 26+44= 48+25= 81-23=   练习18        62-19= 19+64= 50-27= 39+55= 75+17= 83-46=   27+16= 84-7= 67+13= 71-46= 100-12= 27+43=   练习19        54+38= 17+29= 93-58= 80-24= 68+16= 91-68=   72-17= 68+26= 55-8= 28+43= 100-73= 12+78=   练习20        81-42= 74-37= 44+48= 17+27= 48+27= 55-29=   38+32= 37+58= 30-14= 81-34= 100-72= 75+8=   练习21        45+39= 55-18= 74+18= 75-39= 77+13= 70-12=   84-46= 38+42= 75-16= 8+68= 100-54= 13+19=   练习22        72-39= 27+55= 56+26= 62-39= 49+11= 60-15=   63+27= 71-35= 53-17= 9+57= 100-24 16+18=   练习23        12+29= 73-35= 39+11= 38+45= 88-49= 40-21=   90-17= 24+67= 39+34= 74+7= 100-65= 91-13=   练习24        88-19= 79+16= 17+28= 91-32= 21+29= 85-36=   84-9= 27+27= 90-53= 37+35= 100-27 66+28=   练习25        56+38= 70-35= 55+26= 80-44= 18+17= 78-19=   19+48= 91-15= 38+8= 36-18= 100-78= 34+46=   练习26        74-16= 47+49= 68+18= 61-13= 56+15= 94-65=   23+17= 62-45= 62-4= 21+69= 100-85= 29+49=   练习27        5+29= 28+26= 80-49= 41-25= 47+39= 56-19=   18+32= 26+35= 53-25= 48+34= 100-66= 87-29=   练习28        65-39= 18+63= 76-58= 17+68= 34+17= 70-36=   57+6= 33-16= 47+37= 75-17= 100-74= 37+48=   练习29        95-38= 11+59= 56+16= 93-49= 58+14= 70-23=   89+7= 83-54= 41-13= 15+66= 100-81= 36+59=   练习30        57+15= 15+17= 61-14= 82-28= 47+15= 46-27=   12+18= 87-9= 76-38= 46+49= 100-77= 44+16=   练习31        98-19= 23+57= 39+24= 40-23= 64+28= 84-66=   45+28= 85-9= 91-69= 15+78= 100-86= 16+49=   练习32        48+22= 63-44= 39+17= 54-17= 48+32= 91-16=   82-14= 28+47= 51-29= 5+38= 100-41= 29+46=   练习33        96-57= 14+26= 49+26= 44-19= 14+78= 82-25=   67+29= 54-18= 50-25= 29+39= 100-26= 59+9=   练习34        36+29= 98-29= 51-33= 25+45= 59+37= 92-35=   81-43= 8+25= 58+26= 83-15= 100-45= 23+49=   练习35        61-44= 37+56= 58+24= 87-18= 69+17= 86-19=   64+16= 18+45= 64-47= 44-7= 100-33= 27+69=   练习36        27+54= 73-26= 44+28= 91-48= 61+29= 81-59=   33+38= 53-14= 60-22= 55+6= 100-38= 17+54=   练习37        97-58= 27+46= 76-39= 59+38= 67+25= 83-56=   60-14= 36+56= 9+37= 36+19= 100-69= 95-39=   练习38        65+17= 42-16= 49+33= 80-29= 47-19= 26+66=   36+14= 94-5= 17+24= 61-46= 100-35= 28+34=   练习39        91-17= 18+47= 59+13= 65-38= 16+48= 93-59=   48+14= 66+8= 94-37= 38+49= 100-53= 91-52=   练习40        82-23= 36+47= 50-22= 37+49= 55+35= 83-57=   71-12= 61-39= 34+57= 73+18= 100-18= 46+8=   练习41        28+27= 80-28= 66+25= 32-14= 37+25= 72-47=   88-9= 28+33= 58-29= 15+27= 100-88= 16+74=   练习42        71-19= 27+58= 36+27= 93-14= 22+18= 71-48=   80-58= 38+26= 33-14= 7+76= 100-46= 14+67=   练习43        43+39= 95-26= 57+28= 32-16= 49+21= 53-27=   93-65= 19+24= 60-17= 9+55= 100-13= 16+76=   练习44        96-17= 28+37= 52-18= 36+45= 56+14= 90-32=   77+15= 51-39= 81-44= 67+9= 100-58= 29+59=   练习45        46+28= 27+49= 94-18= 53-35= 24+16= 64-19=   33-18= 14+69= 44+27= 96-9= 100-63= 14+59=   练习46        77-18= 25+36= 41+29= 94-59= 77+19= 98-49=   35+46= 67-29= 70-57= 88+5= 100-49= 18+55=   练习47        39+39= 81-13= 16+46= 57+27= 93-54= 42-25=   60-13= 41-22= 6+87= 38+23= 100-87= 16+34=   练习48        93-66= 35+39= 79+15= 74-25= 64+18= 96-48=   51+39= 90-34= 19+75= 44-9= 100-67= 14+77=   练习49        68+19= 92-34= 74+19= 71-45= 45+29= 53-24=   21+39= 90-52= 19+73= 34+49= 100-75= 65-8=   练习50        90-18= 16+65= 52-26= 82-44= 37+15= 49+35=   90-45= 87-48= 35+15= 9+43= 100-84= 17+59=   练习51        54+36= 93-24= 67+27= 38-19= 48+38= 85-47=   84-48= 17+78= 56-29= 19+38= 100-42= 7+58=   练习52        52-27= 24+46= 69+12= 52-36= 27+18= 91-47=   37+29= 77-19= 90-26= 7+49= 100-37= 39+46=   练习53        41+19= 93-18= 42+29= 82-53= 67+16= 81-19=   97-8= 25+69= 64-37= 18+39= 100-89= 17+64=   练习54        64-18= 19+76= 85-18= 12+49= 91-54= 13+17=   65+8= 71-39= 29+16= 40-29= 100-43= 58+38=   练习55        37+38= 60-33= 38+18= 85-19= 48+46= 80-19=   48+9= 82-19= 72-46= 15+29= 100-82= 29+52=   练习56        86-57= 15+38= 65+19= 34-17= 66+17= 36-19=   73-5= 33+29= 83-44= 24+26= 100-14= 18+12=   练习57        47+45= 63-17= 68-49= 13+38= 61-24= 16+39=   93-57= 9+89= 32+28= 80-14= 100-25= 67+17=   练习58        77-49= 41+49= 17+26= 73-36= 29+25= 83-18=   56+8= 93-46= 29+28= 90-66= 100-28= 27+64=   练习59        48+28= 82-46= 35+17= 90-23= 68+24= 52-29=   71-55= 15+26= 29+32= 92-4= 100-51= 43+49=   练习60        81-57= 45+16= 82-45= 13+79= 65-19= 12+38=   7+68= 73-17= 41+39= 51-19= 100-76= 48+24=   练习61        35+19= 64-28= 39+28= 72-29= 71+19= 75-19=   96-68= 27+47= 91-62= 25+59= 100-36= 8+78=   练习62        75-57= 26+54= 53+19= 67-18= 59+24= 51-25=   45-8= 34+27= 97-69= 25+58= 100-22= 29+48=   练习63        37+14= 64-29= 52+18= 44-18= 66+29= 66-27=   86-28= 18+28= 74-56= 28+35= 100-16= 9+56=   练习64        51-16= 33+37= 91-67= 26+59= 59+27= 71-22   49+42= 60-24= 35+6= 64-25= 100-71= 32+49=   练习65        72-8= 15+25= 92-46= 29+62= 71-37= 18+43=   19+16= 80-21= 48+12= 71-18= 17+83= 91-12=   练习66        23+18= 52-28= 69+15= 91-36= 75-6= 28+23=   90-11= 43+48= 98-59= 35+45= 52+48= 56-28=   练习67        73-29= 18+79= 90-48= 31+59= 53-37= 29+68=   59+8= 84-56= 48+26= 94-49= 44+56= 18+77=   练习68        49+15= 91-65= 18+13= 90-14= 90-62= 45+48=   42-19= 16+66= 95-8= 27+35= 32+68= 82-13=   练习69        74-19= 77-39= 80-43= 76-7= 43-28= 63-34=   29+18= 27+53= 69+23= 17+48= 69+31= 19+72=   练习70        38+16= 81-56= 48+18= 70-19= 84-29= 8+45=   43-18= 26+36= 70-53= 12+19= 61+39= 94-47=   练习71        57-8= 83-48= 50-13= 44-28= 92-29= 73-49=   68+22= 38+55= 67+15= 17+76= 81+19= 15+58=   练习72        74-15= 63-5= 66-28= 74-17= 91-58= 62-44=   69+11= 15+16= 27+14= 39+53= 39+61= 54+19=   练习73        35+8= 52-33= 38+36= 95-48= 66+34= 85-29=   90-15= 15+36= 72-18= 45+46= 90-46= 18+42=   练习74        96-18= 17+38= 34-15= 28+42= 91-7= 28+67=   47+19= 40-28= 39+31= 30-15= 53+47= 62-49=   练习75        55+28= 63-47= 24+18= 72-36= 71+29= 73-57=   85-8= 14+38= 94-16= 25+68= 43-14= 33+47=   练习76        58-39= 28+52= 92-59= 67+26= 50-17= 38+25=   53+28= 92-27= 9+88= 93-64= 41+59= 63-48=   练习77        19+11= 94-36= 57+19= 90-25= 56+44= 42-14=   97-49= 16+69= 43-4= 18+19= 54-39= 24+36=   练习78        71-9= 33+57= 70-16= 38+53= 85+15= 91-28=   59+28= 90-68= 17+14= 91-35= 61-42= 13+29=   练习79        38+24= 71-57= 68+12= 80-63= 68+32= 45-19=   60-23= 13+58= 93-16= 67+8= 82-35= 24+47=   练习80        52-13= 27+45= 97-19= 25+55= 66-17= 29+19=   47+29= 95-27= 55+15= 54-9= 43+57= 60-25=   练习81        47+43= 51-24= 26+37= 70-44= 79+21= 94-6=   72-38= 14+49= 55+37= 53-19= 73-25= 58+23=   练习82        43-27= 7+77= 80-13= 25+46= 92-17= 37+46=   43+19= 83-64= 27+23= 94-55= 88+12= 70-43=   练习83        55+17= 46-17= 47+8= 71-43= 27+73= 90-78=   92-54= 35+58= 94-26= 24+56= 84-16= 23+68=   练习84        70-38= 37+37= 83-8= 34+47= 75-27= 29+26=   42+39= 95-37= 16+14= 92-48= 28+72= 44-17=   练习85        46+38= 80-38= 59+16= 76-8= 46+54= 32-13=   84-45= 18+37= 92-18= 36+39= 90-77= 58+12=   练习86        90-63= 35+36= 82-26= 23+39= 60-49= 15+45=   39+33= 82-27= 36+17= 66-9= 76+24= 34-18=   练习87        73+17= 81-7= 39+49= 83-45= 35+65= 91-24=   41-12= 21+19= 50-11= 38+35= 73-34= 13+78=   练习88        54-27= 69+19= 45-28= 32+59= 50-21= 36+49=   9+75= 95-16= 53+37= 72-37= 73+27= 94-66=   练习89        35+35= 67-19= 19+59= 80-34= 22+78= 46-8=   94-56= 44+36= 81-55= 18+18= 35-18= 76+15=   练习90        40-17= 17+45= 86-68= 13+48= 15+85= 78-49=   58+16= 96-49= 58+4= 90-21= 71-56= 65+29=   练习91        25+16= 54-28= 28+25= 50-32= 34+66= 61-35=   34-5= 19+37= 82-34= 31+49= 86-39= 58+29=   练习92        63-6= 81-63= 84-37= 85-17= 51-34= 85-48=   39+26= 16+17= 58+18= 17+58= 26+74= 36+34=   练习93        57+38= 70-59= 28+13= 81-15= 19+81= 95-59=   96-7= 29+54= 72-16= 44+49= 72-58= 47+23=   练习94        72-15= 9+78= 60-44= 27+19= 62-47= 47+14=   54+28= 32-15= 38+38= 30-12= 23+77= 95-46=   练习95        19+79= 80-23= 69+22= 93-78= 14+86= 65-16=   73-45= 76+9= 63-24= 13+27= 92-64= 66+18=   练习96        70-48= 19+44= 56-39= 17+37= 80-48= 16+75=   68+14= 75-28= 29+22= 43-5= 59+41= 75-29=   练习97        57+39= 40-14= 25+25= 68-29= 74+26= 68-9=   96-67= 18+36= 75-49= 19+25= 92-14= 25+57=   练习98        65-36= 29+69= 84-58= 15+68= 96-59= 35+57=   43+38= 33-8= 33+18= 70-25= 55+45= 72-23=   练习99        44+17= 93-56= 47+17= 96-27= 67+33= 63-18=   80-64= 19+67= 82-24= 7+37= 86-69= 18+69=   练习100        61-6= 14+39= 72-28= 33+48= 90-29= 26+47=   59+22= 71-17= 38+22= 81-54= 62+38= 71-33=   练习101        46+14= 73-46= 39+37= 97-59= 31+69= 92-56=   55-19= 27+56= 46-9= 39+58= 92-25= 56+39=   练习102        82-17= 29+51= 82-33= 15+46= 50-14= 16+26=   28+19= 92-66= 89+5= 41-24= 65+35= 62-34=   练习103        74+17= 65-47= 57+37= 87-49= 47+53= 74-8=   62-14= 34+59= 72-13= 27+38= 64-16= 52+39=   练习104        54-8= 22+39= 91-18= 22+28= 90-55= 23+59=   59+12= 83-47= 57+26= 86-49= 82+18= 91-34=   练习105        79+9= 90-16= 29+29= 61-28= 12+88= 42-15=   55-28= 14+18= 91-66= 47+25= 62-25= 62+18=   练习106        64-38= 19+52= 63-27= 14+79= 40-22= 23+48=   58+22= 85-27= 19+14= 83-7= 54+46= 81-14=   练习107        65+28= 43-19= 43+17= 64-9= 87+13= 92-76=   82-39= 26+69= 85-57= 16+16= 70-21= 26+27=   练习108        92-15= 12+39= 76-9= 18+34= 70-14= 58+32=   79+17= 65-37= 44+37= 81-45= 42+58= 88-59=   练习109        18+15= 76-27= 76+18= 83-14= 37+63= 73-59=   74-46= 18+35= 71-27= 9+87= 40-24= 45+19=   练习110        93-5= 29+38= 70-41= 18+59= 96-19= 49+49=   59+35= 61-36= 57+13= 81-46= 51+49= 73-55=   练习111        47+13= 62-46= 68+13= 84-27= 13+87= 50-16=   78-39= 19+22= 93-6= 39+54= 61-23= 25+17=   练习112        90-51= 34+56= 94-15= 35+9= 82-18= 49+25=   66+27= 74-39= 48+48= 91-77= 33+67= 94-75=   练习113        52+38= 83-49= 58+34= 60-21= 25+75= 92-19=   87-19= 24+29= 93-19= 26+45= 74-45= 8+57=   练习114        84-49= 39+48= 50-15= 44+38= 52-37= 45+45=   72+18= 81-16= 26+26= 52-9= 16+84= 76-59=   练习115        48+36= 95-17= 29+27= 57-19= 58+42= 65-7=   90-54= 24+69= 94-67= 19+19= 86-38= 38+47=   练习116        66-37= 19+58= 81-12= 44+47= 45-18= 16+36=   27+25= 56-7= 64+26= 85-46= 63+37= 70-46=   练习117        89+8= 57-39= 37+27= 81-64= 11+89= 94-25=   60-19= 19+62= 71-29= 18+75= 83-16= 53+29=   练习118        73-8= 32+39= 45-29= 11+29= 96-58= 37+54=   46+18= 95-19= 67+18= 61-49= 57+43= 30-13=   练习119        33+27= 75-38= 46+26= 44-15= 18+82= 81-52=   57-9= 19+63= 56-18= 19+66= 94-46= 61+19=   练习120        62-33= 57+29= 84-19= 17+17= 83-17= 17+19=   5+68= 53-15= 44+39= 50-26= 86+14= 81-62=   练习121        57+36= 98-9= 49+19= 51-13= 75+25= 55-16=   92-45= 17+46= 60-32= 14+66= 84-67= 24+37=   练习122        64-8= 46+47= 43-17= 24+66= 54-29= 18+65=   49+28= 90-41= 37+36= 57-28= 72+28= 91-64=   练习123        16+55= 61-29= 46+36= 41-15= 49+51= 92-49=   76-48= 88+4= 52-17= 23+67= 92-24= 29+23=   练习124        75-7= 17+56= 80-41= 19+32= 72-48= 46+19=   57+24= 61-16= 45+37= 92-13= 24+76= 50-12=   练习125        68+28= 74-27= 62+29= 84-25= 64+36= 86-8=   54-19= 28+36= 67-39= 29+43= 90-19= 19+56=   练习126        61-34= 57+18= 72-19= 18+49= 83-24= 25+26=   8+37= 80-26= 69+28= 83-58= 78+22= 77-48=   练习127        58+28= 46-28= 56+18= 63-35= 84+16= 65-9=   51-14= 29+35= 70-52= 18+26= 95-29= 27+39=   练习128        91-49= 70-33= 41-6= 85-59= 86-27= 81-49=   35+16= 26+34= 77+17= 25+39= 29+71= 49+22=    ","date":"2020-06-07T20:24:25+08:00","permalink":"/archives/100-jia-jian-fa/","title":"100以内加减法计算题"},{"content":"安装vsftpd sudo yum install vsftpd -y 安装软件包后，启动vsftpd，并使其能够在引导时自动启动：\nsudo systemctl start vsftpd sudo systemctl enable vsftpd 配置vsftpd vi /etc/vsftpd/vsftpd.conf 要仅允许某些用户登录FTP服务器，需要在userlist_enable=YES下面，加上：\nuserlist_file=/etc/vsftpd/user_list userlist_deny=NO 启用此选项后，您需要通过将用户名添加到/etc/vsftpd/user_list文件（每行一个用户）来明确指定哪些用户可以登录。\n完成编辑后，vsftpd配置文件应如下所示：\nanonymous_enable=NO local_enable=YES write_enable=YES local_umask=022 #anon_upload_enable=YES #anon_mkdir_write_enable=YES dirmessage_enable=YES xferlog_enable=YES connect_from_port_20=YES #chown_uploads=YES #chown_username=whoever #xferlog_file=/var/log/xferlog xferlog_std_format=YES #idle_session_timeout=600 #data_connection_timeout=120 #nopriv_user=ftpsecure #async_abor_enable=YES #ascii_upload_enable=YES #ascii_download_enable=YES #ftpd_banner=Welcome to blah FTP service. #deny_email_enable=YES #banned_email_file=/etc/vsftpd/banned_emails #chroot_local_user=YES #chroot_list_enable=YES #chroot_list_file=/etc/vsftpd/chroot_list #ls_recurse_enable=YES listen=NO listen_ipv6=YES pam_service_name=vsftpd userlist_enable=YES userlist_file=/etc/vsftpd/user_list userlist_deny=NO 重启vsftpd服务 保存文件并重新启动vsftpd服务，以使更改生效：\nsudo systemctl restart vsftpd 设置防火墙 最直接方法关闭防火墙。\n创建FTP用户 创建一个新用户，名为admin:\nsudo adduser admin sudo passwd admin 将用户添加到允许的FTP用户列表中：\necho \u0026#34;admin\u0026#34; | sudo tee -a /etc/vsftpd/user_list 设置正确的权限：\nsudo chmod 750 /home/admin sudo chown -R admin: /home/admin 如果遇到文件无法下载，可能需要更改文件所属用户组，例如：\nchown admin 文件名 修改vsftpd的默认根目录 vi /etc/vsftpd/vsftpd.conf 加入如下几行：\nlocal_root=/var/www/html anon_root=/var/www/html 注：local_root 针对系统用户；anon_root 针对匿名用户，如果禁止匿名登录，不用加此项。网上说还要加上chroot_local_user=YES，加上此项后根本无法登陆。\n重新启动服务：\nsudo systemctl restart vsftpd 任何一个用户ftp登录到这个服务器上都会chroot到/var/www/html目录下。\n参考链接   1.如何在CentOS 7上使用VSFTPD设置FTP服务器\n  2.基于 CentOS 搭建 FTP 文件服务\n  ","date":"2020-06-06T19:34:25+08:00","permalink":"/archives/centos8-enable-ftp/","title":"centos8搭建ftp服务器"},{"content":"配置gitee 新建公共仓库 新建一个公共仓库，例如我建的仓库地址：https://gitee.com/iwyang/pics，注意一定要勾选使用Readme文件初始化这个仓库，否则后面会无法上传图片。\n获取私人令牌 依次点击右上角设置—私人令牌，在私人令牌描述中写上便于你了解该令牌用处的文字，并勾选需要的权限，PicGo要使用的私人令牌只需要user_info和projects权限，勾选上后提交，gitee将会返回私人令牌的token，保存该token，因为该token只会出现一次，离开页面过后再不会出现。\n安装\u0026amp;配置PicGo 安装PicGo 访问PicGo Releases直接下载你的操作系统对应的安装包并完成安装。\n 注：在安装的时候安装目录千万不能选C:\\Program Files\\下的任何地方，因为PicGo无法解析这一路径，如果你不知道安装在哪里的话，选择仅为我安装，否则在设置Typora时会出现错误。\n 配置PicGo 在PicGo设置里作如下修改：\n设置日志文件：日志记录等级选择\u0026#34;错误-Error\u0026#34;和\u0026#34;提醒-Warn\u0026#34; 时间戳重命名：开 开启上传提示：开 上传后自动复制URL：开 选择显示的图床：只勾选githubPlus 安装npm 由于PicGo的插件需要使用npm进行安装，如果你的电脑上没有安装npm，那么你是无法安装PicGo插件的，而我们接下来要使用一个额外的插件获得gitee支持，所以在此之前先完成npm的安装。访问node.js的官网，根据官网的指导下载并安装node.js。安装为了解决npm速度过慢问题，需更换镜像源：\nnpm config set registry https://registry.npm.taobao.org 安装github-plus插件 运行PicGo，单击插件设置，在搜索中输入github，安装搜索结果中的github-plus。\n配置ithub-plus插件 repo:iwyang/picsbranch:mastertoken:输入私人令牌customUrl:不用填origin:gitee 上传和管理图片   单击上传区，选择链接格式，使用点击上传或剪贴板图片上传，PicGo会自动上传图片并将符合链接格式的链接复制到剪贴板，你只要按下Ctrl+v即可粘贴图片的链接。\n  单击相册，你可以看到你上传的所有图片，你可以对所有图片进行复制链接，修改图片URL与删除操作，并可以批量复制或批量删除。\n  要注意的是，gitee支持外部链接的文件大小限制为1M（不过我也没试过）。\n配置Typora   点击Typora左上角的文件-\u0026gt;偏好设置\n  在弹出的界面中点击图像，选择插入图片时选项为上传图片，并勾选对本地位置的图片应用上述规则和对网络位置的图片应用上述规则。\n  上传服务选项里选择PicGo(app)，PicGo路径选择PicGo.exe的绝对路径。\n  以后在Typora里插入本地图片时，它会利用PicGo自动帮你上传到gitee，并替换本地图片地址为gitee地址。\n参考链接   1.Gitee图床+PicGo+Typora便捷在博客中使用图片 \n  2.PicGo+Gitee(码云)搭建自己的图床\n  3.手把手教你用Typora自动上传到picgo图床\n  ","date":"2020-06-06T08:59:25+08:00","permalink":"/archives/gitee-picgo-typecho/","title":"Gitee+Picgo+Typecho搭建图床"},{"content":" 第一张 \n 第二张 \n 1.第三题第1小题。 圆柱从上面看，看到的形状是圆形；从正面或者侧面看，看到的形状是长方形或者正方形。 2.第三题第4小题。 从上面看能看到车灯，A选项没有车灯，所以选C。 3.第五题第2小题。 冰箱的门在小刚的左手边，所以小刚看到的是2号图。  ","date":"2020-06-05T20:07:25+08:00","permalink":"/archives/first-grade-math-xia-unit2/","title":"一年级数学下册第二单元《观察物体》试卷错题集"},{"content":"口算十几减几的退位减法主要有有数数法、做减法想加法、破十法、平十法这几种方法，下面着重讲讲破十法与平十法。\n破十法 破十法口诀：看大数，分出10，减小数，加剩数，一般会这样考你：\n口算18-9= ( ) 时，可以这样想：先算(10)-(9)=(1)，再算(1)+(8)=(9)\n平十法 平十法口诀：分小数，减出10，10减几。\n平十法就是连续减，例如18-9=( )，18个位上的8不够减9，那18减几最好够减，最好算的，18-8好算，所以先把9分成8和1，先算(18)-(8)=(10)，再算(10)-(1)=(9)。\n参考链接   1.破十法和平十法的巧妙口诀\n  2.凑十法、破十法、连减法算理复习\n  ","date":"2020-06-04T22:33:25+08:00","permalink":"/archives/first-grade-math-po-shi-and-ping-shi/","title":"一年级数学下册破十法和平十法"},{"content":" 第一张 \n 第二张 \n 1.第一题第3小题，填合适的数。 求被减数用加法，求减数用减法， 2.第一题第6小题，找规律。 规律是相邻的两个数依次增加1、2、3…… 3.判断题第2小题，是用破十法算十几减几的退位减法。破十法口诀：看大数，分出10，减小数，加剩数。 4.第七题，画一画，算一算。 第1题是问“圆比三角形多6个，求圆有几个”，先画，再算一算。同理第2题一样。 5.第八题看图列式第2个，题目意思是“原来有16个球，圈了7个，还剩下几个？” 6.最后一题，排队问题。 最后还要减1，可以利用画图来理解题意。可以看下参考答案里画的图。  ","date":"2020-06-04T20:29:25+08:00","permalink":"/archives/first-grade-math-xia-unit1/","title":"一年级数学下册第一单元《加与减(一)》试卷错题集"},{"content":"本文以 Loveit主题为例进行说明，记录一下怎样在hugo添加Algolia搜索以及自动化上传索引文件的方法。\n生成索引文件 Algolia创建空索引  创建应用，自取名字(注意：节点选择香港) 创建索引，自取名字(比如说hugo) 点击侧栏 API Keys，记录信息(Application ID, Search-Only API Key, Admin API Key)  Hugo生成索引文件 参考上文Hugo LoveIt主题配置与使用，修改config.toml相应Algolia参数即可。\n上传索引文件 生成索引文件之后，我们需要上传到Algolia的服务器。\n手动上传 这一步是可选的，不过还是建议跟着做一下。\n 点击侧栏 Indices —Add records—Upload file按钮，上传上一步生成的 index.json 文件（具体位置在根目录public文件夹里）。 上传成功之后，我们就可以马上尝试搜索了，如果看到搜索的关键词有相应的匹配结果，那么就说明我们生成的索引文件是正确的。  自动上传 这里我们采用npm包 atomic-algolia 来完成自动上传操作。准备条件：已经安装Node.js，安装过程略。\n 安装 atomic-algolia 包  npm init // 初始化，不懂的就一直回车就好了 npm install atomic-algolia --save 执行完后会生成 node_modules 文件夹（如果代码托管在 GitHub 的话，可以在.gitignore中添加/node_modules以忽略该文件）。在项目根目录下还会有一个package.json文件，打开该文件：\n 修改根目录下的 package.json 文件，在 scripts 下添加 \u0026quot;algolia\u0026quot;: \u0026quot;atomic-algolia\u0026quot;  \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34;, \u0026#34;algolia\u0026#34;: \u0026#34;atomic-algolia\u0026#34; }, 注意 \u0026quot;test\u0026quot; 那一行末尾有个英文逗号，不要漏了。\n 根目录下新建 .env 文件，内容如下：  ALGOLIA_APP_ID=你的Application ID ALGOLIA_INDEX_NAME=你的索引名字 ALGOLIA_INDEX_FILE=public/index.json ALGOLIA_ADMIN_KEY=你的Admin API Key  上传索引的命令  你可以本地执行 npm run algolia 查看运行效果。后续就是把下面的命令加到你的自动部署脚本即可：\nnpm run algolia // 在hugo命令后面执行 如果出现问题，试下以下命令：\nnpm install npm run algolia // 在hugo命令后面执行 修改自动部署脚本 自动部署脚本改成这样：\n#!/bin/bash  echo -e \u0026#34;\\033[0;32mDeploying updates to gitee...\\033[0m\u0026#34; # backup git config --global core.autocrlf false git add . git commit -m \u0026#34;site backup\u0026#34; git push origin master --force # Removing existing files rm -rf public/* # Build the project hugo npm run algolia # Go To Public folder cd public git remote rm origin git init git remote add origin git@104.224.191.88:hexo.git git add . # Commit changes. msg=\u0026#34;rebuilding site `date`\u0026#34; if [ $# -eq 1 ] then msg=\u0026#34;$1\u0026#34; fi git commit -m \u0026#34;$msg\u0026#34; # Push source and build repos. git push origin master --force # Come Back up to the Project Root cd .. 至此，如果你运行 npm run algolia 没有报错的话，就成功了。\n参考链接  1.Hugo添加Algolia搜索支持 2.使用 Hugo + Algolia 进行静态站点搜索 3.采用 Algolia 作为 Hugo 搜索方案  ","date":"2020-06-03T23:17:25+08:00","permalink":"/archives/hugo-theme-loveit-algolia/","title":"Hugo添加Algolia"},{"content":"安装主题 把这个主题克隆到 themes 目录:\ngit clone https://github.com/dillonzq/LoveIt.git themes/LoveIt 配置主题 站点配置文件的修改 将根目录\\themes\\LoveIt\\exampleSite路径下的config.toml文件复制到根目录下，覆盖掉根目录下的config.toml文件。然后，我们在notepad++中打开并对其作一定的修改就可以直接使用，具体可以修改的内容如下：\nbaseURL = \u0026#34;https://bore.vip/\u0026#34;# [en, zh-cn, fr, ...] 设置默认的语言defaultContentLanguage = \u0026#34;zh-cn\u0026#34;# 网站语言, 仅在这里 CN 大写languageCode = \u0026#34;zh-CN\u0026#34;# 是否包括中日韩文字hasCJKLanguage = true# 主题theme = \u0026#34;CodeIT\u0026#34;# 网站标题title = \u0026#34;Bore\u0026#39;s Notes\u0026#34;# 是否使用 robots.txtenableRobotsTXT = true# 是否使用 git 信息enableGitInfo = true# 是否使用 emoji 代码enableEmoji = true# 菜单配置[menu][[menu.main]]identifier = \u0026#34;posts\u0026#34;# 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标pre = \u0026#34;\u0026#34;# 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标post = \u0026#34;\u0026#34;name = \u0026#34;归档\u0026#34;url = \u0026#34;/posts/\u0026#34;# 当你将鼠标悬停在此菜单链接上时, 将显示的标题title = \u0026#34;\u0026#34;weight = 4[[menu.main]]identifier = \u0026#34;home\u0026#34;pre = \u0026#34;\u0026#34;post = \u0026#34;\u0026#34;name = \u0026#34;首页\u0026#34;url = \u0026#34;/\u0026#34;title = \u0026#34;\u0026#34;weight = 1[[menu.main]]identifier = \u0026#34;categories\u0026#34;pre = \u0026#34;\u0026#34;post = \u0026#34;\u0026#34;name = \u0026#34;分类\u0026#34;url = \u0026#34;/categories/\u0026#34;title = \u0026#34;\u0026#34;weight = 2[[menu.main]]identifier = \u0026#34;tags\u0026#34;pre = \u0026#34;\u0026#34;post = \u0026#34;\u0026#34;name = \u0026#34;标签\u0026#34;url = \u0026#34;/tags/\u0026#34;title = \u0026#34;\u0026#34;weight = 3[[menu.main]]identifier = \u0026#34;about\u0026#34;pre = \u0026#34;\u0026#34;post = \u0026#34;\u0026#34;name = \u0026#34;关于\u0026#34;url = \u0026#34;/about/\u0026#34;title = \u0026#34;\u0026#34;weight = 5[[menu.main]]identifier = \u0026#34;links\u0026#34;pre = \u0026#34;\u0026#34;post = \u0026#34;\u0026#34;name = \u0026#34;友链\u0026#34;url = \u0026#34;/links/\u0026#34;title = \u0026#34;\u0026#34;weight = 6[params]# CodeIT 主题版本version = \u0026#34;0.2.X\u0026#34;# 网站描述description = \u0026#34;本站主要用来收集整理资料、记录笔记，方便自己查询使用。\u0026#34;# 网站关键词keywords = [\u0026#34;个人博客\u0026#34;, \u0026#34;个人网站\u0026#34;,\u0026#34;Bore\u0026#39;s Note\u0026#34;,\u0026#34;hugo\u0026#34;]# 网站默认主题样式 (\u0026#34;light\u0026#34;, \u0026#34;dark\u0026#34;, \u0026#34;auto\u0026#34;)defaultTheme = \u0026#34;auto\u0026#34;# 公共 git 仓库路径，仅在 enableGitInfo 设为 true 时有效gitRepo = \u0026#34;https://github.com/iwyang/iwyang.github.io\u0026#34;# 哪种哈希函数用来 SRI, 为空时表示不使用 SRI# (\u0026#34;sha256\u0026#34;, \u0026#34;sha384\u0026#34;, \u0026#34;sha512\u0026#34;, \u0026#34;md5\u0026#34;)fingerprint = \u0026#34;\u0026#34;# 日期格式dateFormat = \u0026#34;2006-01-02\u0026#34;# 网站图片, 用于 Open Graph 和 Twitter Cardsimages = [\u0026#34;/logo.png\u0026#34;]# 应用图标配置[params.app]# 当添加到 iOS 主屏幕或者 Android 启动器时的标题, 覆盖默认标题title = \u0026#34;Bore\u0026#39;s Note\u0026#34;# 是否隐藏网站图标资源链接noFavicon = false# 更现代的 SVG 网站图标, 可替代旧的 .png 和 .ico 文件svgFavicon = \u0026#34;\u0026#34;# Android 浏览器主题色themeColor = \u0026#34;#ffffff\u0026#34;# Safari 图标颜色iconColor = \u0026#34;#5bbad5\u0026#34;# Windows v8-10磁贴颜色tileColor = \u0026#34;#da532c\u0026#34;# 搜索配置[params.search]enable = true# 搜索引擎的类型 (\u0026#34;lunr\u0026#34;, \u0026#34;algolia\u0026#34;)type = \u0026#34;algolia\u0026#34;# 文章内容最长索引长度contentLength = 4000# 搜索框的占位提示语placeholder = \u0026#34;\u0026#34;# 最大结果数目maxResultLength = 10# 结果内容片段长度snippetLength = 50# 搜索结果中高亮部分的 HTML 标签highlightTag = \u0026#34;em\u0026#34;# 是否在搜索索引中使用基于 baseURL 的绝对路径absoluteURL = false[params.search.algolia]index = \u0026#34;hugo\u0026#34;appID = \u0026#34;R7GU8Q3PGK\u0026#34;searchKey = \u0026#34;03cd2f39cefdd4b40deed2f1222ad496\u0026#34;# 页面头部导航栏配置[params.header]# 桌面端导航栏模式 (\u0026#34;fixed\u0026#34;, \u0026#34;normal\u0026#34;, \u0026#34;auto\u0026#34;)desktopMode = \u0026#34;fixed\u0026#34;# 移动端导航栏模式 (\u0026#34;fixed\u0026#34;, \u0026#34;normal\u0026#34;, \u0026#34;auto\u0026#34;)mobileMode = \u0026#34;auto\u0026#34;# 页面头部导航栏标题配置[params.header.title]# LOGO 的 URLlogo = \u0026#34;\u0026#34;# 标题名称name = \u0026#34;Bore\u0026#39;s Notes\u0026#34;# 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标pre = \u0026#34;\u0026#34;# 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标post = \u0026#34;\u0026#34;# 是否为标题显示打字机动画typeit = false# 页面底部信息配置[params.footer]enable = true# 自定义内容 (支持 HTML 格式)custom = \u0026#39;\u0026#39;# 是否显示 Hugo 和主题信息hugo = true# 是否显示版权信息copyright = true# 是否显示作者author = true# 网站创立年份since = 2020# ICP 备案信息，仅在中国使用 (支持 HTML 格式)icp = \u0026#34;\u0026#34;# 许可协议信息 (支持 HTML 格式)license = \u0026#39;\u0026lt;a rel=\u0026#34;license external nofollow noopener noreffer\u0026#34; href=\u0026#34;https://creativecommons.org/licenses/by-nc/4.0/\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;CC BY-NC 4.0\u0026lt;/a\u0026gt;\u0026#39;# Section (所有文章) 页面配置[params.section]# section 页面每页显示文章数量paginate = 10000# 日期格式 (月和日)dateFormat = \u0026#34;01-02\u0026#34;# RSS 文章数目rss = 10# List (目录或标签) 页面配置[params.list]# list 页面每页显示文章数量paginate = 20# 日期格式 (月和日)dateFormat = \u0026#34;01-02\u0026#34;# RSS 文章数目rss = 10# 主页配置[params.home]# RSS 文章数目rss = 10# 主页个人信息[params.home.profile]enable = true# Gravatar 邮箱，用于优先在主页显示的头像gravatarEmail = \u0026#34;\u0026#34;# 主页显示头像的 URLavatarURL = \u0026#34;/images/avatar.jpg\u0026#34;# 主页显示的网站标题 (支持 HTML 格式)title = \u0026#34;\u0026#34;# 主页显示的网站副标题subtitle = \u0026#34;博观而约取，厚积而薄发\u0026#34;# CodeIT 更改 | 0.1.1 (HTML format is supported)# 是否为副标题显示打字机动画typeit = true# 是否显示社交账号social = false# 免责声明 (支持 HTML 格式)disclaimer = \u0026#34;\u0026#34;# 主页文章列表[params.home.posts]enable = true# 主页每页显示文章数量paginate = 10# 被 params.page 中的 hiddenFromHomePage 替代# 当你没有在文章前置参数中设置 \u0026#34;hiddenFromHomePage\u0026#34; 时的默认行为defaultHiddenFromHomePage = false# 作者的社交信息设置[params.social]GitHub = \u0026#34;iwyang\u0026#34;Linkedin = \u0026#34;\u0026#34;Twitter = \u0026#34;\u0026#34;Instagram = \u0026#34;\u0026#34;Facebook = \u0026#34;\u0026#34;Telegram = \u0026#34;iwyang\u0026#34;Medium = \u0026#34;\u0026#34;Gitlab = \u0026#34;\u0026#34;Youtubelegacy = \u0026#34;\u0026#34;Youtubecustom = \u0026#34;\u0026#34;Youtubechannel = \u0026#34;\u0026#34;Tumblr = \u0026#34;\u0026#34;Quora = \u0026#34;\u0026#34;Keybase = \u0026#34;\u0026#34;Pinterest = \u0026#34;\u0026#34;Reddit = \u0026#34;\u0026#34;Codepen = \u0026#34;\u0026#34;FreeCodeCamp = \u0026#34;\u0026#34;Bitbucket = \u0026#34;\u0026#34;Stackoverflow = \u0026#34;\u0026#34;Weibo = \u0026#34;\u0026#34;Odnoklassniki = \u0026#34;\u0026#34;VK = \u0026#34;\u0026#34;Flickr = \u0026#34;\u0026#34;Xing = \u0026#34;\u0026#34;Snapchat = \u0026#34;\u0026#34;Soundcloud = \u0026#34;\u0026#34;Spotify = \u0026#34;\u0026#34;Bandcamp = \u0026#34;\u0026#34;Paypal = \u0026#34;\u0026#34;Fivehundredpx = \u0026#34;\u0026#34;Mix = \u0026#34;\u0026#34;Goodreads = \u0026#34;\u0026#34;Lastfm = \u0026#34;\u0026#34;Foursquare = \u0026#34;\u0026#34;Hackernews = \u0026#34;\u0026#34;Kickstarter = \u0026#34;\u0026#34;Patreon = \u0026#34;\u0026#34;Steam = \u0026#34;\u0026#34;Twitch = \u0026#34;\u0026#34;Strava = \u0026#34;\u0026#34;Skype = \u0026#34;\u0026#34;Whatsapp = \u0026#34;\u0026#34;Zhihu = \u0026#34;\u0026#34;Douban = \u0026#34;\u0026#34;Angellist = \u0026#34;\u0026#34;Slidershare = \u0026#34;\u0026#34;Jsfiddle = \u0026#34;\u0026#34;Deviantart = \u0026#34;\u0026#34;Behance = \u0026#34;\u0026#34;Dribbble = \u0026#34;\u0026#34;Wordpress = \u0026#34;\u0026#34;Vine = \u0026#34;\u0026#34;Googlescholar = \u0026#34;\u0026#34;Researchgate = \u0026#34;\u0026#34;Mastodon = \u0026#34;\u0026#34;Thingiverse = \u0026#34;\u0026#34;Devto = \u0026#34;\u0026#34;Gitea = \u0026#34;\u0026#34;XMPP = \u0026#34;\u0026#34;Matrix = \u0026#34;\u0026#34;Bilibili = \u0026#34;iwyang\u0026#34;Email = \u0026#34;xxxx@xxxx.com\u0026#34;RSS = true# CodeIT 新增 | 0.1.2 Open Researcher and Contributor IDOrcid = \u0026#34;\u0026#34;# 文章页面配置[params.page]# 是否在主页隐藏一篇文章hiddenFromHomePage = false# 是否在搜索结果中隐藏一篇文章hiddenFromSearch = false# 是否使用 twemojitwemoji = false# 是否使用 lightgallerylightgallery = false# 是否使用 ruby 扩展语法ruby = true# 是否使用 fraction 扩展语法fraction = true# 是否使用 fontawesome 扩展语法fontawesome = true# 是否在文章页面显示原始 Markdown 文档链接linkToMarkdown = true# 是否在 RSS 中显示全文内容rssFullText = false# 目录配置[params.page.toc]# 是否使用目录enable = true# 是否保持使用文章前面的静态目录keepStatic = false# 是否使侧边目录自动折叠展开auto = true# 代码配置[params.page.code]# 是否显示代码块的复制按钮copy = true# 默认展开显示的代码行数maxShownLines = 10# KaTeX 数学公式[params.page.math]enable = true# 默认块定界符是 $$ ... $$ 和 \\\\[ ... \\\\]blockLeftDelimiter = \u0026#34;\u0026#34;blockRightDelimiter = \u0026#34;\u0026#34;# 默认行内定界符是 $ ... $ 和 \\\\( ... \\\\)inlineLeftDelimiter = \u0026#34;\u0026#34;inlineRightDelimiter = \u0026#34;\u0026#34;# KaTeX 插件 copy_texcopyTex = true# KaTeX 插件 mhchemmhchem = true# Mapbox GL JS 配置[params.page.mapbox]# Mapbox GL JS 的 access tokenaccessToken = \u0026#34;\u0026#34;# 浅色主题的地图样式lightStyle = \u0026#34;mapbox://styles/mapbox/light-v9\u0026#34;# 深色主题的地图样式darkStyle = \u0026#34;mapbox://styles/mapbox/dark-v9\u0026#34;# 是否添加 NavigationControlnavigation = true# 是否添加 GeolocateControlgeolocate = true# 是否添加 ScaleControlscale = true# 是否添加 FullscreenControlfullscreen = true# 文章页面的分享信息设置[params.page.share]enable = falseTwitter = trueFacebook = trueLinkedin = falseWhatsapp = truePinterest = falseTumblr = falseHackerNews = falseReddit = falseVK = falseBuffer = falseXing = falseLine = trueInstapaper = falsePocket = falseDigg = falseStumbleupon = falseFlipboard = falseWeibo = trueRenren = falseMyspace = trueBlogger = trueBaidu = falseOdnoklassniki = falseEvernote = trueSkype = falseTrello = falseMix = false# CodeIT 新增 | 0.1.2Telegram = false# 评论系统设置[params.page.comment]enable = true# Disqus 评论系统设置[params.page.comment.disqus]enable = false# Disqus 的 shortname，用来在文章中启用 Disqus 评论系统shortname = \u0026#34;\u0026#34;# Gitalk 评论系统设置[params.page.comment.gitalk]enable = falseowner = \u0026#34;\u0026#34;repo = \u0026#34;\u0026#34;clientId = \u0026#34;\u0026#34;clientSecret = \u0026#34;\u0026#34;# Valine 评论系统设置[params.page.comment.valine]enable = falseappId = \u0026#34;\u0026#34;appKey = \u0026#34;\u0026#34;placeholder = \u0026#34;\u0026#34;avatar = \u0026#34;mp\u0026#34;meta= [\u0026#39;nick\u0026#39;,\u0026#39;mail\u0026#39;]pageSize = 10lang = \u0026#34;\u0026#34;visitor = truerecordIP = truehighlight = trueenableQQ = falseserverURLs = \u0026#34;\u0026#34;# emoji 数据文件名称, 默认是 \u0026#34;google.yml\u0026#34;# (\u0026#34;apple.yml\u0026#34;, \u0026#34;google.yml\u0026#34;, \u0026#34;facebook.yml\u0026#34;, \u0026#34;twitter.yml\u0026#34;)# 位于 \u0026#34;themes/CodeIT/assets/data/emoji/\u0026#34; 目录# 可以在你的项目下相同路径存放你自己的数据文件:# \u0026#34;assets/data/emoji/\u0026#34;emoji = \u0026#34;\u0026#34;# Facebook 评论系统设置[params.page.comment.facebook]enable = falsewidth = \u0026#34;100%\u0026#34;numPosts = 10appId = \u0026#34;\u0026#34;languageCode = \u0026#34;zh_CN\u0026#34;# Telegram Comments 评论系统设置[params.page.comment.telegram]enable = falsesiteID = \u0026#34;\u0026#34;limit = 5height = \u0026#34;\u0026#34;color = \u0026#34;\u0026#34;colorful = truedislikes = falseoutlined = false# Commento 评论系统设置[params.page.comment.commento]enable = false# Utterances 评论系统设置[params.page.comment.utterances]enable = true# owner/reporepo = \u0026#34;iwyang/comments\u0026#34;issueTerm = \u0026#34;title\u0026#34;label = \u0026#34;\u0026#34;lightTheme = \u0026#34;github-light\u0026#34;darkTheme = \u0026#34;github-dark\u0026#34;# 第三方库配置[params.page.library][params.page.library.css]# someCSS = \u0026#34;some.css\u0026#34;# 位于 \u0026#34;assets/\u0026#34;# 或者# someCSS = \u0026#34;https://cdn.example.com/some.css\u0026#34;[params.page.library.js]# someJavascript = \u0026#34;some.js\u0026#34;# 位于 \u0026#34;assets/\u0026#34;# 或者# someJavascript = \u0026#34;https://cdn.example.com/some.js\u0026#34;# 页面 SEO 配置[params.page.seo]# 图片 URLimages = []# 出版者信息[params.page.seo.publisher]name = \u0026#34;\u0026#34;logoUrl = \u0026#34;\u0026#34;# TypeIt 配置[params.typeit]# 每一步的打字速度 (单位是毫秒)speed = 100# 光标的闪烁速度 (单位是毫秒)cursorSpeed = 1000# 光标的字符 (支持 HTML 格式)cursorChar = \u0026#34;|\u0026#34;# 打字结束之后光标的持续时间 (单位是毫秒, \u0026#34;-1\u0026#34; 代表无限大)duration = -1# 网站验证代码，用于 Google/Bing/Yandex/Pinterest/Baidu[params.verification]google = \u0026#34;\u0026#34;bing = \u0026#34;\u0026#34;yandex = \u0026#34;\u0026#34;pinterest = \u0026#34;\u0026#34;baidu = \u0026#34;\u0026#34;# 网站 SEO 配置[params.seo]# 图片 URLimage = \u0026#34;\u0026#34;# 缩略图 URLthumbnailUrl = \u0026#34;\u0026#34;# 网站分析配置[params.analytics]enable = false# Google Analytics[params.analytics.google]id = \u0026#34;\u0026#34;# 是否匿名化用户 IPanonymizeIP = true# Fathom Analytics[params.analytics.fathom]id = \u0026#34;\u0026#34;# 自行托管追踪器时的主机路径server = \u0026#34;\u0026#34;# CodeIT 新增 | 0.1.0 Plausible Analytics[params.analytics.plausible]domain = \u0026#34;\u0026#34;# Cookie 许可配置[params.cookieconsent]enable = false# 用于 Cookie 许可横幅的文本字符串[params.cookieconsent.content]message = \u0026#34;\u0026#34;dismiss = \u0026#34;\u0026#34;link = \u0026#34;\u0026#34;# 第三方库文件的 CDN 设置[params.cdn]# CDN 数据文件名称, 默认不启用# (\u0026#34;jsdelivr.yml\u0026#34;)# 位于 \u0026#34;themes/CodeIT/assets/data/cdn/\u0026#34; 目录# 可以在你的项目下相同路径存放你自己的数据文件:# \u0026#34;assets/data/cdn/\u0026#34;data = \u0026#34;\u0026#34;# 兼容性设置[params.compatibility]# 是否使用 Polyfill.io 来兼容旧式浏览器polyfill = false# 是否使用 object-fit-images 来兼容旧式浏览器objectFit = false# Hugo 解析文档的配置[markup]# 语法高亮设置[markup.highlight]codeFences = trueguessSyntax = truelineNos = truelineNumbersInTable = true# false 是必要的设置# (https://github.com/sunt-programator/CodeIT/issues/158)noClasses = false# Goldmark 是 Hugo 0.60 以来的默认 Markdown 解析库[markup.goldmark][markup.goldmark.extensions]definitionList = truefootnote = truelinkify = truestrikethrough = truetable = truetaskList = truetypographer = true[markup.goldmark.renderer]# 是否在文档中直接使用 HTML 标签unsafe = true# 目录设置[markup.tableOfContents]startLevel = 2endLevel = 6# 作者配置[author]name = \u0026#34;bore\u0026#34;email = \u0026#34;iwyang@qq.com\u0026#34;link = \u0026#34;https://bore.vip\u0026#34;# 网站地图配置[sitemap]changefreq = \u0026#34;weekly\u0026#34;filename = \u0026#34;sitemap.xml\u0026#34;priority = 0.5# Permalinks 配置[Permalinks]# posts = \u0026#34;:year/:month/:filename\u0026#34;posts = \u0026#34;/posts/:slug\u0026#34;# 隐私信息配置[privacy]# Google Analytics 相关隐私 (被 params.analytics.google 替代)[privacy.googleAnalytics]# ...[privacy.twitter]enableDNT = true[privacy.youtube]privacyEnhanced = true# 用于输出 Markdown 格式文档的设置[mediaTypes][mediaTypes.\u0026#34;text/plain\u0026#34;]suffixes = [\u0026#34;md\u0026#34;]# 用于输出 Markdown 格式文档的设置[outputFormats.MarkDown]mediaType = \u0026#34;text/plain\u0026#34;isPlainText = trueisHTML = false# 用于 Hugo 输出文档的设置[outputs]home = [\u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;, \u0026#34;JSON\u0026#34;]page = [\u0026#34;HTML\u0026#34;, \u0026#34;MarkDown\u0026#34;]section = [\u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;]taxonomy = [\u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;]taxonomyTerm = [\u0026#34;HTML\u0026#34;]注意：\n 如果固定链接设置为posts = \u0026quot;/posts/:slug\u0026quot;，文章的分类和标签都不能为空，否则会报错！ 如果要在菜单前面加图标，格式是pre = \u0026quot;\u0026lt;i class='fa fa-fw fa-home'\u0026gt;\u0026lt;/i\u0026gt;\u0026quot;，'fa fa-fw fa-home'是单引号，不是双引号。  默认文章模板的修改 将根目录\\archetypes下的default.md修改如下：\ntitle:\u0026#34;{{ replace .TranslationBaseName \u0026#34;-\u0026#34; \u0026#34;\u0026#34; | title }}\u0026#34;slug:\u0026#34;\u0026#34;date:{{.Date }}lastmod:{{.Date }}draft:falsetoc:trueweight:falsecategories:[\u0026#34;\u0026#34;]tags:[\u0026#34;\u0026#34;]LoveIt主题官方前置参数 ---title:\u0026#34;我的第一篇文章\u0026#34;subtitle:\u0026#34;\u0026#34;date:2020-03-04T15:58:26+08:00lastmod:2020-03-04T15:58:26+08:00draft:trueauthor:\u0026#34;\u0026#34;authorLink:\u0026#34;\u0026#34;description:\u0026#34;\u0026#34;license:\u0026#34;\u0026#34;images:[]tags:[]categories:[]featuredImage:\u0026#34;\u0026#34;featuredImagePreview:\u0026#34;\u0026#34;hiddenFromHomePage:falsehiddenFromSearch:falsetwemoji:falselightgallery:trueruby:truefraction:truefontawesome:truelinkToMarkdown:truerssFullText:falsetoc:enable:trueauto:truecode:copy:true# ...math:enable:true# ...mapbox:accessToken:\u0026#34;\u0026#34;# ...share:enable:true# ...comment:enable:true# ...library:css:# someCSS = \u0026#34;some.css\u0026#34;# 位于 \u0026#34;assets/\u0026#34;# 或者# someCSS = \u0026#34;https://cdn.example.com/some.css\u0026#34;js:# someJS = \u0026#34;some.js\u0026#34;# 位于 \u0026#34;assets/\u0026#34;# 或者# someJS = \u0026#34;https://cdn.example.com/some.js\u0026#34;seo:images:[]# ...--- title: 文章标题. subtitle: 文章副标题. date: 这篇文章创建的日期时间. 它通常是从文章的前置参数中的 date 字段获取的, 但是也可以在 网站配置 中设置. lastmod: 上次修改内容的日期时间. draft: 如果设为 true, 除非 hugo 命令使用了 --buildDrafts/-D 参数, 这篇文章不会被渲染. author: 文章作者. authorLink: 文章作者的链接. description: 文章内容的描述. license: 这篇文章特殊的许可. images: 页面图片, 用于 Open Graph 和 Twitter Cards. tags: 文章的标签. categories: 文章所属的类别. featuredImage: 文章的特色图片. featuredImagePreview: 用在主页预览的文章特色图片. hiddenFromHomePage: 如果设为 true, 这篇文章将不会显示在主页上. hiddenFromSearch: 如果设为 true, 这篇文章将不会显示在搜索结果中. twemoji: 如果设为 true, 这篇文章会使用 twemoji. lightgallery: 如果设为 true, 文章中的图片将可以按照画廊形式呈现. ruby: 如果设为 true, 这篇文章会使用 上标注释扩展语法. fraction: 如果设为 true, 这篇文章会使用 分数扩展语法. fontawesome: 如果设为 true, 这篇文章会使用 Font Awesome 扩展语法. linkToMarkdown: 如果设为 true, 内容的页脚将显示指向原始 Markdown 文件的链接. rssFullText: 如果设为 true, 在 RSS 中将会显示全文内容. toc: 和网站配置 中的 params.page.toc 部分相同. code: 和网站配置 中的 params.page.code 部分相同. math: 和网站配置 中的 params.page.math 部分相同. mapbox: 和网站配置 中的 params.page.mapbox 部分相同. share: 和 网站配置 中的 params.page.share 部分相同. comment: 和网站配置 中的 params.page.comment 部分相同. library: 和网站配置中的 params.page.library 部分相同. seo: 和网站配置中的 params.page.seo 部分相同.  添加友情链接 shortcodes  在前辈大佬的基础上，为本博客使用的主题实现友链卡片功能，并加入简单的移动页面适配。代码借鉴来自 kissshot 和 数学小兵儿 两位大佬。\n 第一种方法 代码部分 LoveIt/layouts/shortcodes/ 下面新建 friend.html 文件：\n{{ if .IsNamedParams }} \u0026lt;a target=\u0026#34;_blank\u0026#34; href={{ .Get \u0026#34;url\u0026#34; }} title={{ .Get \u0026#34;name\u0026#34; }} class=\u0026#34;friendurl\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;frienddiv\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;frienddivleft\u0026#34;\u0026gt; \u0026lt;img class=\u0026#34;myfriend\u0026#34; src={{ .Get \u0026#34;logo\u0026#34; }} /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;frienddivright\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;friendname\u0026#34;\u0026gt;{{ .Get \u0026#34;name\u0026#34; }}\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;friendinfo\u0026#34;\u0026gt;{{ .Get \u0026#34;word\u0026#34; }}\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/a\u0026gt; {{ end }} LoveIt/assets/css/_partial/_single/ 下面新建 _friend.scss 文件：\n.friendurl { text-decoration: none !important; color: black; } .myfriend { width: 56px !important; height: 56px !important; border-radius: 50%; border: 1px solid #ddd; padding: 2px; box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.15); margin-top: 14px !important; margin-left: 14px !important; background-color: #fff; } .frienddiv { height: 92px; margin-top: 10px; width: 48%; display: inline-block !important; border-radius: 5px; background: rgba(255, 255, 255, 0.2); box-shadow: 4px 4px 2px 1px rgba(0, 0, 255, 0.2); } .frienddiv:hover { background: rgba(87, 142, 224, 0.15); } .frienddiv:hover .frienddivleft img { transition: 0.9s !important; -webkit-transition: 0.9s !important; -moz-transition: 0.9s !important; -o-transition: 0.9s !important; -ms-transition: 0.9s !important; transform: rotate(360deg) !important; -webkit-transform: rotate(360deg) !important; -moz-transform: rotate(360deg) !important; -o-transform: rotate(360deg) !important; -ms-transform: rotate(360deg) !important; } .frienddivleft { width: 92px; float: left; } .frienddivleft { margin-right: 2px; } .frienddivright { margin-top: 18px; margin-right: 18px; } .friendname { text-overflow: ellipsis; overflow: hidden; white-space: nowrap; } .friendinfo { text-overflow: ellipsis; overflow: hidden; white-space: nowrap; } @media screen and (max-width: 600px) { .friendinfo { display: none; } .frienddivleft { width: 84px; margin: auto; } .frienddivright { height: 100%; margin: auto; display: flex; align-items: center; justify-content: center; } .friendname { font-size: 14px; } } LoveIt/assets/css/_page/ 下面修改 _single.scss，引入下面一行：\n@import \u0026#34;../_partial/_single/friend\u0026#34;; 展示效果 使用示例：\n{{\u0026lt; friend name=\u0026#34;Bore\u0026#34; url=\u0026#34;https://bore.vip/\u0026#34; logo=\u0026#34;https://cdn.jsdelivr.net/gh/iwyang/pic/avatar.jpg\u0026#34; word=\u0026#34;博观而约取，厚积而薄发\u0026#34; \u0026gt;}}  \n注意：可以用/* */来阻止渲染\n \n第二种方法 2021.7.17 目前采用的就是这种方法。\n代码 注意：后面说的assets和layouts目录都不是themes/LoveIt/\\*下的，而是博客根目录/*\n layouts/shortcodes/下面新建friend.html文件：  注意这里我将原来的\u0026lt;a target=\u0026quot;_blank\u0026quot; href={{ .Get \u0026quot;url\u0026quot; | safeURL }} title={{ .Get \u0026quot;name\u0026quot; }} \u0026gt;改成了 \u0026lt;a target=\u0026quot;_blank\u0026quot; href={{ .Get \u0026quot;url\u0026quot; | safeURL }} title={{ .Get \u0026quot;word\u0026quot; }} \u0026gt;\n{{ if .IsNamedParams }} {{- $src := .Get \u0026#34;logo\u0026#34; -}} {{- $small := .Get \u0026#34;logo_small\u0026#34; | default $src -}} {{- $large := .Get \u0026#34;logo_large\u0026#34; | default $src -}} \u0026lt;div class=\u0026#34;friend-div\u0026#34;\u0026gt; \u0026lt;a target=\u0026#34;_blank\u0026#34; href={{ .Get \u0026#34;url\u0026#34; | safeURL }} title={{ .Get \u0026#34;word\u0026#34; }} \u0026gt; \u0026lt;img class=\u0026#34;lazyload\u0026#34; src=\u0026#34;/svg/loading.min.svg\u0026#34; data-src={{ $src | safeURL }} alt={{ .Get \u0026#34;name\u0026#34; }} data-sizes=\u0026#34;auto\u0026#34; data-srcset=\u0026#34;{{ $small | safeURL }}, {{ $src | safeURL }} 1.5x, {{ $large | safeURL }} 2x\u0026#34; /\u0026gt; \u0026lt;span class=\u0026#34;friend-name\u0026#34;\u0026gt;{{ .Get \u0026#34;name\u0026#34; }}\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;friend-info\u0026#34;\u0026gt;{{ .Get \u0026#34;word\u0026#34; }}\u0026lt;/span\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; {{ end }} assets/css/_partial/_single/下面新建_friend.scss文件：  #article-container { word-wrap: break-word; overflow-wrap: break-word } #article-container a { color: #49b1f5 } #article-container a:hover { text-decoration: underline } #article-container img { margin: 0 auto .8rem } .flink#article-container .friend-list-div \u0026gt; .friend-div a .friend-info, .flink#article-container .friend-list-div \u0026gt; .friend-div a .friend-name { overflow: hidden; -o-text-overflow: ellipsis; text-overflow: ellipsis; white-space: nowrap } .flink#article-container .friend-list-div { overflow: auto; padding: 10px 10px 0; text-align: center; } .flink#article-container .friend-list-div \u0026gt; .friend-div { position: relative; float: left; overflow: hidden; margin: 15px 7px; width: calc(100% / 3 - 15px); height: 90px; border-radius: 8px; line-height: 17px; -webkit-transform: translateZ(0) } @media screen and (max-width: 1100px) { .flink#article-container .friend-list-div \u0026gt; .friend-div { width: calc(50% - 15px) !important } @media screen and (max-width: 600px) { .flink#article-container .friend-list-div \u0026gt; .friend-div { width: calc(100% - 15px) !important } } } .flink#article-container .friend-list-div \u0026gt; .friend-div:hover { background: rgba(87, 142, 224, 0.15); } .flink#article-container .friend-list-div \u0026gt; .friend-div:hover img { -webkit-transform: rotate(360deg); -moz-transform: rotate(360deg); -o-transform: rotate(360deg); -ms-transform: rotate(360deg); transform: rotate(360deg) } .flink#article-container .friend-list-div \u0026gt; .friend-div:before { position: absolute; top: 0; right: 0; bottom: 0; left: 0; z-index: -1; background: var(--text-bg-hover); content: \u0026#39;\u0026#39;; -webkit-transition: -webkit-transform .3s ease-out; -moz-transition: -moz-transform .3s ease-out; -o-transition: -o-transform .3s ease-out; -ms-transition: -ms-transform .3s ease-out; transition: transform .3s ease-out; -webkit-transform: scale(0); -moz-transform: scale(0); -o-transform: scale(0); -ms-transform: scale(0); transform: scale(0) } .flink#article-container .friend-list-div \u0026gt; .friend-div:hover:before, .flink#article-container .friend-list-div \u0026gt; .friend-div:focus:before, .flink#article-container .friend-list-div \u0026gt; .friend-div:active:before { -webkit-transform: scale(1); -moz-transform: scale(1); -o-transform: scale(1); -ms-transform: scale(1); transform: scale(1) } .flink#article-container .friend-list-div \u0026gt; .friend-div a { color: var(--font-color); text-decoration: none } .flink#article-container .friend-list-div \u0026gt; .friend-div a img{ float: left; margin: 15px 10px; width: 60px; height: 60px; border-radius: 35px; -webkit-transition: all .3s; -moz-transition: all .3s; -o-transition: all .3s; -ms-transition: all .3s; transition: all .3s } .flink#article-container .friend-list-div \u0026gt; .friend-div a .friend-name { display: block; padding: 16px 10px 0 0; height: 40px; font-weight: 700; font-size: 20px } .flink#article-container .friend-list-div \u0026gt; .friend-div a .friend-info { display: block; padding: 1px 10px 1px 0; height: 50px; font-size: 13px } 拷贝themes/LoveIt/assets/css/_page/_single.scss到assets/css/_page/_single.scss，并引入下面一行：  @import \u0026#34;../_partial/_single/friend\u0026#34;; 预览 先自行在config.toml中配置友情链接，然后 md 文件中写如下代码：\n\u0026lt;div class=\u0026#34;flink\u0026#34; id=\u0026#34;article-container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;friend-list-div\u0026#34; \u0026gt; {{\u0026lt; friend name=\u0026#34;友链名\u0026#34; url=\u0026#34;友链地址\u0026#34; logo=\u0026#34;友链图标链接\u0026#34; word=\u0026#34;友链描述\u0026#34; \u0026gt;}} {{\u0026lt; friend name=\u0026#34;友链名\u0026#34; url=\u0026#34;友链地址\u0026#34; logo=\u0026#34;友链图标链接\u0026#34; word=\u0026#34;友链描述\u0026#34; \u0026gt;}} ... \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;  注意：两个 div 不能少！！\n  \nGithub actions脚本 在博客根目录新建.github/workflows/gh_pages.yml文件。代码如下：\nname:GitHub Page Deployon:push:branches:- developjobs:build-deploy:runs-on:ubuntu-lateststeps:- name:Checkout masteruses:actions/checkout@v1- name:Setup Hugouses:peaceiris/actions-hugo@v2with:hugo-version:\u0026#39;latest\u0026#39;extended:true- name:Build Hugorun:|hugo- name:Deploy Hugo to gh-pagesuses:peaceiris/actions-gh-pages@v2env:ACTIONS_DEPLOY_KEY:${{ secrets.ACTIONS_DEPLOY_KEY }}PUBLISH_BRANCH:masterPUBLISH_DIR:./public如果使用的是loveit主题并且使用algolia搜索，则还要配置自动更新索引，需在gh_pages.yml里作相应修改：\nname: GitHub Page Deploy on: push: branches: - develop jobs: build-deploy: runs-on: ubuntu-latest steps: - name: Checkout master uses: actions/checkout@v1 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; extended: true - name: Build Hugo run: | hugo \u0026amp;\u0026amp; npm install atomic-algolia --save \u0026amp;\u0026amp; npm run algolia - name: Deploy Hugo to gh-pages uses: peaceiris/actions-gh-pages@v2 env: ACTIONS_DEPLOY_KEY: ${{ secrets.ACTIONS_DEPLOY_KEY }} PUBLISH_BRANCH: master PUBLISH_DIR: ./public 如果要部署到腾讯CloudBase，可根据下面内容作相应修改。\nname:Deploy to TCBon:push:branches:- main # Set a branch to deployjobs:deploy:runs-on:ubuntu-lateststeps:- uses:actions/checkout@v2.3.2with:submodules:true# Fetch Hugo themes (true OR recursive)fetch-depth:0# Fetch all history for .GitInfo and .Lastmod- name:Setup Hugouses:peaceiris/actions-hugo@v2with:hugo-version:\u0026#39;0.79.1\u0026#39;extended:true- name:Buildrun:hugo --minify# Deploy static to Tencent CloudBase- name:Deploy static to Tencent CloudBaseid:deployStaticuses:TencentCloudBase/cloudbase-action@v1.1.1with:secretId:${{ secrets.SECRET_ID }}secretKey:${{ secrets.SECRET_KEY }}envId:${{ secrets.ENV_ID }}staticSrcPath:public参考链接  1.Hugo 篇四：添加友链卡片 shortcodes 2.Hugo 添加友情链接页面 3.Doit主题文档 - 基本概念 4.Codeit主题文档 - 基本概念  ","date":"2020-06-03T22:44:25+08:00","permalink":"/archives/hugo-theme-loveit/","title":"Hugo LoveIt\u0026CodeIT\u0026DoIt主题配置与使用"},{"content":"一年级试卷居然出现了和差问题，题目意思大概是：已知两数之和是35，两数之差是5，求这两数是多少？小学没学过方程，只能用小学的方法来解决，这里用画图的方法来解决问题。\n35+5=40 先假设两数一样多，求出的40就是两个大数之和 40-20=20 再求出大数 35-20=15 再求出小数 参考链接：小学奥数和差问题\n","date":"2020-06-03T10:34:25+08:00","permalink":"/archives/first-grade-math-he-cha/","title":"一年级数学和差问题"},{"content":"求“括号最大能填几”，分两步计算。例如：\n(1) 39-( )＞14\n  第一步，先想比14大1的数是几？14+1=15；\n  第二步，再想39减几等于15，39-( )=15，答案是24。\n  (2) 84＞( )+12\n  第一步，先想比84小1的数是几，84-1=83；\n  第二步，再想几加12等于83，答案是71。\n  (3) 29+( )＜46\n 第一步，先想比46小1的数是几，46-1=45，是45。 第二步，再想29加几等于45，45-29=16，答案是16。  更多有关“括号最大能填几”内容，可查看：括号里最大能填几？\n","date":"2020-06-02T10:02:25+08:00","permalink":"/archives/first-grade-math-zui-da/","title":"一年级数学括号最大能填几"},{"content":" 什么是“一图四式”呢？\n**给出一个图，写出四个算式，两道加法算式，两道减法算式。**这类数学题的目的，是为了训练一年级小学生看图的能力，以及对加减法意义的理解。\n 口诀：\n一图四式题，先来数左边，再来数右边， 两道加法题，左边加右边，右边加左边。 两位减法题，先来数总数， 总数减左边，就等于右边。 总数减右边，就等于左边。 参考链接：一年级数学“一图四式”\n","date":"2020-05-28T15:20:25+08:00","permalink":"/archives/first-grade-math-yi-tu-si-shi/","title":"一年级数学一图四式问题"},{"content":"排除关键词 方法是：减号+关键词\n功能是：排除一些 不想要的关键词\n例如：锤子 -锤子手机\n精确搜索 方法是：给关键词加引号\n功能是：只搜索引号里的字\n指定网站内搜索 方法是：site:域名+关键词（此处加号代表空格）\n功能是：在指定网站内搜索\n指定文件格式 方法是：filetype:文件格式+关键词（此处加号代表关键词）\n功能是：指定文件格式\n指定标题搜索 方法是：intitle:关键词\n功能是：搜索结果必须在标题中\n两种指定范围搜索 锤子 intext:苹果:要求搜索结果中有这个关键词。\nallintext:认知心理学 发展心理学 积极心理学 ：要求三个关键词都包括在搜索结果中。\ninurl:关键字：要求在网页url中包含关键词。\n叠加使用 site:douban.com 亲密关系 intext:罗兰米勒\n注意事项   所有的冒号都是半角，也就是英文的冒号而不是中文的冒号。\n  空格很重要，关键词之间一定要有空格。\n  提取关键词很重要。\n  参考链接  搜索效率提升200%！8个小技巧助你快速查资料  ","date":"2020-05-27T16:54:25+08:00","permalink":"/archives/search-tips/","title":"提高搜索效率的7个小技巧"},{"content":"2020.5.26　已升级安装最新bios版本：\n2018/9/3 版本：BIOS Version: E5CN63WW,EC Version:E5IT23WW  Fn+F2进入bios，Fn+F12选择启动顺序。\n 1.打开联想服务的驱动与下载网页：查找驱动程序及工具软件，选择在站内查找设备驱动， 输入你的电脑主机编号（可以在电脑背面的标签上找到，也可以安装联想电脑管家，会自动检测你的主机编号），确定后进入驱动下载界面。联想小新700（主机编号：R90JZRF4）直接点击：小新 700-15ISK\n2.在驱动列表中找到bios驱动，下载安装即可，当然，这个界面的所有驱动你都可以下载安装。\n总结：如果升级完bios，每回重启完电脑声音总是静音的话，下载驱动人生，重新安装声卡驱动。此外升级bios后，可解决小新700无故自动休眠问题。\n","date":"2020-05-26T18:25:25+08:00","permalink":"/archives/lenovo-update-bios/","title":"联想笔记本电脑升级bios"},{"content":"系统为centos8\nNginx默认目录：/usr/share/nginx/html\nNginx主要配置文件：/etc/nginx/nginx.conf\nvi /etc/nginx/nginx.conf 将下面几行配置文件加入nginx配置的server段内：\nautoindex on; autoindex_exact_size off; autoindex_localtime on; charset utf-8,gbk; 重启nginx服务：\nsystemctl restart nginx 参考链接：centos8自定义目录安装nginx\n","date":"2020-05-24T19:51:25+08:00","permalink":"/archives/nginx-mu-lu/","title":"Nginx开启目录浏览"},{"content":"Fn+F2进入bios，Fn+F12选择启动顺序。\r原版系统   备份E盘文件到移动硬盘。\n  进PE，这里使用微pe工具箱。\n  将系统iso文件装载到虚拟光驱，然后运行setup.exe\n  先删掉所有分区，然后给C盘分区，大小为：82703M（80*1024+100+16+567+100=82703）\n  安装完系统再用系统自带磁盘管理给D盘和E盘分区，D盘大小为：71780M（70*1024+100=71780），剩下的给E盘。\n    精简系统  备份E盘文件到移动硬盘。 进PE，这里使用微pe工具箱。 用DiskGenius分区，C盘80G，D盘70G，剩余给E盘。注意给C盘分区时，勾选建立ESP分区和建立MSR分区，勾选对齐到此扇区的整数倍，选择2048扇区。给D盘和E盘分区时也要勾选对齐到2048扇区。 用windows安装器安装系统。注意选择安装磁盘为C盘，还有选择相应的安装版本。  系统安装记录    序号 日期 版本     1 2020.5.24 win10 2004   2 2021.8.29 win10 21H1    笔记本清灰记录    序号 日期 备注     1 2020.6.18 风扇都没有拆下来清理   2      常见问题 办公室旧电脑安装精简版Win7，出现错误Windows could not start the installation process，解决方法：删除分区，重新分区。\n","date":"2020-05-24T14:36:25+08:00","permalink":"/archives/win10-reinstall-system/","title":"Win10重装系统\u0026清灰记录"},{"content":"大括号问题，是一年级数学一个必考题目，只有两种做法：加法或者减法。尽管很简单，我们依然要让孩子分清题目的不同表示方法，下面列出三种加法的表示：\n 大括号表示什么意思？表示两部分合起来！ 问号表示什么意思？表示需要求的问题！ 这里必须要注意的地方，是问题的答案必须写在等号的右边，这也是很多孩子容易犯的错误之一。就是把算式写错了，尽管知道正确的结果，但是写的位置不对！\n 用 口诀加强理解：\n 大括号，小问号，\n在一起，我会算。\n小问号，在中间\n求一共，用加法。\n小问号，在一边，\n求部分，用减法。\n 用这个口诀，可以加深孩子的印象。之后，我们就慢慢要给孩子用整体和部分来理解，因为这是理解加法和减法关系的基础。\n解题步骤：\n 看？在哪儿 求什么 加还是减  参考链接：一年级数学上册《大括号问题》\n","date":"2020-05-23T22:49:25+08:00","permalink":"/archives/first-grade-math-da-kuo-hao/","title":"一年级数学上册大括号问题"},{"content":" 首先打开需要操作的知excel表格。 然后在E2单元个中输入“=”号，添加辅助函数rand。 在E2单元格回车，专在E2单元格右下角下拉复制函数。 选择属排序和筛选升序、降序都可以。 最后可看到随机排序完成。  参考：excel如何随机排序\n","date":"2020-05-23T11:38:25+08:00","permalink":"/archives/excel-rank-random/","title":"Excel如何随机排"},{"content":"估算是数学里一种很重要的能力，一年级数学下册有关估算这部分内容出现在课本71页，主要讲的是两位数加两位数的进位加法的估算。首先来了解一下什么是估算，对于两位数加两位数的进位加法的估算，可以把其中一个加数看作与它最接近的“整十数”，也可以把两个加数分别看作与它们接近的“整十数”，再口算出得数。我们拿书上例题为例。淘气摘了17个苹果，笑笑摘了38个苹果，箱子能装60个苹果，让你估一估，这个箱子能装得下吗？\n这里有三种估法，如下： 方法一：把17看作20 20+38=58(个) 58＜60 答：这个箱子装得下。 方法二：把38看作40 17+40=57(个) 57＜60 答：这个箱子装得下。 方法三：把17看作20，把38看作40 20+40=60(个) 60=60 答：这个箱子装得下。 总结：三种估法都是往大了估。往大了估，可以装下，实际比估计的少，所以也能装下。 ------------------------------------------------------------------------------------------ 再看下72页练一练第1题，已知第一袋可装43颗珠子，第二袋可装19颗，第三袋能装38颗，现在70颗能穿一条项链。 问“估一估，哪两袋珠子合起来够穿一条项链”，这里要往小了估。答案如下： 把43看作40 40+38=78(颗) 78＞70 答：第一袋和第三袋能够穿一条项链。 总结：往小了估够70颗，实际比估计的多，肯定也够，所以第一袋和第三袋合起来能穿一条项链。 有时也也会遇到估算类填空题：\n1.估算48+33时，可以把48看作（50），（50）+33=（83），结果是（83）。 2.估算48+33时，可以把48看作（50），把32看作（30），结果是（80）。 更多有关估算类的内容可以查看：\n1.运用估算方法来解答应用题\n2.估算应用题\n","date":"2020-05-20T17:32:25+08:00","permalink":"/archives/first-grade-math-gu-suan/","title":"一年级数学下册估算问题"},{"content":"依次选择视图—分页预览，单击选中后，我们看到文档多出了几条蓝色的实线，分出了第1页、第2页。如果我们想要调整打印的内容，只需要按住鼠标左键，拖动蓝色实线，上下左右移动到合适位置即可，最后查看打印预览，作最后的调整。\n","date":"2020-05-18T21:31:25+08:00","permalink":"/archives/excel-fen-ye/","title":"Excel表格调整分页打印内容"},{"content":"接上篇Centos8安装xfce\u0026amp;vnc，接下来记下，怎样在centos 服务器上挂机。\n安装、更新firefox 安装firefox yum install firefox -y 更新firefox  用你本地的旧版 firefox，访问火狐官网，下载Linux版本的Firefox，因为我的是64位故选择的安装包是：Firefox-latest-x86_64.tar.bz2。 进入存放下载文件（Firefox-latest-x86_64.tar.bz2）的目录。 在该目录解压 Firefox-latest-x86_64.tar.bz2。  解压后会生成一个 firefox 子目录，里面有最新版本的 firefox 的二进制可执行文件，以及各种扩展模块，插件等等。\nyum install tar -y yum install bzip2 -y tar -xjvf Firefox-latest-x86_64.tar.bz2 由于有时解压后出来的文件缺少文件（原因不明），可以采用在外部解压好后，直接拷贝出firefox文件夹的方式。 删除系统默认安装的旧版 firefox ，通常位于 /usr/lib64 目录下。  rm -rf /usr/lib64/firefox 将当前目录下的新版 firefox 子目录复制到 /usr/lib64 目录下。  mv firefox /usr/lib64 进入 /usr/bin 目录，删除其下的 firefox 脚本。  cd /usr/bin rm firefox 回到主目录或根目录，创建一个软链接，指向/usr/lib64/firefox/firefox。  cd ln -s /usr/lib64/firefox/firefox /usr/bin/firefox 查看下最新版本  firefox -v firefox优化 设置开机启动 单击桌面下面最左边的那个X一样的图标选settings–Autostarted applications在弹出的对话框中点击Add,在name中输firefox,Description不用输入，Command中输入firefox如此firefox的开机启动也设置好了!接下来reboot一下看看是否能正常工作!\n设置不保存历史记录 Edit–Preferences–Privacy 在firefox will后面的框里选Never remember history，还要勾选Delete cookies and site data when Firefox is closed\n设置自动播放 依次选择隐私和安全—Permissions—Autoplay—Allow audio and Video\n关闭FireFox恢复上次会话功能  在FF地址栏输入about:config再回车进入设置。 在过滤器中输入browser.sessionstore查找 将browser.sessionstore.max_tabs_undo的值改为0（把非法关闭后保存的Tab页数改为0） 将browser.sessionstore.max_windows_undo的值改为0（把保存的窗口数改为0） browser.sessionstore.resume_from_crash设为false（禁用恢复会话功能） 关闭about:config页，重启firefox  现在可以测试下，打开firefox，随便打开几个网页，再用任务管理器结束firefox.exe进程，再自己启动firefox，应该看不到那恢复会话窗口了。\n火狐禁止提交错误报告 依次选择隐私与安全—Firefox Data Collection and Use，取消勾选Allow firefox to send backlogged crash reports on your behalf\nFirefox 禁止flash崩溃提示 搜索crash\ndom.ipc.plugins.reportCrashURL 改为false\ndom.ipc.plugins.flash.subprocess.crashreporter.enabled 改为false\n(崩溃报告可能会占很大空间，具体方法是删除 /root/.mozilla/firefox/Crash Reports/pending 里所有文件，即删除pending文件夹，按住shift键永久删除）\n其它  解决 “Gah. Your tab just crashed error ”  browser.tabs.remote.autostart 设为false\n安装配置挂机插件 安装插件 在火狐里安装插件。\n配置插件  Start with Firefox，选择true Auto Add Playlists，选择true  设置定时任务 cd /var/spool/cron vi root 00 00 * * * rm -rf /root/.vnc/*.log 01 00 * * * /sbin/reboot 00 06 * * * rm -rf /root/.vnc/*.log 01 06 * * * /sbin/reboot 00 12 * * * rm -rf /root/.vnc/*.log 01 12 * * * /sbin/reboot 00 18 * * * rm -rf /root/.vnc/*.log 01 18 * * * /sbin/reboot 参考链接   1.centos系统crontab实现自动定时重启教程\n  2.centos7 更新Firefox版本\n  ​\n","date":"2020-05-18T15:33:25+08:00","permalink":"/archives/centos8-gua-ji/","title":"Centos8挂机笔记"},{"content":"安装 Xfce 桌面环境 yum install epel-release -y yum groupinstall xfce -y 安装 VNC 服务器 yum install tigervnc-server -y 现在安装了 VNC 服务器，下一步是运行 vncserver 命令，该命令将创建初始配置并设置密码。\nvncserver 系统将提示您输入并确认密码，以及是否将其设置为仅查看密码。如果您选择设置仅查看密码，则用户将无法使用鼠标和键盘与 VNC 实例进行交互。所以这里要选择n。\n You will require a password to access your desktops.\nPassword: Verify: Would you like to enter a view-only password (y/n)? n /usr/bin/xauth: file /root/.Xauthority does not exist\n 在继续下一步之前，首先使用 vncserver 带有 -kill 选项和服务器编号作为参数的命令停止 VNC 实例。在我们的例子中，服务器在端口 5901 (:1)中运行，因此我们将使用以下命令停止它：\nvncserver -kill :1 配置 VNC 服务器 现在我们的 CentOS 服务器上安装了 Xfce 和 TigerVNC ，下一步是配置 TigerVNC 使用 Xfce 。为此，请打开以下文件：\nvi ~/.vnc/xstartup 并将默认内容改为以下内容：\n#!/bin/sh unset SESSION_MANAGER unset DBUS_SESSION_BUS_ADDRESS exec startxfce4 保存并关闭文件。无论何时启动或重新启动 TigerVNC 服务器，都将自动执行上述脚本。\n如果需要将 附加选项 传递给 VNC 服务器，则可以打开 ~/.vnc/config 文件并在每行添加一个选项。最常见的选项列在文件中。取消注释并根据自己的喜好进行修改。这是一个例子：\n# securitytypes=vncauth,tlsvnc # desktop=sandbox geometry=1024x768 # localhost # alwaysshared dpi=96 创建 Systemd 单元文件 我们将创建一个 systemd 单元文件，使我们能够根据需要轻松启动，停止和重新启动 VNC 服务，与任何其他 systemd 服务相同。\nsudo cp /usr/lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver@:1.service 使用文本编辑器打开文件，并替换为以下内容（本例用户名为root）。\nvi /etc/systemd/system/vncserver@\\:1.service [Unit] Description=Remote desktop service (VNC) After=syslog.target network.target [Service] Type=forking # Clean any existing files in /tmp/.X11-unix environment ExecStartPre=/bin/sh -c \u0026#39;/usr/bin/vncserver -kill %i \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 || :\u0026#39; ExecStart=/usr/sbin/runuser -l root -c \u0026#34;/usr/bin/vncserver %i\u0026#34; PIDFile=/root/.vnc/%H%i.pid ExecStop=/bin/sh -c \u0026#39;/usr/bin/vncserver -kill %i \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 || :\u0026#39; [Install] WantedBy=multi-user.target 保存并关闭文件。通知 systemd 我们创建了一个新的单元文件，让其重新加载：\nsudo systemctl daemon-reload 下一步是使用以下命令启用单元文件：\nsudo systemctl enable vncserver@:1.service 符号 1 后面的数字 @ 定义了 VNC 服务将在其上运行的显示端口，在我们的情况下，这是默认设置 1 ， VNC 服务器将在端口上侦听， 5901 如我们在上一节中讨论的那样。\n执行以下命令启动 VNC 服务：\nsudo systemctl start vncserver@:1.service 验证服务是否已成功启动：\nsudo systemctl status vncserver@:1.service  ● vncserver@:1.service - Remote desktop service (VNC) Loaded: loaded (/etc/systemd/system/vncserver@:1.service; enabled; vendor pr\u0026gt; Active: active (running) since Mon 2020-05-18 14:00:12 CST; 23min ago Process: 806 ExecStart=/usr/sbin/runuser -l root -c /usr/bin/vncserver :1 (co\u0026gt; Process: 767 ExecStartPre=/bin/sh -c /usr/bin/vncserver -kill :1 \u0026gt; /dev/null \u0026gt; Main PID: 1018 (Xvnc) Tasks: 0 (limit: 6193) Memory: 716.0K\n 连接到 VNC 服务器 下载vnc viewer，输入ip:1登录。\n参考链接  如何在 CentOS 7 上安装和配置 VNC  ","date":"2020-05-18T14:06:25+08:00","permalink":"/archives/centos8-xfce-vnc/","title":"Centos8安装xfce\u0026vnc"},{"content":"1.按住alt键，拖动直线，会拉出一个尖点。\n2.Ctrl+g 将绘图对象变成组，就不会覆盖；Ctrl+b将组打散。\n3.flash中只有两种绘画对象：线条、填充。所有绘画对象都是由线条和填充组成的。\n","date":"2020-05-17T12:32:25+08:00","permalink":"/archives/flash-tips/","title":"Flash小技巧"},{"content":"一年级比多比少类问题，应该说是一个难点。部分同学看见“多”就用加法，看见“少”就用减法，这样是不对的，一般说来比多比少类问题有三种题型，现在做个简单的总结，具体如下（题目选自网上）：\n 求“多多少”、“少多少”都用减法。  例如：小明有39张卡片，小华有23张，小华比小明少多少张卡片？（或者小明比小华多多少张卡片？）\n求“较大数”用加法。  例如：小明有39张卡片，小华比小明多12张，小华有多少张卡片？\n或者：小明有39张卡片，比小华少12张，小华有多少张卡片？\n这两题其实是一样的，求的都是小华，求小华求的是较大数，所以用加法。\n求“较小数”用减法。  例如：小明有39张卡片，小华比小明少12张，小华有多少张卡片？\n或者：小明有39张卡片，比小华多12张，小华有多少张卡片？\n这两题其实是一样的，求的都是小华，求小华求的是较小数，所以用减法。\n 另外还有比多比少列式计算题，相关内容可查看：一年级数学下册列式计算(加数、被减数、比多比少)\n","date":"2020-05-17T10:20:25+08:00","permalink":"/archives/first-grade-math-duo-shao/","title":"一年级数学比多比少类问题"},{"content":"首先要记忆以下几个公式：\n加数+加数=和 被减数-减数=差 和-加数=加数 被减数-差=减数 减数+差=被减数 要让他们将以上几个公式，写在数学书第一页上，然后背诵。列式计算具体习题如下：\n1、一个加数是25，另一个加数是36，和是多少? 2、两个加数都是46，和是多少？ 3、一个加数是37，另一个加数比它多17，和是多少？ 4、被减数是56，减数是39，差是多少？ 5、两个加数的和是87，其中的一个加数是40，另一个加数是多少？ 6、被减数是56，差是34，减数是多少？ 7、减数是27，差是49，被减数是多少？ 8、72与45的差，再加上38是多少？ 9、36与45的和，再减去42是多少？ 10、86比20多多少？ 11、一个加数由3个十和4个一组成，另一个加数由2个十和7个一组成， 这两个加数的和是多少？ 12、30比90少多少？ 13、三个25连续相加，和是多少？ 14、从80里减去27，在加上25，和是多少？ 15、一个数是56，它比哪一个数大21，另一个数是多少？它们的和是多少？它们的和是多少？ 16、72和91相差多少？ 17、比85少39的数是多少？ 18、甲数是26，乙数是35，丙数是28，它们的和是多少？ 19、35与44的差，再加上30与16的和，得多少？  \n列式计算 1、67比30多多少？ 2、78比70多多少？ 3、34比40少多少？ 4、66比60小多少？ 5、93比90大多少？ 6、 比78多9的数是多少？ 7、比34少6的数是多少？ 8、最大的一位数与最小的两位数的和是多少？差是多少？ 9、两个加数都是30，它们的和是多少？差是多少？ 10、减数是50，差是34，被减数是多少？ 11、减数和差都是40，被减数是多少？ 12、26加上34与30的差，和是多少？ 13、76减去21与9的和，差是多少？ 一、列式计算。 1、 一个加数是45，另一个加数是28，和是多少? 2` 40与57相差多少? 3. 43比20多多少? 4. 两个加数都是45,和是多少? 5. 一个加数是25, 另一个加数是19, 和是多少? 6. 18与32的和是多少? 7. 被减数是50，减数是26，差是多少? 8. 62比27大多少？ 9. 减数是26，被减数是32，差是几？ 10. 两个加数都是34，和是多少？ 11.1 8比37小多少？　12.23和32相差多少？ 13. 比42少17的数是多少? 14. 比38多29的数是多少? 15.25比70少多少？ 16.减数是24，差是16，被减数是多少？ 17.60比34多多少？ 18.25加上18，再减去24，得多少？ 19.5个4相加是多少？ 20.60减去45，再加上26，得多少？ 21、2个5连加得多少？ 22.最小的三位数比最大的两位数多多少？ 23.最大的两位数比最大的一位数多多少？ 24.35比100少多少？ 25.两个因数都是5，积是多少？ 26.5乘3得多少？ 27.一个因数是5，另一个因数是2，积是多少？ 28.两个数的和是45，其中一个加数是13，另一个加数是多少？ 29.5和4相乘得多少？ 30.3个5相加的和是多少？ 31.比28多16的数是多少？ 32.比28少16的数是多少？ 33.减数是36，差是24，被减数是多少？ 34.被减数和减数都是26，差是多少？ 题目选自：\n 1.一年级下数学列式计算题及答案 2.一年级下册数学列式计算专项练习 3.小学一年级数学下册列式计算题专项训练  ","date":"2020-05-16T09:10:25+08:00","permalink":"/archives/first-grade-math-lie-shi/","title":"一年级数学下册列式计算(加数、被减数、比多比少)"},{"content":"1.鼠标右键点击桌面左下角的开始菜单，选择“命令提示符（管理员）\n2.在打开的黑色命令提示符窗口中输入 notepad，敲回车；\n3.打开的记事本页面中点右上角的文件，然后点打开\nC:\\Windows\\System32\\drivers\\etc\\hosts\n4.在打开的host文件中修改你要添加的内容，最后保存。\n","date":"2020-05-16T01:04:25+08:00","permalink":"/archives/win10-change-host/","title":"Win10 修改host文件的方法"},{"content":"首先当然是备份博客源文件。\n更换服务器 参考：\n Hugo部署到centos —服务器操作部分 Hugo部署到ubuntu —服务器操作部分  更换电脑、重装系统 本地操作 参考：hugo部署到coding—本地操作部分，重新配置环境，生成公钥。\n注意最后不用初始化hugo，因为我们已经有了博客原文件了。\n服务器上的操作 如果是部署到服务器，先将服务器原来的SSH 公钥先删除，再上传新的SSH 公钥。具体操作如下:\n服务器上输入：\nsu git cd ~/.ssh rm -rf authorized_keys 本地Git Bash里输入：\nssh-copy-id -i ~/.ssh/id_rsa.pub git@服务器ip地址 如果在git bash中输入ssh git@服务器的IP地址,能够远程登录的话，则表示设置成功了。如若还是要输入密码，就修改目录权限：\nchmod 600 ~/.ssh/authorized_keys chmod 700 ~/.ssh github\u0026amp;gitee上的操作 如果是备份源码到githuhb上，部署网页到gitee上，要将重新生成的SSH公钥添加到github\u0026amp;gitee上。两者都在右上角个人设置里添加。\n本地最后调试 重装系统后，Algolia的自动提交索引功能要重新部署一遍，具体可查看：Hugo添加Algolia。最后还要在博客目录里重新关联远程仓库，还是一样先备份源码到github，再部署网页到相应服务器。\n先备份源码，再部署网页，是为了GitInfo以及lastmod能够生效和更新，其实源码可以备份到github、gitee、coding中任意一个公开仓库都可以，当然备份到github最好。网页也无需和源码放在同一个代码托管平台上。\n","date":"2020-05-15T00:19:25+08:00","permalink":"/archives/hugo-qian-yi/","title":"Hugo迁移笔记"},{"content":"启用阿里免费证书 申请证书 查看：申请免费DV试用证书\n安装证书 基本操作参考：在Nginx/Tengine服务器上安装证书，这里具体讲下Nginx上的配置。\n1.在nginx根目录（默认为/etc/nginx）下创建目录cert。\ncd /etc/nginx mkdir cert 2.把下载的证书两个文件.pem和.key上传到目录cert中。\n3.修改nginx配置文件。vi /etc/nginx/conf.d/hexo.conf\nserver { listen 80; server_name bore.vip www.bore.vip; rewrite ^(.*)$ https://$server_name$1 permanent; } server { listen 443; root /var/www/hexo; server_name bore.vip www.bore.vip; ssl on; ssl_certificate /etc/nginx/cert/xxxx.pem; ssl_certificate_key /etc/nginx/cert/xxxx.key; ssl_session_timeout 5m; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP; ssl_prefer_server_ciphers on; access_log /var/log/nginx/hexo_access.log; error_log /var/log/nginx/hexo_error.log; error_page 404 = /404.html; location ~* ^.+\\.(ico|gif|jpg|jpeg|png)$ { root /var/www/hexo; access_log off; expires 1d; } location ~* ^.+\\.(css|js|txt|xml|swf|wav)$ { root /var/www/hexo; access_log off; expires 10m; } location / { root /var/www/hexo; if (-f $request_filename) { rewrite ^/(.*)$ /$1 break; } } location /nginx_status { stub_status on; access_log off; } } 4.修改hugo站点配置文件_config.toml\nbaseURL = \u0026quot;https://bore.vip/\u0026quot;\n5.开启负载均衡\n在阿里云SSl证书控制台，依次选择部署—负载均衡—选择所有区域，然后部署。\n6.重启nginx服务。\nubuntu、centos 6\n/etc/init.d/nginx restart\ncentos 7、8\nsystemctl restart nginx 添加 Let\u0026rsquo;s Encrypt 免费证书 Ubuntu上的操作 安装 Certbot 在 Ubuntu 上只需要简单的一行命令：\nsudo apt-get install letsencrypt\n其他的发行版可以在这里选择。\n使用 webroot 自动生成证书 Certbot 支持多种不同的「插件」来获取证书，这里选择使用 webroot 插件，它可以在不停止 Web 服务器的前提下自动生成证书，使用 --webroot 参数指定网站的根目录。\nletsencrypt certonly --webroot -w /var/www/hexo -d iwyang.top\n这样，在 /var/www/hexo 目录下创建临时文件 .well-known/acme-challenge ，通过这个文件来证明对域名 iwyang.top 的控制权，然后 Let’s Encrypt 验证服务器发出 HTTP 请求，验证每个请求的域的 DNS 解析，验证成功即颁发证书。\n生成的 pem 和 key 在 /etc/letsencrypt/live/ 目录下\n cert.pem 用户证书 chain.pem 中间证书 fullchain.pem 证书链, chain.pem + cert.pem privkey.pem 证书私钥\n `\n自动续期 Let’s Encrypt 的证书有效期为 90 天，不过我们可以通过 crontab 定时运行命令更新证书。\n先运行以下命令来测试证书的自动更新：\nletsencrypt renew --dry-run --agree-tos\n如果一切正常，就可以编辑 crontab 定期运行以下命令：\ncrontab -e * 2 * * * service nginx stop \u0026amp; letsencrypt renew \u0026amp; service nginx start 配置 Nginx 修改 Nginx 配置文件中关于证书的配置：\nvi /etc/nginx/conf.d/hexo.conf server { listen 80; server_name iwyang.top www.iwyang.top; rewrite ^(.*)$ https://$server_name$1 permanent; } server { listen 443; root /var/www/hexo; server_name iwyang.top www.iwyang.top; ssl on; ssl_certificate /etc/letsencrypt/live/iwyang.top/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/iwyang.top/privkey.pem; ssl_session_timeout 5m; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP; ssl_prefer_server_ciphers on; access_log /var/log/nginx/hexo_access.log; error_log /var/log/nginx/hexo_error.log; error_page 404 = /404.html; location ~* ^.+\\.(ico|gif|jpg|jpeg|png)$ { root /var/www/hexo; access_log off; expires 1d; } location ~* ^.+\\.(css|js|txt|xml|swf|wav)$ { root /var/www/hexo; access_log off; expires 10m; } location / { root /var/www/hexo; if (-f $request_filename) { rewrite ^/(.*)$ /$1 break; } } location /nginx_status { stub_status on; access_log off; } } 然后重启 Nginx ，应该就可以看到小绿标了。/etc/init.d/nginx restart\nCentos 8上的操作 安装Certbot yum install epel-release -y yum install certbot -y 然后执行：\ncertbot certonly --webroot -w /var/www/hexo -d bore.vip -m 455343442@qq.com --agree-tos 配置Nginx 顶级域名参考上面Ubuntu Nginx的配置，二级域名操作如下：\nvi /etc/nginx/conf.d/hexo.conf server { listen 80; server_name bore.vip www.bore.vip; rewrite ^(.*)$ https://$server_name$1 permanent; } server { listen 443; root /var/www/hexo; server_name bore.vip www.bore.vip; ssl on; ssl_certificate /etc/letsencrypt/live/bore.vip/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/bore.vip/privkey.pem; ssl_session_timeout 5m; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP; ssl_prefer_server_ciphers on; access_log /var/log/nginx/hexo_access.log; error_log /var/log/nginx/hexo_error.log; error_page 404 = /404.html; location ~* ^.+\\.(ico|gif|jpg|jpeg|png)$ { root /var/www/hexo; access_log off; expires 1d; } location ~* ^.+\\.(css|js|txt|xml|swf|wav)$ { root /var/www/hexo; access_log off; expires 10m; } location / { root /var/www/hexo; if (-f $request_filename) { rewrite ^/(.*)$ /$1 break; } } location /nginx_status { stub_status on; access_log off; } } 重启Nginx生效：\nsystemctl restart nginx 证书自动更新 由于这个证书的时效只有 90 天，我们需要设置自动更新的功能，帮我们自动更新证书的时效。首先先在命令行模拟证书更新：\ncertbot renew --dry-run 模拟更新成功的效果如下：\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ** DRY RUN: simulating \u0026#39;certbot renew\u0026#39; close to cert expiry ** (The test certificates below have not been saved.) ## 可以看到两个域名续期成功 The following certs were successfully renewed: /etc/letsencrypt/live/blog.bore.vip/fullchain.pem (success) /etc/letsencrypt/live/f.bore.vip/fullchain.pem (success) ## 以下失败的一个域名不用管 The following certs could not be renewed: /etc/letsencrypt/live/novel.bore.vip/fullchain.pem (failure) ** DRY RUN: simulating \u0026#39;certbot renew\u0026#39; close to cert expiry ** (The test certificates above have not been saved.) - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 在无法确认你的 nginx 配置是否正确时，一定要运行模拟更新命令，确保certbot和服务器通讯正常。使用 crontab -e 的命令来启用自动任务，命令行：\ncrontab -e 添加配置：（每隔两个月凌晨2:30自动执行证书更新操作）后保存退出。\n30 2 * */2 * /usr/bin/certbot renew --quiet \u0026amp;\u0026amp; /bin/systemctl restart nginx 查看证书有效期的命令：\nopenssl x509 -noout -dates -in /etc/letsencrypt/live/bore.vip/cert.pem 参考链接  1.在Nginx/Tengine服务器上安装证书 2.阿里云hexo站点https之nginx配置 3.为博客添加 Let\u0026rsquo;s Encrypt 免费证书  4.ubuntu 生成https证书 for let\u0026rsquo;s encrypt 5.Ubuntu 16设置定时任务 6.Ubuntu查看crontab运行日志 7.Let\u0026rsquo;s Encrypt证书自动更新 8.CentOS 7 Nginx配置Let\u0026rsquo;s Encrypt SSL证书  ","date":"2020-05-14T10:07:25+08:00","permalink":"/archives/enable-ssl-on-nginx/","title":"Nginx配置ssl证书"},{"content":"服务器环境：Centos 8 x64\n本地环境：Win10 x64\n本地操作 参考：hugo部署到coding\u0026amp;gitee-本地操作部分\n服务器操作  注意：这里是参照服务器搭建hexo，所以代码里hexo没有改成hugo，不过这没有任何影响。\n 准备工作：如果服务器端口不是22，先要更改SSH端口，\nvi /etc/ssh/sshd_config port 22 然后重启生效。\n首先，在服务器上安装 Git 和 nginx。\n2021.5.27 注意最好不要执行下面第一步升级操作，不然升级到最后一步会卡死，最后导致后面无法启动nginx。\ryum update -y yum install git-core nginx -y 如果是centos 7，先要安装安装epel：yum install epel-release，才能安装nginx。\nNginx 安装完成后需要手动启动，启动Nginx并设置开机自启：\nsystemctl start nginx systemctl enable nginx 如果开启了防火墙，记得添加 HTTP 和 HTTPS 端口到防火墙允许列表。\nfirewall-cmd --permanent --zone=public --add-service=http firewall-cmd --permanent --zone=public --add-service=https firewall-cmd --reload systemctl restart firewalld.service 配置完成后，访问使用浏览器服务器 ip ，如果能看到以下界面，表示运行成功。\n配置用户 然后新增一个名为 git 的用户，过程中需要设置登录密码，输入两次密码即可。\nadduser git passwd git 给用户 git 赋予无需密码操作的权限（否则到后面 Hexo 部署的时候会提示无权限）\nchmod 740 /etc/sudoers vi /etc/sudoers 在图示位置root ALL=(ALL:ALL) ALL的下方添加\ngit ALL=(ALL:ALL) ALL 然后保存。然后更改读写权限。\nchmod 440 /etc/sudoers 上传 SSH 公钥 接下来要把本地的 ssh 公钥上传到服务器 。执行\nsu git cd ~ mkdir .ssh \u0026amp;\u0026amp; cd .ssh touch authorized_keys vi authorized_keys 现在要打开本地的 Git Bash，输入vi ~/.ssh/id_rsa.pub，把里面的内容复制下来粘贴到上面打开的文件里。\n接着把ssh目录设置为只有属主有读、写、执行权限。代码如下：\nchmod 600 ~/.ssh/authorized_keys chmod 700 ~/.ssh 然后建立放部署的网页的 Git 库。\ncd ~ mkdir hexo.git \u0026amp;\u0026amp; cd hexo.git git init --bare 测试一下，如果在 Git Bash 中输入 ssh git@服务器的IP地址 能够远程登录的话，则表示设置成功了。如果你的服务器端口不是22。最好像开头那样更改SSH端口。也可以参考：上传SSH公钥。\n ps: 如果配置完成还是提示要输入密码，可以使用 ssh-copy-id，在本地打开 Git Bash 输入：\nssh-copy-id -i ~/.ssh/id_rsa.pub git@服务器ip地址  用户授权 接下来要给用户 git 授予操作 nginx 放网页的地方的权限：\nsu mkdir -p /var/www/hexo chown git:git -R /var/www/hexo 配置钩子 现在就要向 Git Hooks 操作，配置好钩子：\nsu git cd /home/git/hexo.git/hooks vi post-receive 输入内容并保存：（里面的路径看着换吧，上面的命令没改的话也不用换）\n#!/bin/bash GIT_REPO=/home/git/hexo.git TMP_GIT_CLONE=/tmp/hexo PUBLIC_WWW=/var/www/hexo rm -rf ${TMP_GIT_CLONE} git clone $GIT_REPO $TMP_GIT_CLONE rm -rf ${PUBLIC_WWW}/* cp -rf ${TMP_GIT_CLONE}/* ${PUBLIC_WWW} 赋予可执行权限：\nchmod +x post-receive 配置 nginx 然后是配置 nginx。执行\nsu vi /etc/nginx/conf.d/hexo.conf server { listen 80 ; listen [::]:80; root /var/www/hexo; server_name bore.vip www.bore.vip; access_log /var/log/nginx/hexo_access.log; error_log /var/log/nginx/hexo_error.log; error_page 404 = /404.html; location ~* ^.+\\.(ico|gif|jpg|jpeg|png)$ { root /var/www/hexo; access_log off; expires 1d; } location ~* ^.+\\.(css|js|txt|xml|swf|wav)$ { root /var/www/hexo; access_log off; expires 10m; } location / { root /var/www/hexo; if (-f $request_filename) { rewrite ^/(.*)$ /$1 break; } } location /nginx_status { stub_status on; access_log off; } } 因为放中文进去会乱码所以就不在里面注释了。代码里面配置了默认的根目录，绑定了域名，并且自定义了 404 页面的路径。 最后就重启 nginx 服务器：\nsystemctl restart nginx  如果上传网页后，Nginx 出现 403 Forbidden，执行：\nvi /etc/selinux/config 将SELINUX=enforcing 修改为 SELINUX=disabled 状态。\nSELINUX=disabled 重启生效，reboot。\n ps: 最好做一个301跳转，把bore.vip和www.bore.vip合并，并把之前的域名也一并合并. 有两种实现方法,第一种方法是判断nginx核心变量host(老版本是http_host)：\nserver { server_name bore.vip www.bore.vip ; if ($host != \u0026#39;bore.vip\u0026#39; ) { rewrite ^/(.*)$ http://bore.vip/$1 permanent; } ... } 修改自动部署脚本 #!/bin/bash  echo -e \u0026#34;\\033[0;32mDeploying updates to Coding...\\033[0m\u0026#34; # Removing existing files rm -rf public/* # Build the project hugo # Go To Public folder cd public git remote rm origin git init git remote add origin git@你的ip:hexo.git git add . # Commit changes. msg=\u0026#34;rebuilding site `date`\u0026#34; if [ $# -eq 1 ] then msg=\u0026#34;$1\u0026#34; fi git commit -m \u0026#34;$msg\u0026#34; # Push source and build repos. git push origin master --force # Come Back up to the Project Root cd .. 或直接在Git Bash中手动运行以下代码：\nrm -rf public/* hugo cd public git remote rm origin git init git remote add origin git@104.224.191.88:hexo.git git add . git commit -m \u0026#34;building site\u0026#34; git push origin master --force 总结 最好不要反复切换部署仓库，否则git会出现以下错误提示：\nremote: error: The last gc run reported the following. Please correct the root cause remote: and remove gc.log. remote: Automatic cleanup will not be performed until the file is removed. remote: remote: warning: There are too many unreachable loose objects; run \u0026#39;git prune\u0026#39; to remove them. 查资料，原来是自己本地一些 “悬空对象”太多(git删除分支或者清空stash的时候，这些其实还没有真正删除，成为悬空对象，我们可以使用merge命令可以从中恢复一些文件)\n解决方法：\n1.输入命令：git fsck --lost-found，可以看到好多“dangling commit”\n2.清空他们：git gc --prune=now，完成\n参考链接  1.在服务器上搭建hexo博客，利用git更新 2.从 0 开始搭建 hexo 博客 3.基于CentOS搭建Hexo博客 4.Nginx出现403 forbidden 5.git运行突然提示 remote: error: The last gc run reported the following  ","date":"2020-05-13T18:05:25+08:00","permalink":"/archives/hugo-install-on-centos/","title":"Hugo部署到centos服务器"},{"content":"本地操作 安装GIt 本地需要安装 Git ，安装过程略。安装完git后还要配置环境变量： 右键我的电脑 \u0026ndash;\u0026gt; 属性，然后点击高级系统设置 \u0026ndash;\u0026gt; 环境变量 \u0026ndash;\u0026gt; 选择用户变量或系统变量中的Path,点击编辑；找到Git安装目录,添加以下地址:\nD:\\Program Files\\Git\\bin D:\\Program Files\\Git\\mingw64\\libexec\\git-core D:\\Program Files\\Git\\mingw64\\bin 配置SSH 公钥 Windows 上安装 Git for Windows 之后在开始菜单里打开 Git Bash 输入：\ngit config --global user.name \u0026#34;你的用户名\u0026#34; git config --global user.email \u0026#34;你的电子邮箱\u0026#34; cd ~ mkdir .ssh cd .ssh ssh-keygen -t rsa 在系统当前用户文件夹下生成了私钥 id_rsa 和公钥 id_rsa.pub。\n初始化 Hugo 安装hugo windows10下安装hugo，可以参照Hugo官方手册的方法，这里讲一个相对简单稳定的方法。\n1.下载hugo程序压缩包：前往https://github.com/gohugoio/hugo/releases下载和自己系统版本相符合的hugo程序压缩包。(建议下载hugo_extended版本)\n2.解压到某个文件夹中（路径不要有中文，而且自己要记得文件夹的路径），最好是不常改动的文件夹下边，以防文件被误删或者丢失。\n3.添加hugo到系统环境变量PATH中\n 找到“系统环境变量”的设置位置，在开始菜单的搜索栏搜索环境变量 添加用户环境变量，依此：点击环境变量，找到用户变量中的path，点击编辑，然后点击新建，在使用浏览按钮选中文件夹，即可使用hugo。（选中到hugo.exe所在的文件夹即可，不需要选中hugo.exe，貌似添加完系统变量，要重启电脑才能在Git Bash里运行hugo） 接下来，为了万无一失，还是要检查一下hugo是否安装完成。以管理员方式打开cmd命令窗口，然后输入以下指令：  hugo version 如果得到如下响应，（即显示版本信息），说明安装成功，接下来就可以玩转hugo了。\nHugo Static Site Generator v0.70.0/extended windows/amd64 BuildDate: unknown 创建并配置站点  以下命令均在\u0026rsquo;Git Bash\u0026rsquo;中运行\n 进入你想存放 Hugo 网站文件夹的目录，执行以下命令：\nhugo new site blog 添加主题 git clone https://github.com/dillonzq/LoveIt.git themes/LoveIt 附更新主题命令：\ncd ./themes/LoveIt/ git pull 配置主题\n将 根目录\\themes\\even\\exampleSite路径下的config.toml文件复制到根目录下，覆盖掉根目录下的config.toml文件。然后，我们在notepad++中打开并对其作一定的修改就可以直接使用。\n配置config.toml 略\n设置文章模板 为了更好的使用附加功能，我们提前修改一下模板。这样，每次使用新建一篇文档时候就省去很多麻烦事。 使用Typora文档工具打开themes/tranquilpeak/archetypes中的post.md直接替换为以下的模板：\n---title:\u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34;\u0026#34; | title }}\u0026#34;date:{{.Date }}lastmod:{{.Date }}draft:falseweight:falsecategories:[\u0026#34;\u0026#34;]tags:[\u0026#34;\u0026#34;]　接下来在根目录下使用以下命令生成一篇文档吧：\nhugo new post/XXXX.md 新建“关于”页面 hugo new about.md config.toml相应位置添加：\n[[menu.main]]name = \u0026#34;关于\u0026#34;weight = 50identifier = \u0026#34;about\u0026#34;url = \u0026#34;/about/\u0026#34;启动博客的本地预览 建议在配置文件中设置好主题，或者使用 –t指令指定主题，在站点的根目录下使用命令进行本地启动，本地启动的命令如下：\nhugo server -D 使用浏览器打开 http://localhost:1313 预览。\n部署到coding 略\n提交本地仓库 rm -rf public/* hugo cd public git remote rm origin git init git remote add origin git@e.coding.net:iwyang/hugo/hugo.git git add . git commit -m \u0026#34;Add a new post\u0026#34; git push --force origin master 备份脚本 为了后续更新方便起见，可以在根目录新建一个一键部署脚本，命名为deploy.sh（如果对配置不做大的改动（例如：更换主题等），后续的更新可以使用以下脚本）\n#!/bin/bash  echo -e \u0026#34;\\033[0;32mDeploying updates to gitee...\\033[0m\u0026#34; # Removing existing files rm -rf public/* # Build the project hugo # Go To Public folder cd public git add . # Commit changes. msg=\u0026#34;rebuilding site `date`\u0026#34; if [ $# -eq 1 ] then msg=\u0026#34;$1\u0026#34; fi git commit -m \u0026#34;$msg\u0026#34; # Push source and build repos. git push origin master --force # Come Back up to the Project Root cd .. 创建完脚本以后，不要忘了加权限\nchmod 777 xxx 提交本地仓库 rm -rf public/* hugo cd public git remote rm origin git init git remote add origin git@gitee.com:iwyang/iwyang.git git add . git commit -m \u0026#34;Add a new post\u0026#34; git push origin master --force 备份hugo源码 git remote rm origin git init git checkout -b backup git add . git commit -m \u0026#34;备份源码\u0026#34; git remote add origin git@gitee.com:iwyang/iwyang.git git push origin backup --force 备份hugo源码 PS: 如果执行第三步git checkout -b backup后，提示fatal: A branch named 'backup' already exists.，则执行以下操作：\ngit branch -D backup #删除分支:必须切换到其他的分之下才可操作 git checkout -b backup #切换分支 备份到github master分支 git remote rm origin git init git add . git commit -m \u0026#34;备份源码\u0026#34; git remote add origin git@github.com:iwyang/hugo.git git push --force origin master   PS:这里Git Bash开头会报错：warning: LF will be replaced by CRLF，解决方法：在git add .前面添加：\n git config --global core.autocrlf false 最终效果：\n# backup git config --global core.autocrlf false git add . git commit -m \u0026#34;备份源码\u0026#34; git remote add origin git@github.com:iwyang/hugo-backup.git git push origin master --force 在部署脚本里也要作相应修改。\n总结 最好不要反复切换部署仓库，否则git会出现以下错误提示：\nremote: error: The last gc run reported the following. Please correct the root cause remote: and remove gc.log. remote: Automatic cleanup will not be performed until the file is removed. remote: remote: warning: There are too many unreachable loose objects; run \u0026#39;git prune\u0026#39; to remove them. 查资料，原来是自己本地一些 “悬空对象”太多(git删除分支或者清空stash的时候，这些其实还没有真正删除，成为悬空对象，我们可以使用merge命令可以从中恢复一些文件)\n解决方法：\n1.输入命令：git fsck --lost-found，可以看到好多“dangling commit”\n2.清空他们：git gc --prune=now，完成\n参考链接  1.Hugo+github搭建个人博客 (windows10) 2.如何利用 GitHub Pages 和 Hugo 轻松搭建个人博客？ 3.Hugo 从入门到会用 4.码云Pages 5.git运行突然提示 remote: error: The last gc run reported the following  ","date":"2020-05-13T09:42:25+08:00","permalink":"/archives/hugo-install-on-coding/","title":"hugo部署到coding\u0026备份源码"},{"content":"上回做过hexo迁移笔记，基本思路是利用U盘拷贝，或者网盘自动同步来备份，这回是通过git备份还原hexo源码。\n Hexo博客存在一个问题：我们仅仅将博客的静态页面文件部署到了github远程仓库中，而我们的站点源文件仍在本地存储。如果存储站点源文件的电脑系统崩溃了，或者我们换了其他电脑，我们便无法实时更新博客了。\n  如果选择重新搭建站点，不仅过程繁琐，而且还需要大量时间安装依赖、主题配置、博客优化，极其麻烦。所以我们需要将站点必要文件也部署到远程仓库中。然而github的私有仓库是要收费的，如果用免费仓库，暴露hexo源码，尤其是配置文件是很不安全的，因为配置文件中可能含有你的隐私信息，比如各种秘钥等。所以有一个私人仓库是很有利的。你可以通过购买服务器搭建自己的git私人服务器并备份hexo源码。你也可以在coding等这样提供私人仓库的服务商进行hexo源码备份。 我们采取的远程仓库部署策略是：使用coding的私人仓库，一个仓库两个分支。仓库即[yourname.coding.me]，一个分支[master]用于托管演示页面，一个分支[backup]用于备份Hexo博客站点的必要文件。\n 备份 多机同步更新的前提：backup分支（也可以是其他名称的分支或者新的仓库）\nHexo博客站点的必要文件：\n.├── scaffolds # 文章模板├── source # 用户源文件：页面，文章markdown文件├── themes # 主题├── .gitignore # git忽略文件信息├── _config.yml # 站点配置文件├── package.json# 已安装插件映射表，下次只需npm install即直接安装表中的插件├── package-lock.json使git上传远程git服务器（这里是coding）时可忽略不必要的文件，做法是编辑站点根目录下的.gitignore文件，复制粘贴一下内容到.gitignore文件中。\n.DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/删除必要文件 删除themes/你的主题中的.git，.github，.gitignore等git仓库文件，只保留站点根目录下的.gitignore。\nhexo源码备份 备份到gitee backup分支 2020.7.8 现在没用这种备份方法\ngit init git checkout -b backup git add .\tgit commit -m \u0026#34;提交说明\u0026#34; git remote add origin git@gitee.com:iwyang/iwyang.git git push --force origin backup\t备份到github master分支 2020.7.8 目前采用这种备份方法\ngit init git remote add origin git@github.com:iwyang/hexo.git git add . git commit -m \u0026#34;site backup\u0026#34; git push --force origin master  PS: 如果执行第二步git checkout -b backup后，提示fatal: A branch named 'backup' already exists.，则执行以下操作\ngit remote rm origin git checkout -b backup 实在不行先执行下面命令：\ngit branch -D backup #删除分支:必须切换到其他的分之下才可操作  还原 还原前提 安装Git，nodejs，配置环境变量。\nhexo源码还原 $ git clone git@github.com:iwyang/hexo.git\t# 克隆master分支到本地，私有仓库需要输入用户名和密码 $ cd hexo-master\t# 进入hexo-master文件夹 $ npm install -g hexo-cli\t# 全局安装hexo $ npm install\t# 安装所有依赖(hexo以及插件的依赖)，根据package.json自动安装之前安装过的插件 Git配置用户信息（新系统环境下） 在Git bash中输入：\n1.设置用户名\ngit config --global user.name \u0026#39;这里填写自己的用户名\u0026#39; 2.设置用户名邮箱\ngit config --global user.email \u0026#39;这里填写自己的用户邮箱\u0026#39; 3.查看配置信息\ngit config --list 注意：该设置在GitHub仓库主页显示谁提交了该文件，注意这里的 - 有两个！\n配置网络协议 SSH协议，长期部署推荐SSH，一劳永逸。\n1.SSH秘钥：\n$ ssh-keygen -t rsa -C \u0026#34;youremail@example.com\u0026#34;\t# 生成rsa秘钥 $ cd ~/.ssh\t# 进入虚拟目录ssh文件中 $ cat id_rsa.pub\t# 显示id_rsa.pub文件内容 2.复制秘钥至github/coding-\u0026gt;用户setting-\u0026gt;SSH keys，New SSH Key\n3.验证是否添加成功\n$ ssh -T git@github.com # 验证github是否添加成功 $ ssh -T git@git.coding.net # 验证coding是否添加成功 4.编辑站点配置文件_config.yml\ndeploy: type: git repo: github: git@github.com:yourname/yourname.github.io.git coding: git@git.coding.net:yourname/yourname.coding.me.git branch: master 及时更新hexo源码到coding 发表文章、更新文章、修改源码，要及时更新hexo源码到coding。\ngit add . git commit -m \u0026#34;更新\u0026#34; git push --force origin master 2020.7.8 把这段代码放在自动部署脚本里即可。\n参考链接 1.通过git备份还原hexo源码\n2.git报错：\u0026lsquo;fatal:remote origin already exists\u0026rsquo;怎么处理\n3.git 常用命令\n","date":"2020-05-10T23:09:25+08:00","permalink":"/archives/hexo-backup/","title":"hexo通过git备份\u0026还原源码"},{"content":"服务器环境：Centos 8 x64\n本地环境：Win10 x64\n本地操作 安装 Git 和 Node.js 本地需要安装 Git 和 Node.js，安装过程略。\n安装完git后还要配置环境变量： 右键我的电脑 –\u0026gt; 属性，然后点击高级系统设置 –\u0026gt; 环境变量 –\u0026gt; 选择用户变量或系统变量中的Path,点击编辑；找到Git安装目录,添加以下地址:\nD:\\Program Files\\Git\\bin D:\\Program Files\\Git\\mingw64\\libexec\\git-core D:\\Program Files\\Git\\mingw64\\bin 配置SSH 公钥 Windows 上安装 Git for Windows 之后在开始菜单里打开 Git Bash 输入：\ngit config --global user.name \u0026#34;你的用户名\u0026#34; git config --global user.email \u0026#34;你的电子邮箱\u0026#34; cd ~ mkdir .ssh cd .ssh ssh-keygen -t rsa 在系统当前用户文件夹下生成了私钥 id_rsa 和公钥 id_rsa.pub。\n初始化 Hexo 在电脑任意目录新建一个文件夹 hexo，进入文件夹，在空白处点击右键选择 Git Bash，输入：\nnpm install -g hexo-cli hexo init npm install hexo d -fg hexo serve 这样便在本地初始化了 Hexo 文件夹，然后输入： hexo new post \u0026quot;第一篇文章\u0026quot; 即可新建一篇文章，用文本编辑器打开 hexo/source/_post/第一篇文章.md 可以快速开始写作。其余使用方法和配置按照 Hexo 官网操作即可。推荐编辑器**hexo-editor**\n2020/4/27更新: hexo-editor速度太慢，改用Typora\n修改 deploy 参数 打开位于 hexo 文件夹下的 _config.yml，修改 deploy 参数：\ndeploy: type: git repo: git@blog.yizhilee.com:hexo.git branch: master 提交到github deploy: type: git repo: coding: git@e.coding.net:iwyang/iwyang.coding.me.git branch: master github、coding双线部署 deploy: type: git repo: github: git@github.com:iwyang/iwyang.github.io.git coding: git@e.coding.net:iwyang/iwyang.coding.me.git branch: master github、coding、服务器三线线部署 deploy: type: git repo: github: git@github.com:iwyang/iwyang.github.io.git coding: git@e.coding.net:iwyang/iwyang.coding.me.git 服务器: git@45.76.173.167:hexo.git branch: master 服务器操作 首先，在 服务器 上安装 Git 和 nginx。\n2021.5.27 注意最好不要执行下面第一步升级操作，不然升级到最后一步会卡死，最后导致后面无法启动nginx。\ryum update -y yum install git-core nginx -y 如果是centos 7，先要安装安装epel：yum install epel-release，才能安装nginx。\nNginx 安装完成后需要手动启动，启动Nginx并设置开机自启：\nsystemctl start nginx systemctl enable nginx 如果开启了防火墙，记得添加 HTTP 和 HTTPS 端口到防火墙允许列表。\nfirewall-cmd --permanent --zone=public --add-service=http firewall-cmd --permanent --zone=public --add-service=https firewall-cmd --reload systemctl restart firewalld.service 配置完成后，访问使用浏览器服务器 ip ，如果能看到以下界面，表示运行成功。\n配置用户 然后新增一个名为 git 的用户，过程中需要设置登录密码，输入两次密码即可。\nadduser git passwd git 给用户 git 赋予无需密码操作的权限（否则到后面 Hexo 部署的时候会提示无权限）\nchmod 740 /etc/sudoers vi /etc/sudoers 在图示位置root ALL=(ALL:ALL) ALL的下方添加\ngit ALL=(ALL:ALL) ALL 然后保存。然后更改读写权限。\nchmod 440 /etc/sudoers 上传 SSH 公钥 接下来要把本地的 ssh 公钥上传到 服务器 。执行\nsu git cd ~ mkdir .ssh \u0026amp;\u0026amp; cd .ssh touch authorized_keys vi authorized_keys 现在要打开本地的 Git Bash，输入vi ~/.ssh/id_rsa.pub，把里面的内容复制下来粘贴到上面打开的文件里。\n接着把ssh目录设置为只有属主有读、写、执行权限。代码如下：\nchmod 600 ~/.ssh/authorized_keys chmod 700 ~/.ssh 然后建立放部署的网页的 Git 库。\ncd ~ mkdir hexo.git \u0026amp;\u0026amp; cd hexo.git git init --bare 测试一下，如果在 Git Bash 中输入 ssh git@服务器的IP地址 能够远程登录的话，则表示设置成功了。如果你的服务器端口不是22。参考：上传SSH公钥。\n ps: 如果配置完成还是提示要输入密码，可以使用 ssh-copy-id，在本地打开 Git Bash 输入：\nssh-copy-id -i ~/.ssh/id_rsa.pub git@服务器ip地址  用户授权 接下来要给用户 git 授予操作 nginx 放网页的地方的权限：\nsu mkdir -p /var/www/hexo chown git:git -R /var/www/hexo 配置钩子 现在就要向 Git Hooks 操作，配置好钩子：\nsu git cd /home/git/hexo.git/hooks vi post-receive 输入内容并保存：（里面的路径看着换吧，上面的命令没改的话也不用换）\n#!/bin/bash GIT_REPO=/home/git/hexo.git TMP_GIT_CLONE=/tmp/hexo PUBLIC_WWW=/var/www/hexo rm -rf ${TMP_GIT_CLONE} git clone $GIT_REPO $TMP_GIT_CLONE rm -rf ${PUBLIC_WWW}/* cp -rf ${TMP_GIT_CLONE}/* ${PUBLIC_WWW} 赋予可执行权限：\nchmod +x post-receive 配置 nginx 然后是配置 nginx。执行\nsu vi /etc/nginx/conf.d/hexo.conf server { listen 80 ; listen [::]:80; root /var/www/hexo; server_name bore.vip www.bore.vip; access_log /var/log/nginx/hexo_access.log; error_log /var/log/nginx/hexo_error.log; error_page 404 = /404.html; location ~* ^.+\\.(ico|gif|jpg|jpeg|png)$ { root /var/www/hexo; access_log off; expires 1d; } location ~* ^.+\\.(css|js|txt|xml|swf|wav)$ { root /var/www/hexo; access_log off; expires 10m; } location / { root /var/www/hexo; if (-f $request_filename) { rewrite ^/(.*)$ /$1 break; } } location /nginx_status { stub_status on; access_log off; } } 因为放中文进去会乱码所以就不在里面注释了。代码里面配置了默认的根目录，绑定了域名，并且自定义了 404 页面的路径。 最后就重启 nginx 服务器：\nsystemctl restart nginx  如果上传网页后，Nginx 出现 403 Forbidden，执行：\nvi /etc/selinux/config 将SELINUX=enforcing 修改为 SELINUX=disabled 状态。\nSELINUX=disabled 重启生效，reboot。\n ps: 最好做一个301跳转，把bore.vip和www.bore.vip合并，并把之前的域名也一并合并. 有两种实现方法,第一种方法是判断nginx核心变量host(老版本是http_host)：\nserver { server_name bore.vip www.bore.vip ; if ($host != \u0026#39;bore.vip\u0026#39; ) { rewrite ^/(.*)$ http://bore.vip/$1 permanent; } ... } 发布文章 在本地编辑好文章之后使用 hexo g -d ，如果hexo d后， ERROR Deployer not found: git，执行\nnpm install -- save hexo-deployer-git 参考链接   1.在服务器上搭建hexo博客，利用git更新\n  2.从 0 开始搭建 hexo 博客 \n  3.基于CentOS搭建Hexo博客\n  4.Nginx出现403 forbidden\n  ","date":"2020-04-25T18:37:25+08:00","permalink":"/archives/hexo-install-on-centos/","title":"hexo部署到centos服务器"},{"content":"本地操作 安装 Git 和 Node.js 本地需要安装 Git （ Latest source Release 2.31.1）和 Node.js（14.16.0 LTS），安装过程略。\n安装完git后还要配置环境变量： 右键我的电脑 –\u0026gt; 属性，然后点击高级系统设置 –\u0026gt; 环境变量 –\u0026gt; 选择用户变量或系统变量中的Path,点击编辑；找到Git安装目录,添加以下地址:\nD:\\Program Files\\Git\\bin D:\\Program Files\\Git\\mingw64\\libexec\\git-core D:\\Program Files\\Git\\mingw64\\bin 配置SSH 公钥 Windows 上安装 Git for Windows 之后在开始菜单里打开 Git Bash 输入：\ngit config --global user.name \u0026#34;你的用户名\u0026#34; git config --global user.email \u0026#34;你的电子邮箱\u0026#34; cd ~ mkdir .ssh cd .ssh ssh-keygen -t rsa 在系统当前用户文件夹下生成了私钥 id_rsa 和公钥 id_rsa.pub。\n初始化 Hexo 在电脑任意目录新建一个文件夹 hexo，进入文件夹，在空白处点击右键选择 Git Bash，输入：\nnpm install hexo-cli -g hexo init blog cd blog npm install hexo server 这样便在本地初始化了 Hexo 文件夹，然后输入： hexo new post \u0026quot;第一篇文章\u0026quot; 即可新建一篇文章，用文本编辑器打开 hexo/source/_post/第一篇文章.md 可以快速开始写作。其余使用方法和配置按照 Hexo 官网操作即可。推荐编辑器**hexo-editor**\n2020/4/27更新: hexo-editor速度太慢，改用Typora\n修改 deploy 参数 打开位于 hexo 文件夹下的 _config.yml，修改 deploy 参数：\n单线部署 deploy: type: git repo: git@blog.yizhilee.com:hexo.git branch: master 多线部署 deploy:type:gitrepo:github:git@github.com:iwyang/iwyang.github.io.gitcoding:git@e.coding.net:iwyang/iwyang.coding.me.gitgitee:git@gitee.com:iwyang/iwyang.gitbranch:master部署到 GitHub 比部署到服务器要简单，这里着重讲下绑定域名。\n添加解析记录 添加cname记录指向Github Pages\n   www CNAME 境外 iwyang.github.io     @ CNAME 境外 iwyang.github.io    这里让境外线路走github\nGithub Pages 对自定义域上 Https 在GitHub pages绑定域名，这里暂时不要勾选SSL。\n解决CNAME反复被删问题  一般我们会将Hexo博客搭建到Github上，如果在Github上为其配置一个自定义的域名时，会自动在项目仓库根目录下新添加一个CNAME文件。但是这里有个问题，如果将Hexo博客重新部署一遍后，Github仓库里的这个CNAME文件就会消失掉，又需要重新配置一遍。\n **其实这里有个技巧，我们可以将需要上传部署到Github的文件都放在source文件夹里，例如CNAME文件、favicon.ico、或者其他的图片等等，这样在执行hexo d这个命令之后，这些文件就不会被删除了。 **\n然后在站点配置文件_config.yml中添加skip_render配置：\nskip_render:- CNAME部署到 coding 操作和部署到github大同小异，注意以下几点：\n 项目地址按iwyang.coding.me来写，建议勾选“启用readme.md初始化项目” 配置SSH公钥时要勾选启用推送权限。 开启Coding Pages 服务，要先在项目设置—功能开关里开启持续集成和持续部署。然后进行实名认证：右上角—团队管理—团队设置—高级设置。 删除项目，点左下角—项目设置—更多。 添加自定义域名，添加cname记录，指向给你的网址。线路选默认。这样就保证国内线路走coding。 注意：一定要选首选的域名，并且非首选域名要勾选跳转至首选域名，不然有些第三方服务数据会统计不到一起。 开启 HTTPS，要先去域名 DNS 把 GitHub 的解析暂停掉，然后再重新申请 SSL 证书，然后开启强制 HTTPS 访问。（不然会申请失败） 如果后面要用cdn全站加速，这里先不要开启ssl。  解决404错误 可是当你push完hexo g生成的静态页面源码到你的repo中后点Coding给你分配的访问地址后却返回的是404页面，其实解决这个问题也很简单，就是点一下上图中的立即部署就行了。\n部署到 gitee 和部署到coding大同小异，但需要注意以下几点：\n免费版gitee page不支持绑定域名、不支持自动部署，并且上传了代码服务里才有gitee pages选项。还有关于首页地址见官方文档：\n 如何创建一个首页访问地址不带二级目录的 pages，如ipvb.gitee.io？\n 答：如果你想你的 pages 首页访问地址不带二级目录，如ipvb.gitee.io，你需要建立一个与自己个性地址同名的仓库，如 https://gitee.com/ipvb 这个用户，想要创建一个自己的站点，但不想以子目录的方式访问，想以ipvb.gitee.io直接访问，那么他就可以创建一个名字为ipvb的仓库 https://gitee.com/ipvb/ipvb 部署完成后，就可以以 https://ipvb.gitee.io 进行访问了。\n自动部署脚本 在根目录新建deploy.sh，输入以下内容：\n#!/bin/bash echo -e \u0026#34;\\033[0;32mDeploying updates to gitee...\\033[0m\u0026#34; hexo clean hexo g -d 有时候可能需要多次运行脚本才能提交成功，这时不妨手动输入命令。\n全站 CDN 加速 使用Cloudflare，encryption mode选 Full，在Edge Certificates选项卡开启Always Use Https\n参考链接   1.Hexo 框架 (八)：双线部署及全站 CDN 加速\n  2.hexo双线部署coding+github pages，实现https并开启又拍云CDN全站加速\n  3.2019hexo博客部署到coding该绕的坑-奥怪的小栈\n  4.Hexo - 解决更新网站时 Github 删除原先的自定义域名的问题\n  ","date":"2020-04-25T11:19:25+08:00","permalink":"/archives/hexo-install-on-github-coding-and-gitee/","title":"hexo部署到github\u0026coding\u0026gitee"}]